{"ast":null,"code":"const Binary_Tree_Postorder_Traversal = {\n  id: '0016',\n  name: 'Binary_Tree_Postorder_Traversal ',\n  refLink: ['https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/145er-cha-shu-de-hou-xu-bian-li-javascript-ti-jie-/', 'https://www.jiuzhang.com/solution/binary-tree-postorder-traversal/', 'https://www.lintcode.com/problem/binary-tree-postorder-traversal/description'],\n  level: 'Easy',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given a binary tree, return the postorder traversal of its nodes' values.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-postorder-traversal/\n\n\n        // let preNode = function (root,arr){\n        //     if(!root) return [];\n        //     preNode(root.left,arr);\n        //     preNode(root.right,arr);\n        //     arr.push(root.val);\n        // }\n\n        // const postorderTraversal = function(root) {\n        //     if(!root) return [];\n        //     let arr =[];\n        //     preNode(root,arr);\n        //     return arr\n        // };\n\n        const postorderTraversal = root => {\n        let res = [], stack = []\n        while (root || stack.length) {\n            res.unshift(root.val)\n            if (root.left) stack.push(root.left)\n            if (root.right) stack.push(root.right)\n            root = stack.pop()\n        }\n        return res\n        }\n    `\n};\nexport default Binary_Tree_Postorder_Traversal;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Binary_Tree_Postorder_Traversal.js"],"names":["Binary_Tree_Postorder_Traversal","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,+BAA+B,GAAI;AACrCC,EAAAA,EAAE,EAAE,MADiC;AAErCC,EAAAA,IAAI,EAAE,kCAF+B;AAGrCC,EAAAA,OAAO,EAAE,CACL,+HADK,EAEL,oEAFK,EAGL,8EAHK,CAH4B;AAQrCC,EAAAA,KAAK,EAAE,MAR8B;AASrCC,EAAAA,GAAG,EAAE,EATgC;AAUrCC,EAAAA,KAAK,EAAG,EAV6B;AAWrCC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXwB,CAAzC;AA4CA,eAAeP,+BAAf","sourcesContent":["const Binary_Tree_Postorder_Traversal  = {\n    id: '0016',\n    name: 'Binary_Tree_Postorder_Traversal ',\n    refLink: [\n        'https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/145er-cha-shu-de-hou-xu-bian-li-javascript-ti-jie-/',\n        'https://www.jiuzhang.com/solution/binary-tree-postorder-traversal/',\n        'https://www.lintcode.com/problem/binary-tree-postorder-traversal/description'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, return the postorder traversal of its nodes' values.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-postorder-traversal/\n\n\n        // let preNode = function (root,arr){\n        //     if(!root) return [];\n        //     preNode(root.left,arr);\n        //     preNode(root.right,arr);\n        //     arr.push(root.val);\n        // }\n\n        // const postorderTraversal = function(root) {\n        //     if(!root) return [];\n        //     let arr =[];\n        //     preNode(root,arr);\n        //     return arr\n        // };\n\n        const postorderTraversal = root => {\n        let res = [], stack = []\n        while (root || stack.length) {\n            res.unshift(root.val)\n            if (root.left) stack.push(root.left)\n            if (root.right) stack.push(root.right)\n            root = stack.pop()\n        }\n        return res\n        }\n    `\n}\n\nexport default Binary_Tree_Postorder_Traversal \n"]},"metadata":{},"sourceType":"module"}