{"ast":null,"code":"var convert_binary_search_tree_to_doubly_linked_list={id:'0024',name:'convert_binary_search_tree_to_doubly_linked_list',refLink:['https://blog.csdn.net/MeiLuan_yahoho/article/details/88920640','https://www.jiuzhang.com/solutions/convert-binary-search-tree-to-doubly-linked-list/'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Convert a binary search tree to doubly linked list with in-order traversal.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: http://www.lintcode.com/problem/convert-binary-search-tree-to-doubly-linked-list/\\n\\n        function Convert(node)\\n        {  \\n            var stack = [];\\n            var prev ;\\n            var root ;\\n            // write code here\\n            while(node!= null||stack.length!=0){\\n                while(node!=null){\\n                    stack.push(node);\\n                    node = node.left;\\n                } \\n                node = stack.pop();\\n                if(!prev){\\n                    root = node;\\n                    node.left = null;\\n                }else{\\n                    prev.right = node;\\n                    node.left = prev;\\n                }\\n                prev = node;\\n                    node = node.right;\\n            }\\n            return root;\\n        }\\n    \"};export default convert_binary_search_tree_to_doubly_linked_list;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/convert_binary_search_tree_to_doubly_linked_list.js"],"names":["convert_binary_search_tree_to_doubly_linked_list","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,gDAAgD,CAAG,CACrDC,EAAE,CAAE,MADiD,CAErDC,IAAI,CAAE,kDAF+C,CAGrDC,OAAO,CAAE,CACL,+DADK,CAEL,sFAFK,CAH4C,CAOrDC,KAAK,CAAE,MAP8C,CAQrDC,GAAG,CAAE,EARgD,CASrDC,KAAK,GATgD,CAUrDC,UAAU,y7BAV2C,CAAzD,CA0CA,cAAeP,CAAAA,gDAAf","sourcesContent":["const convert_binary_search_tree_to_doubly_linked_list = {\n    id: '0024',\n    name: 'convert_binary_search_tree_to_doubly_linked_list',\n    refLink: [\n        'https://blog.csdn.net/MeiLuan_yahoho/article/details/88920640',\n        'https://www.jiuzhang.com/solutions/convert-binary-search-tree-to-doubly-linked-list/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Convert a binary search tree to doubly linked list with in-order traversal.\n\n        // 在线评测地址: http://www.lintcode.com/problem/convert-binary-search-tree-to-doubly-linked-list/\n\n        function Convert(node)\n        {  \n            var stack = [];\n            var prev ;\n            var root ;\n            // write code here\n            while(node!= null||stack.length!=0){\n                while(node!=null){\n                    stack.push(node);\n                    node = node.left;\n                } \n                node = stack.pop();\n                if(!prev){\n                    root = node;\n                    node.left = null;\n                }else{\n                    prev.right = node;\n                    node.left = prev;\n                }\n                prev = node;\n                    node = node.right;\n            }\n            return root;\n        }\n    `\n}\n\nexport default convert_binary_search_tree_to_doubly_linked_list\n"]},"metadata":{},"sourceType":"module"}