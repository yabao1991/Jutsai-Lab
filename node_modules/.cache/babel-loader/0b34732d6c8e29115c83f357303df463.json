{"ast":null,"code":"const Binary_Tree_Paths = {\n  id: '0018',\n  name: 'Binary_Tree_Paths',\n  refLink: ['https://leetcode-cn.com/problems/binary-tree-paths/solution/binary-tree-paths-di-gui-by-cnabbott/', 'https://www.lintcode.com/problem/binary-tree-paths/description', 'https://www.jiuzhang.com/solution/binary-tree-paths/'],\n  level: 'Easy',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given a binary tree, return all root-to-leaf paths.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-paths/\n\n\n        var binaryTreePaths = function(root) {\n            if (!root) return []\n            if (root.left === null && root.right === null) return [root.val.toString()]\n            let left = binaryTreePaths(root.left)\n            let right = binaryTreePaths(root.right)\n            return left.concat(right).map(item => root.val + '->' + item)\n        }\n\n        //\n        // 递归的版本\n        var binaryTreePaths = function(root) {\n            const res = [];\n            function findNext(root, route) {\n                if(!root) return;\n                if(!root.left && !root.right) res.push(route);\n                findNext(root.left, root.left ? route + '->' + root.left.val : route);\n                findNext(root.right, root.right ? route + '->' + root.right.val : route);\n            }\n            findNext(root, (root && root.val) + '');\n            return res;\n        }\n\n        // 非递归的版本\n        var binaryTreePaths = function(root) {\n            if(!root) return [];\n            const stack = [root];\n            let i = 1;\n            const route = [root.val + ''];\n            const res = [];\n            while(i) {\n                while(i--) {\n                    const front = stack.pop();\n                    if(!front) continue;\n                    stack.push(front.left);\n                    stack.push(front.right);\n                    const resFront = route.pop();\n                    if(!front.left && !front.right) {\n                        res.push(resFront);\n                        continue;\n                    }\n                    front.left && route.push(resFront + '->' + front.left.val);\n                    front.right && route.push(resFront + '->' + front.right.val);\n                }\n                i = stack.length;\n            }\n            return res;\n        };\n    `\n};\nexport default Binary_Tree_Paths;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Binary_Tree_Paths.js"],"names":["Binary_Tree_Paths","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG;AACtBC,EAAAA,EAAE,EAAE,MADkB;AAEtBC,EAAAA,IAAI,EAAE,mBAFgB;AAGtBC,EAAAA,OAAO,EAAE,CACL,mGADK,EAEL,gEAFK,EAGL,sDAHK,CAHa;AAQtBC,EAAAA,KAAK,EAAE,MARe;AAStBC,EAAAA,GAAG,EAAE,EATiB;AAUtBC,EAAAA,KAAK,EAAG,EAVc;AAWtBC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXS,CAA1B;AAmEA,eAAeP,iBAAf","sourcesContent":["const Binary_Tree_Paths = {\n    id: '0018',\n    name: 'Binary_Tree_Paths',\n    refLink: [\n        'https://leetcode-cn.com/problems/binary-tree-paths/solution/binary-tree-paths-di-gui-by-cnabbott/',\n        'https://www.lintcode.com/problem/binary-tree-paths/description',\n        'https://www.jiuzhang.com/solution/binary-tree-paths/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, return all root-to-leaf paths.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-paths/\n\n\n        var binaryTreePaths = function(root) {\n            if (!root) return []\n            if (root.left === null && root.right === null) return [root.val.toString()]\n            let left = binaryTreePaths(root.left)\n            let right = binaryTreePaths(root.right)\n            return left.concat(right).map(item => root.val + '->' + item)\n        }\n\n        //\n        // 递归的版本\n        var binaryTreePaths = function(root) {\n            const res = [];\n            function findNext(root, route) {\n                if(!root) return;\n                if(!root.left && !root.right) res.push(route);\n                findNext(root.left, root.left ? route + '->' + root.left.val : route);\n                findNext(root.right, root.right ? route + '->' + root.right.val : route);\n            }\n            findNext(root, (root && root.val) + '');\n            return res;\n        }\n\n        // 非递归的版本\n        var binaryTreePaths = function(root) {\n            if(!root) return [];\n            const stack = [root];\n            let i = 1;\n            const route = [root.val + ''];\n            const res = [];\n            while(i) {\n                while(i--) {\n                    const front = stack.pop();\n                    if(!front) continue;\n                    stack.push(front.left);\n                    stack.push(front.right);\n                    const resFront = route.pop();\n                    if(!front.left && !front.right) {\n                        res.push(resFront);\n                        continue;\n                    }\n                    front.left && route.push(resFront + '->' + front.left.val);\n                    front.right && route.push(resFront + '->' + front.right.val);\n                }\n                i = stack.length;\n            }\n            return res;\n        };\n    `\n}\n\nexport default Binary_Tree_Paths\n"]},"metadata":{},"sourceType":"module"}