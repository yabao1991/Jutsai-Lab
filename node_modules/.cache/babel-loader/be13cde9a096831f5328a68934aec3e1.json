{"ast":null,"code":"var Search_in_a_Big_Sorted_Array={id:'0012',name:'Search_in_a_Big_Sorted_Array',refLink:['https://www.lintcode.com/problem/search-in-a-big-sorted-array/','https://www.lintcode.com/problem/search-in-a-big-sorted-array/description'],level:'Easy',tag:['Binary Search'],notes:\"JAVA\",jsSolution:\"\\n        // Given a big sorted array with non-negative integers sorted by non-decreasing order. \\n        // The array is so big so that you can not get the length of the whole array directly, \\n        // and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++).\\n\\n        // Find the first index of a target number. \\n        // Your algorithm should be in O(log k), where k is the first index of the target number.\\n        \\n        // Return -1, if the number doesn't exist in the array.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/search-in-a-big-sorted-array/\\n\\n        public class Solution {\\n            /*\\n             * @param reader: An instance of ArrayReader.\\n             * @param target: An integer\\n             * @return: An integer which is the first index of target.\\n             */\\n            public int searchBigSortedArray(ArrayReader reader, int target) {\\n                int firstElement = reader.get(0);\\n                if (firstElement == target) \\n                    return 0;\\n                else if (firstElement > target)\\n                    return -1;\\n                \\n                int idx = 0, jump = 1;\\n                while (jump != 0) {\\n                    while (jump != 0 && reader.get(idx + jump) >= target)   // \\u8D8A\\u754C\\u65F6\\u8FD4\\u56DEINT_MAX, \\u5FC5\\u7136\\u4E0D\\u5C0F\\u4E8Etarget\\n                        jump >>= 1;\\n                    idx += jump;\\n                    jump <<= 1;     // \\u5F53jump\\u4E3A0\\u65F6, \\u5DE6\\u79FB\\u4E00\\u4F4D\\u4E0D\\u5F71\\u54CD\\u5B83\\u7684\\u503C, \\u4E0D\\u5F71\\u54CD\\u5FAA\\u73AF\\u7ED3\\u675F\\n                }\\n                \\n                if (reader.get(idx + 1) == target)\\n                    return idx + 1;\\n                else\\n                    return -1;\\n            }\\n        }\\n        \\n        /////////////// \\u65B9\\u6CD52 \\u4E8C\\u5206\\n        \\n        /**\\n         * Definition of ArrayReader:\\n         * \\n         * public class ArrayReader {\\n         * public int get(int index) {\\n         *          // return the number on given index, \\n         *          // return 2147483647 if the index is invalid.\\n         *     }\\n         * };\\n         */\\n        public class Solution {\\n            /*\\n             * @param reader: An instance of ArrayReader.\\n             * @param target: An integer\\n             * @return: An integer which is the first index of target.\\n             */\\n            public int searchBigSortedArray(ArrayReader reader, int target) {\\n                int l = 0, r = 1, mid;\\n                while (reader.get(r) < target)     // \\u8D8A\\u754C\\u8FD4\\u56DEINT_MAX, \\u5FC5\\u7136\\u5927\\u4E8Etarget, \\u6240\\u4EE5\\u6CA1\\u6709\\u5173\\u7CFB\\n                    r <<= 1;\\n                \\n                while (l < r) {\\n                    mid = (l + r) >> 1;\\n                    if (reader.get(mid) >= target)\\n                        r = mid;\\n                    else\\n                        l = mid + 1;\\n                }\\n                \\n                if (reader.get(l) == target)\\n                    return l;\\n                else\\n                    return -1;\\n            }\\n        }\\n    \"};export default Search_in_a_Big_Sorted_Array;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/Search_in_a_Big_Sorted_Array.js"],"names":["Search_in_a_Big_Sorted_Array","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,4BAA4B,CAAG,CACjCC,EAAE,CAAE,MAD6B,CAEjCC,IAAI,CAAE,8BAF2B,CAGjCC,OAAO,CAAE,CACL,gEADK,CAEL,2EAFK,CAHwB,CAOjCC,KAAK,CAAE,MAP0B,CAQjCC,GAAG,CAAE,CACD,eADC,CAR4B,CAWjCC,KAAK,OAX4B,CAYjCC,UAAU,2rGAZuB,CAArC,CA4FA,cAAeP,CAAAA,4BAAf","sourcesContent":["const Search_in_a_Big_Sorted_Array = {\n    id: '0012',\n    name: 'Search_in_a_Big_Sorted_Array',\n    refLink: [\n        'https://www.lintcode.com/problem/search-in-a-big-sorted-array/',\n        'https://www.lintcode.com/problem/search-in-a-big-sorted-array/description',\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: `JAVA`,\n    jsSolution: `\n        // Given a big sorted array with non-negative integers sorted by non-decreasing order. \n        // The array is so big so that you can not get the length of the whole array directly, \n        // and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++).\n\n        // Find the first index of a target number. \n        // Your algorithm should be in O(log k), where k is the first index of the target number.\n        \n        // Return -1, if the number doesn't exist in the array.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/search-in-a-big-sorted-array/\n\n        public class Solution {\n            /*\n             * @param reader: An instance of ArrayReader.\n             * @param target: An integer\n             * @return: An integer which is the first index of target.\n             */\n            public int searchBigSortedArray(ArrayReader reader, int target) {\n                int firstElement = reader.get(0);\n                if (firstElement == target) \n                    return 0;\n                else if (firstElement > target)\n                    return -1;\n                \n                int idx = 0, jump = 1;\n                while (jump != 0) {\n                    while (jump != 0 && reader.get(idx + jump) >= target)   // 越界时返回INT_MAX, 必然不小于target\n                        jump >>= 1;\n                    idx += jump;\n                    jump <<= 1;     // 当jump为0时, 左移一位不影响它的值, 不影响循环结束\n                }\n                \n                if (reader.get(idx + 1) == target)\n                    return idx + 1;\n                else\n                    return -1;\n            }\n        }\n        \n        /////////////// 方法2 二分\n        \n        /**\n         * Definition of ArrayReader:\n         * \n         * public class ArrayReader {\n         * public int get(int index) {\n         *          // return the number on given index, \n         *          // return 2147483647 if the index is invalid.\n         *     }\n         * };\n         */\n        public class Solution {\n            /*\n             * @param reader: An instance of ArrayReader.\n             * @param target: An integer\n             * @return: An integer which is the first index of target.\n             */\n            public int searchBigSortedArray(ArrayReader reader, int target) {\n                int l = 0, r = 1, mid;\n                while (reader.get(r) < target)     // 越界返回INT_MAX, 必然大于target, 所以没有关系\n                    r <<= 1;\n                \n                while (l < r) {\n                    mid = (l + r) >> 1;\n                    if (reader.get(mid) >= target)\n                        r = mid;\n                    else\n                        l = mid + 1;\n                }\n                \n                if (reader.get(l) == target)\n                    return l;\n                else\n                    return -1;\n            }\n        }\n    `,\n}\n\nexport default Search_in_a_Big_Sorted_Array"]},"metadata":{},"sourceType":"module"}