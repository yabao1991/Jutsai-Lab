{"ast":null,"code":"var N_Queens={id:'0039',name:'N_Queens',refLink:['https://www.lintcode.com/problem/n-queens/description','https://www.jiuzhang.com/solution/n-queens/','https://leetcode-cn.com/problems/n-queens/solution/jian-ji-de-javascript-dfs-ti-jie-dai-zhu-shi-by-_t/'],level:'Hard',tag:[],notes:\"\",jsSolution:\"\\n        // The n-queens puzzle is the problem of placing n queens on an n\\xD7n chessboard such that no two queens attack each other(Any two queens can't be in the same row, column, diagonal line).\\n\\n        // Given an integer n, return all distinct solutions to the n-queens puzzle.\\n        \\n        // Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' each indicate a queen and an empty space respectively.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/n-queens/\\n\\n        var solveNQueens = function(n) {\\n            let res = []\\n            dfs(n, [], res)\\n            return res\\n          }\\n          \\n          /**\\n           * \\u9012\\u5F52\\u8BA1\\u7B97 N \\u7687\\u540E\\u7684\\u89E3\\n           * @param {number} n\\n           * @param {number[]} tmp \\u957F\\u5EA6\\u4E3A n \\u7684\\u6570\\u7EC4\\uFF0Ctmp[i] \\u4EE3\\u8868\\u7B2C i \\u884C\\u7684\\u7687\\u540E\\u653E\\u7F6E\\u7684\\u4F4D\\u7F6E\\n           * @param {string[]} res\\n           */\\n          function dfs(n, tmp, res) {\\n            // \\u5982\\u679C tmp \\u957F\\u5EA6\\u4E3A n\\uFF0C\\u4EE3\\u8868\\u6240\\u6709\\u7687\\u540E\\u653E\\u7F6E\\u5B8C\\u6BD5\\n            if (tmp.length === n) {\\n              // \\u628A\\u8FD9\\u79CD\\u89E3\\u8BB0\\u5F55\\u4E0B\\u6765\\n              res.push(\\n                tmp.map(i => {\\n                  let strArr = Array(n).fill('.')\\n                  strArr.splice(i, 1, 'Q')\\n                  return strArr.join('')\\n                })\\n              )\\n              return\\n            }\\n            // \\u6BCF\\u6B21\\u6709 n \\u4E2A\\u9009\\u62E9\\uFF0C\\u8BE5\\u6B21\\u653E\\u7F6E\\u5728\\u7B2C\\u51E0\\u5217\\n            for (let j = 0; j < n; j++) {\\n              // \\u5982\\u679C\\u5F53\\u524D\\u5217\\u6EE1\\u8DB3\\u6761\\u4EF6\\n              if (isValid(tmp, j)) {\\n                // \\u8BB0\\u5F55\\u5F53\\u524D\\u9009\\u62E9\\n                tmp.push(j)\\n                // \\u7EE7\\u7EED\\u4E0B\\u4E00\\u6B21\\u7684\\u9012\\u5F52\\n                dfs(n, tmp, res)\\n                // \\u64A4\\u9500\\u5F53\\u524D\\u9009\\u62E9\\n                tmp.pop()\\n              }\\n            }\\n          }\\n          \\n          function isValid(tmp, j) {\\n            let i = tmp.length\\n            for (let x = 0; x < i; x++) {\\n              let y = tmp[x]\\n              if (y === j || x - y === i - j || x + y === i + j) {\\n                return false\\n              }\\n            }\\n            return true\\n          }\\n    \"};export default N_Queens;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Depth_First_Search/N_Queens.js"],"names":["N_Queens","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,QAAQ,CAAG,CACbC,EAAE,CAAE,MADS,CAEbC,IAAI,CAAE,UAFO,CAGbC,OAAO,CAAE,CACL,uDADK,CAEL,6CAFK,CAGL,wGAHK,CAHI,CAQbC,KAAK,CAAE,MARM,CASbC,GAAG,CAAE,EATQ,CAUbC,KAAK,GAVQ,CAWbC,UAAU,u7EAXG,CAAjB,CAwEA,cAAeP,CAAAA,QAAf","sourcesContent":["const N_Queens = {\n    id: '0039',\n    name: 'N_Queens',\n    refLink: [\n        'https://www.lintcode.com/problem/n-queens/description',\n        'https://www.jiuzhang.com/solution/n-queens/',\n        'https://leetcode-cn.com/problems/n-queens/solution/jian-ji-de-javascript-dfs-ti-jie-dai-zhu-shi-by-_t/'\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other(Any two queens can't be in the same row, column, diagonal line).\n\n        // Given an integer n, return all distinct solutions to the n-queens puzzle.\n        \n        // Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' each indicate a queen and an empty space respectively.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/n-queens/\n\n        var solveNQueens = function(n) {\n            let res = []\n            dfs(n, [], res)\n            return res\n          }\n          \n          /**\n           * 递归计算 N 皇后的解\n           * @param {number} n\n           * @param {number[]} tmp 长度为 n 的数组，tmp[i] 代表第 i 行的皇后放置的位置\n           * @param {string[]} res\n           */\n          function dfs(n, tmp, res) {\n            // 如果 tmp 长度为 n，代表所有皇后放置完毕\n            if (tmp.length === n) {\n              // 把这种解记录下来\n              res.push(\n                tmp.map(i => {\n                  let strArr = Array(n).fill('.')\n                  strArr.splice(i, 1, 'Q')\n                  return strArr.join('')\n                })\n              )\n              return\n            }\n            // 每次有 n 个选择，该次放置在第几列\n            for (let j = 0; j < n; j++) {\n              // 如果当前列满足条件\n              if (isValid(tmp, j)) {\n                // 记录当前选择\n                tmp.push(j)\n                // 继续下一次的递归\n                dfs(n, tmp, res)\n                // 撤销当前选择\n                tmp.pop()\n              }\n            }\n          }\n          \n          function isValid(tmp, j) {\n            let i = tmp.length\n            for (let x = 0; x < i; x++) {\n              let y = tmp[x]\n              if (y === j || x - y === i - j || x + y === i + j) {\n                return false\n              }\n            }\n            return true\n          }\n    `\n}\n\nexport default N_Queens\n"]},"metadata":{},"sourceType":"module"}