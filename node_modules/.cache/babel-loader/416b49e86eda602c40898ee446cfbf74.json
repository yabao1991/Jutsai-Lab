{"ast":null,"code":"var Permutations_II={id:'0038',name:'Permutations_II',refLink:['https://www.lintcode.com/problem/permutations-ii/description','https://www.jiuzhang.com/solution/permutations-ii/'],level:'Medium',tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given a list of numbers with duplicate number in it. Find all unique permutations.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/permutations-ii/\\n\\n        public class Solution {\\n            /*\\n             * @param :  A list of integers\\n             * @return: A list of unique permutations\\n             */\\n            public List<List<Integer>> permuteUnique(int[] nums) {\\n                List<List<Integer>> results = new ArrayList<>();\\n                if (nums == null) {\\n                    return results;\\n                }\\n                \\n                Arrays.sort(nums);\\n                dfs(nums, new boolean[nums.length], new ArrayList<Integer>(), results);\\n                \\n                return results;\\n            }\\n            \\n            private void dfs(int[] nums,\\n                             boolean[] visited,\\n                             List<Integer> permutation,\\n                             List<List<Integer>> results) {\\n                if (nums.length == permutation.size()) {\\n                    results.add(new ArrayList<Integer>(permutation));\\n                    return;\\n                }\\n                \\n                for (int i = 0; i < nums.length; i++) {\\n                    if (visited[i]) {\\n                        continue;\\n                    }\\n                    if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {\\n                        continue;\\n                    }\\n                    \\n                    permutation.add(nums[i]);\\n                    visited[i] = true;\\n                    dfs(nums, visited, permutation, results);\\n                    visited[i] = false;\\n                    permutation.remove(permutation.size() - 1);\\n                }\\n            }\\n         };\\n    \"};export default Permutations_II;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Depth_First_Search/Permutations_II.js"],"names":["Permutations_II","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,eAAe,CAAG,CACpBC,EAAE,CAAE,MADgB,CAEpBC,IAAI,CAAE,iBAFc,CAGpBC,OAAO,CAAE,CACL,8DADK,CAEL,oDAFK,CAHW,CAOpBC,KAAK,CAAE,QAPa,CAQpBC,GAAG,CAAE,EARe,CASpBC,KAAK,YATe,CAUpBC,UAAU,ozDAVU,CAAxB,CA4DA,cAAeP,CAAAA,eAAf","sourcesContent":["const Permutations_II = {\n    id: '0038',\n    name: 'Permutations_II', \n    refLink: [\n        'https://www.lintcode.com/problem/permutations-ii/description',\n        'https://www.jiuzhang.com/solution/permutations-ii/'\n    ],\n    level: 'Medium',\n    tag: [],\n    notes: `JAVA only`,\n    jsSolution: `\n        // Given a list of numbers with duplicate number in it. Find all unique permutations.\n\n        // 在线评测地址: https://www.lintcode.com/problem/permutations-ii/\n\n        public class Solution {\n            /*\n             * @param :  A list of integers\n             * @return: A list of unique permutations\n             */\n            public List<List<Integer>> permuteUnique(int[] nums) {\n                List<List<Integer>> results = new ArrayList<>();\n                if (nums == null) {\n                    return results;\n                }\n                \n                Arrays.sort(nums);\n                dfs(nums, new boolean[nums.length], new ArrayList<Integer>(), results);\n                \n                return results;\n            }\n            \n            private void dfs(int[] nums,\n                             boolean[] visited,\n                             List<Integer> permutation,\n                             List<List<Integer>> results) {\n                if (nums.length == permutation.size()) {\n                    results.add(new ArrayList<Integer>(permutation));\n                    return;\n                }\n                \n                for (int i = 0; i < nums.length; i++) {\n                    if (visited[i]) {\n                        continue;\n                    }\n                    if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {\n                        continue;\n                    }\n                    \n                    permutation.add(nums[i]);\n                    visited[i] = true;\n                    dfs(nums, visited, permutation, results);\n                    visited[i] = false;\n                    permutation.remove(permutation.size() - 1);\n                }\n            }\n         };\n    `\n}\n\nexport default Permutations_II\n"]},"metadata":{},"sourceType":"module"}