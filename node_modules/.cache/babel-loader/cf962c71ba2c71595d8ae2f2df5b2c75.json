{"ast":null,"code":"var subarray_sum_closest={id:'0051',name:'subarray_sum_closest',refLink:['https://www.jiuzhang.com/solution/subarray-sum-closest/','https://www.lintcode.com/problem/subarray-sum-closest/description'],level:'Hard',tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/subarray-sum-closest/\\n        \\n        class Pair {\\n            int sum;\\n            int index;\\n            public Pair(int s, int i) {\\n                sum = s;\\n                index = i;\\n            }\\n        }\\n            \\n        public class Solution {\\n            /**\\n             * @param nums: A list of integers\\n             * @return: A list of integers includes the index of the first number \\n             *          and the index of the last number\\n             */\\n            public int[] subarraySumClosest(int[] nums) {\\n                int[] res = new int[2];\\n                if (nums == null || nums.length == 0) {\\n                    return res;\\n                } \\n                \\n                int len = nums.length;\\n                if(len == 1) {\\n                    res[0] = res[1] = 0;\\n                    return res;\\n                }\\n                Pair[] sums = new Pair[len+1];\\n                int prev = 0;\\n                sums[0] = new Pair(0, 0);\\n                for (int i = 1; i <= len; i++) {\\n                    sums[i] = new Pair(prev + nums[i-1], i);\\n                    prev = sums[i].sum;\\n                }\\n                Arrays.sort(sums, new Comparator<Pair>() {\\n                   public int compare(Pair a, Pair b) {\\n                       return a.sum - b.sum;\\n                   } \\n                });\\n                int ans = Integer.MAX_VALUE;\\n                for (int i = 1; i <= len; i++) {\\n                    \\n                    if (ans > sums[i].sum - sums[i-1].sum) {\\n                        ans = sums[i].sum - sums[i-1].sum;\\n                        int[] temp = new int[]{sums[i].index - 1, sums[i - 1].index - 1};\\n                        Arrays.sort(temp);\\n                        res[0] = temp[0] + 1;\\n                        res[1] = temp[1];\\n                    }\\n                }\\n                \\n                return res;\\n            }\\n        }\\n        \\n        \\n        /*\\n        \\u95EE\\uFF1A\\u4E3A\\u4EC0\\u4E48\\u9700\\u8981\\u4E00\\u4E2A (0,0) \\u7684\\u521D\\u59CB Pair?\\n        \\u7B54\\uFF1A\\n        \\u6211\\u4EEC\\u9996\\u5148\\u9700\\u8981\\u56DE\\u987E\\u4E00\\u4E0B\\uFF0C\\u5728 subarray \\u8FD9\\u8282\\u8BFE\\u91CC\\uFF0C\\u6211\\u4EEC\\u8BB2\\u8FC7\\u4E00\\u4E2A\\u91CD\\u8981\\u7684\\u77E5\\u8BC6\\u70B9\\uFF0C\\u53EB\\u505A Prefix Sum\\n        \\u6BD4\\u5982\\u5BF9\\u4E8E\\u6570\\u7EC4 [1,2,3,4]\\uFF0C\\u4ED6\\u7684 Prefix Sum \\u662F [1,3,6,10]\\n        \\u5206\\u522B\\u8868\\u793A \\u524D1\\u4E2A\\u6570\\u4E4B\\u548C\\uFF0C\\u524D2\\u4E2A\\u6570\\u4E4B\\u548C\\uFF0C\\u524D3\\u4E2A\\u6570\\u4E4B\\u548C\\uFF0C\\u524D4\\u4E2A\\u6570\\u4E4B\\u548C\\n        \\u8FD9\\u4E2A\\u65F6\\u5019\\u5982\\u679C\\u4F60\\u60F3\\u8981\\u77E5\\u9053 \\u5B50\\u6570\\u7EC4 \\u4ECE\\u4E0B\\u6807  1 \\u5230\\u4E0B\\u6807 2 \\u7684\\u8FD9\\u4E00\\u6BB5\\u7684\\u548C(2+3)\\uFF0C\\u5C31\\u7528\\u524D 3\\u4E2A\\u6570\\u4E4B\\u548C \\u51CF\\u53BB \\u524D1\\u4E2A\\u6570\\u4E4B\\u548C = PrefixSum[2] - PrefixSum[0] = 6 - 1 = 5\\n        \\u4F60\\u53EF\\u4EE5\\u770B\\u5230\\u8FD9\\u91CC\\u7684 \\u524D x \\u4E2A\\u6570\\uFF0C\\u548C\\u5177\\u4F53\\u5BF9\\u5E94\\u7684\\u4E0B\\u6807\\u4E4B\\u95F4\\uFF0C\\u5B58\\u5728 +-1 \\u7684\\u95EE\\u9898\\n        \\u7B2C x \\u4E2A\\u6570\\u7684\\u4E0B\\u6807\\u662F x - 1\\uFF0C\\u53CD\\u4E4B \\u4E0B\\u6807 x \\u662F\\u7B2C x + 1 \\u4E2A\\u6570\\n        \\u90A3\\u4E48\\u95EE\\u9898\\u6765\\u4E86\\uFF0C\\u5982\\u679C\\u8981\\u8BA1\\u7B97 \\u4E0B\\u6807\\u4ECE 0~2 \\u8FD9\\u4E00\\u6BB5\\u5462\\uFF1F\\u4E5F\\u5C31\\u662F\\u7B2C1\\u4E2A\\u6570\\u5230\\u7B2C3\\u4E2A\\u6570\\uFF0C\\u56E0\\u4E3A\\u90A3\\u6837\\u4F1A\\u8BBF\\u95EE\\u5230 PrefixSum[-1]\\n        \\u6240\\u4EE5\\u6211\\u4EEC\\u628A PrefixSum \\u6574\\u4F53\\u5F80\\u540E\\u9762\\u79FB\\u52A8\\u4E00\\u4F4D\\uFF0C\\u628A\\u7B2C0\\u4F4D\\u7A7A\\u51FA\\u6765\\u8868\\u793A\\u524D0\\u4E2A\\u6570\\u4E4B\\u548C\\uFF0C\\u4E5F\\u5C31\\u662F0. => [0,1,3,6,10]\\n        \\u90A3\\u4E48\\u6B64\\u65F6\\u5C31\\u7528 PrefixSum[3] - PrefixSum[0] \\uFF0C\\u8FD9\\u6837\\u8BA1\\u7B97\\u5C31\\u66F4\\u65B9\\u4FBF\\u4E86\\u3002\\n        \\u6B64\\u65F6\\uFF0CPrefixSum[i] \\u4EE3\\u8868 \\u524Di\\u4E2A\\u6570\\u4E4B\\u548C\\uFF0C\\u4E5F\\u5C31\\u662F \\u4E0B\\u6807\\u533A\\u95F4\\u5728 0 ~ i-1 \\u8FD9\\u4E00\\u6BB5\\u7684\\u548C\\n        \\n        \\u90A3\\u4E48\\u56DE\\u8FC7\\u5934\\u6765\\u770B\\u770B\\uFF0C\\u4E3A\\u4EC0\\u4E48\\u6211\\u4EEC\\u9700\\u8981\\u4E00\\u4E2A (0,0) \\u7684 pair \\u5462\\uFF1F\\n        \\u56E0\\u4E3A \\u8FD9\\u4E2A 0,0 \\u4EE3\\u8868\\u7684\\u5C31\\u662F\\u524D0\\u4E2A\\u6570\\u4E4B\\u548C\\u4E3A0\\n        \\u4E00\\u4E2A n \\u4E2A\\u6570\\u7684\\u6570\\u7EC4\\uFF0C \\u53D8\\u6210\\u4E86 prefix Sum \\u6570\\u7EC4\\u4E4B\\u540E\\uFF0C\\u4F1A\\u591A\\u4E00\\u4E2A\\u6570\\u51FA\\u6765\\n        */\\n    \"};export default subarray_sum_closest;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Linked_List_Array/subarray_sum_closest.js"],"names":["subarray_sum_closest","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,oBAAoB,CAAG,CACzBC,EAAE,CAAE,MADqB,CAEzBC,IAAI,CAAE,sBAFmB,CAGzBC,OAAO,CAAE,CACL,yDADK,CAEL,mEAFK,CAHgB,CAOzBC,KAAK,CAAE,MAPkB,CAQzBC,GAAG,CAAE,EARoB,CASzBC,KAAK,YAToB,CAUzBC,UAAU,moJAVe,CAA7B,CA2FA,cAAeP,CAAAA,oBAAf","sourcesContent":["const subarray_sum_closest = {\n    id: '0051',\n    name: 'subarray_sum_closest', \n    refLink: [\n        'https://www.jiuzhang.com/solution/subarray-sum-closest/',\n        'https://www.lintcode.com/problem/subarray-sum-closest/description'\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: `JAVA only`,\n    jsSolution: `\n        // Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.\n\n        // 在线评测地址: https://www.lintcode.com/problem/subarray-sum-closest/\n        \n        class Pair {\n            int sum;\n            int index;\n            public Pair(int s, int i) {\n                sum = s;\n                index = i;\n            }\n        }\n            \n        public class Solution {\n            /**\n             * @param nums: A list of integers\n             * @return: A list of integers includes the index of the first number \n             *          and the index of the last number\n             */\n            public int[] subarraySumClosest(int[] nums) {\n                int[] res = new int[2];\n                if (nums == null || nums.length == 0) {\n                    return res;\n                } \n                \n                int len = nums.length;\n                if(len == 1) {\n                    res[0] = res[1] = 0;\n                    return res;\n                }\n                Pair[] sums = new Pair[len+1];\n                int prev = 0;\n                sums[0] = new Pair(0, 0);\n                for (int i = 1; i <= len; i++) {\n                    sums[i] = new Pair(prev + nums[i-1], i);\n                    prev = sums[i].sum;\n                }\n                Arrays.sort(sums, new Comparator<Pair>() {\n                   public int compare(Pair a, Pair b) {\n                       return a.sum - b.sum;\n                   } \n                });\n                int ans = Integer.MAX_VALUE;\n                for (int i = 1; i <= len; i++) {\n                    \n                    if (ans > sums[i].sum - sums[i-1].sum) {\n                        ans = sums[i].sum - sums[i-1].sum;\n                        int[] temp = new int[]{sums[i].index - 1, sums[i - 1].index - 1};\n                        Arrays.sort(temp);\n                        res[0] = temp[0] + 1;\n                        res[1] = temp[1];\n                    }\n                }\n                \n                return res;\n            }\n        }\n        \n        \n        /*\n        问：为什么需要一个 (0,0) 的初始 Pair?\n        答：\n        我们首先需要回顾一下，在 subarray 这节课里，我们讲过一个重要的知识点，叫做 Prefix Sum\n        比如对于数组 [1,2,3,4]，他的 Prefix Sum 是 [1,3,6,10]\n        分别表示 前1个数之和，前2个数之和，前3个数之和，前4个数之和\n        这个时候如果你想要知道 子数组 从下标  1 到下标 2 的这一段的和(2+3)，就用前 3个数之和 减去 前1个数之和 = PrefixSum[2] - PrefixSum[0] = 6 - 1 = 5\n        你可以看到这里的 前 x 个数，和具体对应的下标之间，存在 +-1 的问题\n        第 x 个数的下标是 x - 1，反之 下标 x 是第 x + 1 个数\n        那么问题来了，如果要计算 下标从 0~2 这一段呢？也就是第1个数到第3个数，因为那样会访问到 PrefixSum[-1]\n        所以我们把 PrefixSum 整体往后面移动一位，把第0位空出来表示前0个数之和，也就是0. => [0,1,3,6,10]\n        那么此时就用 PrefixSum[3] - PrefixSum[0] ，这样计算就更方便了。\n        此时，PrefixSum[i] 代表 前i个数之和，也就是 下标区间在 0 ~ i-1 这一段的和\n        \n        那么回过头来看看，为什么我们需要一个 (0,0) 的 pair 呢？\n        因为 这个 0,0 代表的就是前0个数之和为0\n        一个 n 个数的数组， 变成了 prefix Sum 数组之后，会多一个数出来\n        */\n    `\n}\n\nexport default subarray_sum_closest\n"]},"metadata":{},"sourceType":"module"}