{"ast":null,"code":"const Serialize_and_Deserialize_Binary_Tree = {\n  id: '0027',\n  name: 'Serialize_and_Deserialize_Binary_Tree',\n  refLink: ['https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/javascriptceng-xu-bian-li-si-lu-he-shi-xian-by-xin/'],\n  level: 'Medium',\n  tag: [''],\n  notes: ``,\n  jsSolution: `\n        // 序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。\n\n        // 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n        \n        // 示例: \n        \n        // 你可以将以下二叉树：\n        \n        // 序列化为 \"[1,2,3,null,null,4,5]\"\n        // 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n        \n        // 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。\n\n\n        序列化二叉树思路\n        使用广度优先（BFS）遍历所有节点（包括空节点），整体流程如下：\n\n        初始化字符串 res\n        初始化队列 queue，将 root 放入队列\n        检查队列是否为空：\n        队列不为空：取出队首节点，如果节点为 null，那么 res 更新为 res + '#,'；如果节点不是 null，那么 res 更新为 res + val，并且将节点的左右节点依次加入 queue。继续循环。\n        队列为空：结束循环\n        返回\"[\" + res + \"]\"\n        \n        以上面这棵二叉树为例，它的序列化结果是\"[1,2,3,#,#,4,5,#,#,#,#]\"\n\n        序列化的代码实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Encodes a tree to a single string.\n         *\n         * @param {TreeNode} root\n         * @return {string}\n         */\n        var serialize = function(root) {\n            if (!root) {\n                return \"[]\";\n            }\n\n            let res = \"\";\n            let node = root;\n            const queue = [node];\n            while (queue.length) {\n                const front = queue.shift();\n                if (front) {\n                    res += \\`\\${front.val},\\`;\n                    queue.push(front.left);\n                    queue.push(front.right);\n                } else {\n                    res += \"#,\";\n                }\n            }\n\n            res = res.substring(0, res.length - 1); // 去掉最后一个逗号\n\n            return \\`[\\${res}]\\`;\n        };\n        反序列化二叉树思路\n        以前面的二叉树为例，反序列话就是将字符串\"[1,2,3,#,#,4,5,#,#,#,#]\"重新还原成原来的二叉树。\n\n        反序列化流程如下：\n\n        去掉字符串 res 前后的[和]，并将其按照,逗号切分得到数组 nodes\n        初始化队列 queue，放入 nodes 的第一个值对应的节点，nodes 弹出第一个值\n        检查队列是否为空：\n        队列不为空。从 queue 取出队首元素。从 nodes 中取出第一个值和第二值，依次处理。继续循环。\n        队列为空。结束循环。\n        返回根节点。\n        反序列化函数的设计关键是：数组 nodes 取出元素的顺序和原二叉树层序遍历的顺序是对应的。\n\n        反序列的函数实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Decodes your encoded data to tree.\n         *\n         * @param {string} data\n         * @return {TreeNode}\n         */\n        var deserialize = function(data) {\n            if (data.length <= 2) {\n                return null;\n            }\n\n            const nodes = data.substring(1, data.length - 1).split(\",\");\n            const root = new TreeNode(parseInt(nodes[0]));\n            nodes.shift();\n\n            const queue = [root];\n            while (queue.length) {\n                const node = queue.shift();\n                // 第一个是左节点，节点为空，直接跳过\n                const leftVal = nodes.shift();\n                if (leftVal !== \"#\") {\n                    node.left = new TreeNode(leftVal);\n                    queue.push(node.left);\n                }\n                // 第二个是右节点，节点为空，直接跳过\n                const rightVal = nodes.shift();\n                if (rightVal !== \"#\") {\n                    node.right = new TreeNode(rightVal);\n                    queue.push(node.right);\n                }\n            }\n\n            return root;\n        };\n    `\n};\nexport default Serialize_and_Deserialize_Binary_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Breadth_First_Search/Serialize_and_Deserialize_Binary_Tree.js"],"names":["Serialize_and_Deserialize_Binary_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,qCAAqC,GAAG;AAC1CC,EAAAA,EAAE,EAAE,MADsC;AAE1CC,EAAAA,IAAI,EAAE,uCAFoC;AAG1CC,EAAAA,OAAO,EAAE,CACL,qIADK,CAHiC;AAM1CC,EAAAA,KAAK,EAAE,QANmC;AAO1CC,EAAAA,GAAG,EAAE,CACD,EADC,CAPqC;AAU1CC,EAAAA,KAAK,EAAG,EAVkC;AAW1CC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAX6B,CAA9C;AA+HA,eAAeP,qCAAf","sourcesContent":["const Serialize_and_Deserialize_Binary_Tree = {\n    id: '0027',\n    name: 'Serialize_and_Deserialize_Binary_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/javascriptceng-xu-bian-li-si-lu-he-shi-xian-by-xin/',\n    ],\n    level: 'Medium',\n    tag: [\n        ''\n    ],\n    notes: ``,\n    jsSolution: `\n        // 序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。\n\n        // 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n        \n        // 示例: \n        \n        // 你可以将以下二叉树：\n        \n        // 序列化为 \"[1,2,3,null,null,4,5]\"\n        // 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n        \n        // 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。\n\n\n        序列化二叉树思路\n        使用广度优先（BFS）遍历所有节点（包括空节点），整体流程如下：\n\n        初始化字符串 res\n        初始化队列 queue，将 root 放入队列\n        检查队列是否为空：\n        队列不为空：取出队首节点，如果节点为 null，那么 res 更新为 res + '#,'；如果节点不是 null，那么 res 更新为 res + val，并且将节点的左右节点依次加入 queue。继续循环。\n        队列为空：结束循环\n        返回\"[\" + res + \"]\"\n        \n        以上面这棵二叉树为例，它的序列化结果是\"[1,2,3,#,#,4,5,#,#,#,#]\"\n\n        序列化的代码实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Encodes a tree to a single string.\n         *\n         * @param {TreeNode} root\n         * @return {string}\n         */\n        var serialize = function(root) {\n            if (!root) {\n                return \"[]\";\n            }\n\n            let res = \"\";\n            let node = root;\n            const queue = [node];\n            while (queue.length) {\n                const front = queue.shift();\n                if (front) {\n                    res += \\`\\${front.val},\\`;\n                    queue.push(front.left);\n                    queue.push(front.right);\n                } else {\n                    res += \"#,\";\n                }\n            }\n\n            res = res.substring(0, res.length - 1); // 去掉最后一个逗号\n\n            return \\`[\\${res}]\\`;\n        };\n        反序列化二叉树思路\n        以前面的二叉树为例，反序列话就是将字符串\"[1,2,3,#,#,4,5,#,#,#,#]\"重新还原成原来的二叉树。\n\n        反序列化流程如下：\n\n        去掉字符串 res 前后的[和]，并将其按照,逗号切分得到数组 nodes\n        初始化队列 queue，放入 nodes 的第一个值对应的节点，nodes 弹出第一个值\n        检查队列是否为空：\n        队列不为空。从 queue 取出队首元素。从 nodes 中取出第一个值和第二值，依次处理。继续循环。\n        队列为空。结束循环。\n        返回根节点。\n        反序列化函数的设计关键是：数组 nodes 取出元素的顺序和原二叉树层序遍历的顺序是对应的。\n\n        反序列的函数实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Decodes your encoded data to tree.\n         *\n         * @param {string} data\n         * @return {TreeNode}\n         */\n        var deserialize = function(data) {\n            if (data.length <= 2) {\n                return null;\n            }\n\n            const nodes = data.substring(1, data.length - 1).split(\",\");\n            const root = new TreeNode(parseInt(nodes[0]));\n            nodes.shift();\n\n            const queue = [root];\n            while (queue.length) {\n                const node = queue.shift();\n                // 第一个是左节点，节点为空，直接跳过\n                const leftVal = nodes.shift();\n                if (leftVal !== \"#\") {\n                    node.left = new TreeNode(leftVal);\n                    queue.push(node.left);\n                }\n                // 第二个是右节点，节点为空，直接跳过\n                const rightVal = nodes.shift();\n                if (rightVal !== \"#\") {\n                    node.right = new TreeNode(rightVal);\n                    queue.push(node.right);\n                }\n            }\n\n            return root;\n        };\n    `\n}\n\nexport default Serialize_and_Deserialize_Binary_Tree\n"]},"metadata":{},"sourceType":"module"}