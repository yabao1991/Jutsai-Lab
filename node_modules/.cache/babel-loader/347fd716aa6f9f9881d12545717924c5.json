{"ast":null,"code":"var last_position_of_target={id:'0010',name:'last_position_of_target',refLink:['https://www.lintcode.com/problem/last-position-of-target/'],level:'Easy',tag:['Binary Search'],notes:\"\\u53EF\\u63D0\\u4EA4\\uFF0C\\u4E0D\\u80FD\\u8FC7\\u6240\\u6709test\",jsSolution:\"\\n        // Find the last position of a target number in a sorted array. Return -1 if target does not exist.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/last-position-of-target/\\n\\n        /**\\n         * @param nums: An integer array sorted in ascending order\\n         * @param target: An integer\\n         * @return: An integer\\n         */\\n        const lastPosition = function (nums, target) {\\n            \\n            // write your code here\\n            let left = 0;\\n            let right = nums.length;\\n            while(left < right){\\n                let mid = (left + right) >> 1;\\n                if(nums[mid] == target){\\n                    left = mid + 1; \\n                }else if(nums[mid] < target){\\n                    left = mid + 1;\\n                }else if(nums[mid] > target){\\n                    right = mid;\\n                }\\n            }\\n            left = left - 1\\n            return left\\n        }\\n    \"};export default last_position_of_target;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/last_position_of_target.js"],"names":["last_position_of_target","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,uBAAuB,CAAG,CAC5BC,EAAE,CAAE,MADwB,CAE5BC,IAAI,CAAE,yBAFsB,CAG5BC,OAAO,CAAE,CACL,2DADK,CAHmB,CAM5BC,KAAK,CAAE,MANqB,CAO5BC,GAAG,CAAE,CACD,eADC,CAPuB,CAU5BC,KAAK,6DAVuB,CAW5BC,UAAU,g+BAXkB,CAAhC,CA0CA,cAAeP,CAAAA,uBAAf","sourcesContent":["const last_position_of_target = {\n    id: '0010',\n    name: 'last_position_of_target',\n    refLink: [\n        'https://www.lintcode.com/problem/last-position-of-target/',\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: `可提交，不能过所有test`,\n    jsSolution: `\n        // Find the last position of a target number in a sorted array. Return -1 if target does not exist.\n\n        // 在线评测地址: https://www.lintcode.com/problem/last-position-of-target/\n\n        /**\n         * @param nums: An integer array sorted in ascending order\n         * @param target: An integer\n         * @return: An integer\n         */\n        const lastPosition = function (nums, target) {\n            \n            // write your code here\n            let left = 0;\n            let right = nums.length;\n            while(left < right){\n                let mid = (left + right) >> 1;\n                if(nums[mid] == target){\n                    left = mid + 1; \n                }else if(nums[mid] < target){\n                    left = mid + 1;\n                }else if(nums[mid] > target){\n                    right = mid;\n                }\n            }\n            left = left - 1\n            return left\n        }\n    `,\n}\n\nexport default last_position_of_target"]},"metadata":{},"sourceType":"module"}