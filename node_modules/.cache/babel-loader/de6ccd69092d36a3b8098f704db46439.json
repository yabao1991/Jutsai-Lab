{"ast":null,"code":"import _objectSpread from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Table,Tag}from'antd';import{DEFAULT_SUBREDDIT_API}from'../../utils/Constants';var SubredditList=function SubredditList(props){var data=props.data,url=props.url,selectedRowKeys=props.selectedRowKeys,handleGetColumnSearchProps=props.handleGetColumnSearchProps;var SubredditListColumns=[_objectSpread({title:'Title',dataIndex:'title'},handleGetColumnSearchProps('title'))];var onRowClick=function onRowClick(rowdata,rowIndex){var handleUpdateUrl=props.handleUpdateUrl;return{onClick:handleUpdateUrl(rowdata.url,rowIndex)};};// const rowSelection = {\n//   type:'radio',\n//   selectedRowKeys,\n//   onChange: (keys) => handleUpdateRowKeys(keys, 'subredditListSelectedRowKeys'),\n// };\nvar rowSelection=undefined;var hasSelected=selectedRowKeys.length>0;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"tableHeader\"},/*#__PURE__*/React.createElement(Tag,{color:\"#108ee9\"},\"Step 1: Select a subreddit\"),hasSelected?/*#__PURE__*/React.createElement(\"p\",null,\"Selected url: \".concat(url,\" \")):/*#__PURE__*/React.createElement(\"p\",null,\"Selected url: (No selection)\")),/*#__PURE__*/React.createElement(Table,{onRow:function onRow(record,index){return{onClick:function onClick(){onRowClick(record,index);}};},rowSelection:rowSelection,columns:SubredditListColumns,dataSource:data,expandable:{expandedRowRender:function expandedRowRender(record){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{style:{margin:10}},\"Api url:\"),/*#__PURE__*/React.createElement(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://www.reddit.com\".concat(record.url,\"hot.json\"),style:{margin:5}},\"https://www.reddit.com\",record.url,\"hot.json\"));},rowExpandable:function rowExpandable(record){return record.name!=='Not Expandable';}},pagination:{defaultCurrent:1,defaultPageSize:27},scroll:{y:350}}),/*#__PURE__*/React.createElement(\"p\",null,\"default data from: \",DEFAULT_SUBREDDIT_API));};export default SubredditList;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/components/SubredditList/index.js"],"names":["React","Table","Tag","DEFAULT_SUBREDDIT_API","SubredditList","props","data","url","selectedRowKeys","handleGetColumnSearchProps","SubredditListColumns","title","dataIndex","onRowClick","rowdata","rowIndex","handleUpdateUrl","onClick","rowSelection","undefined","hasSelected","length","record","index","expandedRowRender","margin","rowExpandable","name","defaultCurrent","defaultPageSize","y"],"mappings":"mKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,GAAhB,KAA2B,MAA3B,CACA,OAASC,qBAAT,KAAsC,uBAAtC,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,IAE7BC,CAAAA,IAF6B,CAO3BD,KAP2B,CAE7BC,IAF6B,CAG7BC,GAH6B,CAO3BF,KAP2B,CAG7BE,GAH6B,CAI7BC,eAJ6B,CAO3BH,KAP2B,CAI7BG,eAJ6B,CAM7BC,0BAN6B,CAO3BJ,KAP2B,CAM7BI,0BAN6B,CAS/B,GAAMC,CAAAA,oBAAoB,CAAG,gBAEvBC,KAAK,CAAE,OAFgB,CAGvBC,SAAS,CAAE,OAHY,EAIpBH,0BAA0B,CAAC,OAAD,CAJN,EAA7B,CAQA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAAUC,QAAV,CAAuB,IAChCC,CAAAA,eADgC,CACZX,KADY,CAChCW,eADgC,CAExC,MAAO,CACLC,OAAO,CAAED,eAAe,CAACF,OAAO,CAACP,GAAT,CAAcQ,QAAd,CADnB,CAAP,CAGD,CALD,CAMA;AACA;AACA;AACA;AACA;AACA,GAAMG,CAAAA,YAAY,CAAGC,SAArB,CACA,GAAMC,CAAAA,WAAW,CAAGZ,eAAe,CAACa,MAAhB,CAAyB,CAA7C,CAEA,mBACE,4CACE,2BAAK,SAAS,CAAC,aAAf,eACE,oBAAC,GAAD,EAAK,KAAK,CAAC,SAAX,+BADF,CAEGD,WAAW,cACR,qDAAqBb,GAArB,MADQ,cAER,4DAJN,CADF,cAOE,oBAAC,KAAD,EACE,KAAK,CAAE,eAACe,MAAD,CAASC,KAAT,CAAmB,CACtB,MAAO,CACLN,OAAO,CAAE,kBAAM,CACXJ,UAAU,CAACS,MAAD,CAASC,KAAT,CAAV,CACH,CAHI,CAAP,CAKH,CAPH,CAQE,YAAY,CAAEL,YARhB,CASE,OAAO,CAAER,oBATX,CAUE,UAAU,CAAEJ,IAVd,CAWE,UAAU,CAAE,CACRkB,iBAAiB,CAAE,2BAAAF,MAAM,qBACvB,4CACE,yBAAG,KAAK,CAAE,CAAEG,MAAM,CAAE,EAAV,CAAV,aADF,cAEE,yBAAG,MAAM,CAAC,QAAV,CAAmB,GAAG,CAAC,qBAAvB,CAA6C,IAAI,iCAA2BH,MAAM,CAACf,GAAlC,YAAjD,CAAkG,KAAK,CAAE,CAAEkB,MAAM,CAAE,CAAV,CAAzG,2BAA+IH,MAAM,CAACf,GAAtJ,YAFF,CADuB,EADjB,CAORmB,aAAa,CAAE,uBAAAJ,MAAM,QAAIA,CAAAA,MAAM,CAACK,IAAP,GAAgB,gBAApB,EAPb,CAXd,CAoBE,UAAU,CAAE,CACRC,cAAc,CAAE,CADR,CAERC,eAAe,CAAE,EAFT,CApBd,CAwBE,MAAM,CAAE,CAAEC,CAAC,CAAE,GAAL,CAxBV,EAPF,cAiCE,mDAAuB3B,qBAAvB,CAjCF,CADF,CAqCD,CApED,CAsEA,cAAeC,CAAAA,aAAf","sourcesContent":["import React from 'react';\nimport { Table, Tag } from 'antd';\nimport { DEFAULT_SUBREDDIT_API } from '../../utils/Constants'\n\nconst SubredditList = (props) => {\n  const {\n    data,\n    url,\n    selectedRowKeys,\n    // handleUpdateRowKeys,\n    handleGetColumnSearchProps\n  } = props\n\n  const SubredditListColumns = [\n    {\n        title: 'Title',\n        dataIndex: 'title',\n        ...handleGetColumnSearchProps('title')\n    },\n  ]\n\n  const onRowClick = (rowdata, rowIndex) => {\n    const { handleUpdateUrl } = props\n    return {\n      onClick: handleUpdateUrl(rowdata.url, rowIndex),\n    }\n  }\n  // const rowSelection = {\n  //   type:'radio',\n  //   selectedRowKeys,\n  //   onChange: (keys) => handleUpdateRowKeys(keys, 'subredditListSelectedRowKeys'),\n  // };\n  const rowSelection = undefined;\n  const hasSelected = selectedRowKeys.length > 0;\n\n  return (\n    <div>\n      <div className=\"tableHeader\">\n        <Tag color=\"#108ee9\">Step 1: Select a subreddit</Tag>\n        {hasSelected\n          ? <p>{`Selected url: ${url} `}</p>\n          : <p>Selected url: (No selection)</p>}\n      </div>\n      <Table\n        onRow={(record, index) => {\n            return {\n              onClick: () => {\n                  onRowClick(record, index)\n              }\n            }\n        }}\n        rowSelection={rowSelection}\n        columns={SubredditListColumns}\n        dataSource={data}\n        expandable={{\n            expandedRowRender: record => (\n              <div>\n                <p style={{ margin: 10 }}>Api url:</p>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.reddit.com${record.url}hot.json`} style={{ margin: 5 }}>https://www.reddit.com{record.url}hot.json</a>\n              </div>\n            ),\n            rowExpandable: record => record.name !== 'Not Expandable',\n        }}\n        pagination={{\n            defaultCurrent: 1,\n            defaultPageSize: 27,\n        }}\n        scroll={{ y: 350 }}\n      />\n      <p>default data from: {DEFAULT_SUBREDDIT_API}</p>\n    </div>\n  );\n}\n\nexport default SubredditList"]},"metadata":{},"sourceType":"module"}