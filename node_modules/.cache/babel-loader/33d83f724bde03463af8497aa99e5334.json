{"ast":null,"code":"const Maximum_Subarray = {\n  id: '0049',\n  name: 'Maximum_Subarray ',\n  refLink: ['https://www.jiuzhang.com/solution/maximum-subarray/#tag-highlight-lang-javascript', 'https://www.lintcode.com/problem/maximum-subarray/description'],\n  level: 'Hard',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given an array of integers, find a contiguous subarray which has the largest sum.\n\n        // 在线评测地址: https://www.lintcode.com/problem/maximum-subarray/\n        \n        const maxSubArray = function (nums) {\n            if (nums === null || nums.length === 0) {\n                return 0;\n            }\n            var maxSum = nums[0], minSum = 0, sum = 0;\n            var i;\n            for (i = 0; i < nums.length; i++) {\n                sum += nums[i];\n                if (sum - minSum > maxSum) {\n                    maxSum = sum - minSum;\n                }\n                if (sum < minSum) {\n                    minSum = sum;\n                }\n            }\n            return maxSum;\n        }\n    `\n};\nexport default Maximum_Subarray;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Linked_List_Array/Maximum_Subarray.js"],"names":["Maximum_Subarray","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,gBAAgB,GAAI;AACtBC,EAAAA,EAAE,EAAE,MADkB;AAEtBC,EAAAA,IAAI,EAAE,mBAFgB;AAGtBC,EAAAA,OAAO,EAAE,CACL,mFADK,EAEL,+DAFK,CAHa;AAQtBC,EAAAA,KAAK,EAAE,MARe;AAStBC,EAAAA,GAAG,EAAE,EATiB;AAUtBC,EAAAA,KAAK,EAAG,EAVc;AAWtBC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;AAXS,CAA1B;AAoCA,eAAeP,gBAAf","sourcesContent":["const Maximum_Subarray  = {\n    id: '0049',\n    name: 'Maximum_Subarray ', \n    refLink: [\n        'https://www.jiuzhang.com/solution/maximum-subarray/#tag-highlight-lang-javascript',\n        'https://www.lintcode.com/problem/maximum-subarray/description',\n\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given an array of integers, find a contiguous subarray which has the largest sum.\n\n        // 在线评测地址: https://www.lintcode.com/problem/maximum-subarray/\n        \n        const maxSubArray = function (nums) {\n            if (nums === null || nums.length === 0) {\n                return 0;\n            }\n            var maxSum = nums[0], minSum = 0, sum = 0;\n            var i;\n            for (i = 0; i < nums.length; i++) {\n                sum += nums[i];\n                if (sum - minSum > maxSum) {\n                    maxSum = sum - minSum;\n                }\n                if (sum < minSum) {\n                    minSum = sum;\n                }\n            }\n            return maxSum;\n        }\n    `\n}\n\nexport default Maximum_Subarray \n"]},"metadata":{},"sourceType":"module"}