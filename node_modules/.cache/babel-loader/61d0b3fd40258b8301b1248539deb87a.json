{"ast":null,"code":"const Binary_Tree_Inorder_Traversal = {\n  id: '0015',\n  name: 'Binary_Tree_Inorder_Traversal',\n  refLink: ['https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/jszhong-xu-bian-li-by-gaoyibo/', 'https://www.lintcode.com/problem/binary-tree-inorder-traversal/description', 'https://www.jiuzhang.com/solution/binary-tree-inorder-traversal/'],\n  level: 'Easy',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given a binary tree, return the inorder traversal of its nodes' values.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-inorder-traversal/\n\n\n        /**\n         * @param root: A Tree\n         * @return: Inorder in ArrayList which contains node values.\n         */\n        const inorderTraversal = function (root) {\n            // write your code here\n            let result = []\n            \n            if (root === null) {\n                return []\n            }\n            \n            let left = inorderTraversal(root.left)\n            let right = inorderTraversal(root.right)\n            \n            result.push.apply(result, left)\n            result.push(root.val)\n            result.push.apply(result, right)\n            \n            // traverse(root, result)\n            return result\n        }\n\n        // function traverse (root, result) {\n        //     if (root === null) {\n        //         return []\n        //     }\n            \n        //     traverse(root.left, result)\n        //     result.push(root.val)\n        //     traverse(root.right, result)\n        // }\n\n        // const inorderTraversal = function(root) {\n        //     let arr = []\n        //     let stackArr = []\n        //     while(root!=null || stackArr.length!=0){\n\n        //         while(root!=null){\n        //             stackArr.push(root)\n        //             root = root.left\n        //         }\n        //         root = stackArr.pop()\n        //         arr.push(root.val)\n        //         root = root.right\n        //     }\n        //     return arr\n        // };\n    `\n};\nexport default Binary_Tree_Inorder_Traversal;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Binary_Tree_Inorder_Traversal.js"],"names":["Binary_Tree_Inorder_Traversal","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,6BAA6B,GAAG;AAClCC,EAAAA,EAAE,EAAE,MAD8B;AAElCC,EAAAA,IAAI,EAAE,+BAF4B;AAGlCC,EAAAA,OAAO,EAAE,CACL,wGADK,EAEL,4EAFK,EAGL,kEAHK,CAHyB;AAQlCC,EAAAA,KAAK,EAAE,MAR2B;AASlCC,EAAAA,GAAG,EAAE,EAT6B;AAUlCC,EAAAA,KAAK,EAAG,EAV0B;AAWlCC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXqB,CAAtC;AAoEA,eAAeP,6BAAf","sourcesContent":["const Binary_Tree_Inorder_Traversal = {\n    id: '0015',\n    name: 'Binary_Tree_Inorder_Traversal',\n    refLink: [\n        'https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/jszhong-xu-bian-li-by-gaoyibo/',\n        'https://www.lintcode.com/problem/binary-tree-inorder-traversal/description',\n        'https://www.jiuzhang.com/solution/binary-tree-inorder-traversal/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, return the inorder traversal of its nodes' values.\n\n        // 在线评测地址: https://www.lintcode.com/problem/binary-tree-inorder-traversal/\n\n\n        /**\n         * @param root: A Tree\n         * @return: Inorder in ArrayList which contains node values.\n         */\n        const inorderTraversal = function (root) {\n            // write your code here\n            let result = []\n            \n            if (root === null) {\n                return []\n            }\n            \n            let left = inorderTraversal(root.left)\n            let right = inorderTraversal(root.right)\n            \n            result.push.apply(result, left)\n            result.push(root.val)\n            result.push.apply(result, right)\n            \n            // traverse(root, result)\n            return result\n        }\n\n        // function traverse (root, result) {\n        //     if (root === null) {\n        //         return []\n        //     }\n            \n        //     traverse(root.left, result)\n        //     result.push(root.val)\n        //     traverse(root.right, result)\n        // }\n\n        // const inorderTraversal = function(root) {\n        //     let arr = []\n        //     let stackArr = []\n        //     while(root!=null || stackArr.length!=0){\n\n        //         while(root!=null){\n        //             stackArr.push(root)\n        //             root = root.left\n        //         }\n        //         root = stackArr.pop()\n        //         arr.push(root.val)\n        //         root = root.right\n        //     }\n        //     return arr\n        // };\n    `\n}\n\nexport default Binary_Tree_Inorder_Traversal"]},"metadata":{},"sourceType":"module"}