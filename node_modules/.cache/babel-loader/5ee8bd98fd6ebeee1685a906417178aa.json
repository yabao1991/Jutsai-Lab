{"ast":null,"code":"var Median_of_Two_Sorted_Arrays={id:'0048',name:'Median_of_Two_Sorted_Arrays',refLink:['https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/gui-bing-pai-xu-javascript-by-a-mo-xi-lin-5/','https://www.lintcode.com/problem/median-of-two-sorted-arrays/description','https://www.jiuzhang.com/solution/median-of-two-sorted-arrays/'],level:'Hard',tag:[],notes:\"\",jsSolution:\"\\n        // There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/median-of-two-sorted-arrays/\\n        \\n        1.\\u4EE3\\u7801\\u6700\\u5C11\\u7684\\u65B9\\u6CD5\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u4E3AO((m + n)log(m + n))\\u3002(\\u56E0\\u4E3Asort\\u5728\\u6570\\u636E\\u91CF\\u5C11\\u7684\\u65F6\\u5019\\u91C7\\u7528\\u7684\\u662F\\u5192\\u6CE1\\u6392\\u5E8F\\uFF0C\\u6570\\u636E\\u91CF\\u5927\\u7684\\u65F6\\u5019\\u91C7\\u7528\\u7684\\u662F\\u63D2\\u6392)\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            const arr = [...nums1, ...nums2].sort((a, b) => a - b);\\n            const { length } = arr;\\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\\n        };\\n        2.\\u53CC\\u6307\\u9488\\u6392\\u5E8F\\u6CD5\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u4E3AO(m + n)\\u3002\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            let reIndex = nums2.length - 1;\\n            for (let i = nums1.length - 1; i >= 0; i--) {\\n                while (nums1[i] <= nums2[reIndex] && reIndex > -1) {\\n                    nums1.splice(i + 1, 0, ...(nums2.splice(reIndex, 1)));\\n                    reIndex--;\\n                }\\n            }\\n            const arr = nums2.concat(nums1);\\n            const { length } = arr;\\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\\n        };\\n        3.\\u4E8C\\u5206\\u67E5\\u627E\\u6CD5\\uFF08\\u5B98\\u65B9\\u63A8\\u8350\\uFF09\\uFF0C\\u65F6\\u95F4\\u590D\\u6742\\u5EA6O(log(min(m, n)))\\u3002\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            if (nums1.length > nums2.length) [nums1, nums2] = [nums2, nums1];\\n            \\n            const length1 = nums1.length;\\n            const length2 = nums2.length;\\n            let min = 0;\\n            let max = length1;\\n            let half = Math.floor((length1 + length2 + 1) / 2);\\n            while (max >= min) {\\n                const i = Math.floor((max + min) / 2);\\n                const j = half - i;\\n                if (i > min && nums1[i - 1] > nums2[j]) {\\n                    max = i - 1;\\n                } else if (i < max && nums1[i] < nums2[j - 1]) {\\n                    min = i + 1;\\n                } else {\\n                    let left,right;\\n                    if (i === 0) left = nums2[j - 1];\\n                    else if (j === 0) left = nums1[i - 1];\\n                    else left = Math.max(nums1[i - 1], nums2[j - 1]);\\n                    \\n                    if (i === length1) right = nums2[j];\\n                    else if (j === length2) right = nums1[i];\\n                    else right = Math.min(nums1[i], nums2[j]);\\n                    \\n                    return (length1 + length2) % 2 ? left : (left + right) / 2;\\n                }\\n            }\\n            return 0;\\n        };\\n    \"};export default Median_of_Two_Sorted_Arrays;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Linked_List_Array/Median_of_Two_Sorted_Arrays.js"],"names":["Median_of_Two_Sorted_Arrays","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,2BAA2B,CAAG,CAChCC,EAAE,CAAE,MAD4B,CAEhCC,IAAI,CAAE,6BAF0B,CAGhCC,OAAO,CAAE,CACL,oHADK,CAEL,0EAFK,CAGL,gEAHK,CAHuB,CAShCC,KAAK,CAAE,MATyB,CAUhCC,GAAG,CAAE,EAV2B,CAWhCC,KAAK,GAX2B,CAYhCC,UAAU,mzGAZsB,CAApC,CAqFA,cAAeP,CAAAA,2BAAf","sourcesContent":["const Median_of_Two_Sorted_Arrays = {\n    id: '0048',\n    name: 'Median_of_Two_Sorted_Arrays', \n    refLink: [\n        'https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/gui-bing-pai-xu-javascript-by-a-mo-xi-lin-5/',\n        'https://www.lintcode.com/problem/median-of-two-sorted-arrays/description',\n        'https://www.jiuzhang.com/solution/median-of-two-sorted-arrays/'\n\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.\n\n        // 在线评测地址: https://www.lintcode.com/problem/median-of-two-sorted-arrays/\n        \n        1.代码最少的方法，时间复杂度为O((m + n)log(m + n))。(因为sort在数据量少的时候采用的是冒泡排序，数据量大的时候采用的是插排)\n        /**\n         * @param {number[]} nums1\n         * @param {number[]} nums2\n         * @return {number}\n         */\n        var findMedianSortedArrays = function(nums1, nums2) {\n            const arr = [...nums1, ...nums2].sort((a, b) => a - b);\n            const { length } = arr;\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\n        };\n        2.双指针排序法，时间复杂度为O(m + n)。\n        /**\n         * @param {number[]} nums1\n         * @param {number[]} nums2\n         * @return {number}\n         */\n        var findMedianSortedArrays = function(nums1, nums2) {\n            let reIndex = nums2.length - 1;\n            for (let i = nums1.length - 1; i >= 0; i--) {\n                while (nums1[i] <= nums2[reIndex] && reIndex > -1) {\n                    nums1.splice(i + 1, 0, ...(nums2.splice(reIndex, 1)));\n                    reIndex--;\n                }\n            }\n            const arr = nums2.concat(nums1);\n            const { length } = arr;\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\n        };\n        3.二分查找法（官方推荐），时间复杂度O(log(min(m, n)))。\n        /**\n         * @param {number[]} nums1\n         * @param {number[]} nums2\n         * @return {number}\n         */\n        var findMedianSortedArrays = function(nums1, nums2) {\n            if (nums1.length > nums2.length) [nums1, nums2] = [nums2, nums1];\n            \n            const length1 = nums1.length;\n            const length2 = nums2.length;\n            let min = 0;\n            let max = length1;\n            let half = Math.floor((length1 + length2 + 1) / 2);\n            while (max >= min) {\n                const i = Math.floor((max + min) / 2);\n                const j = half - i;\n                if (i > min && nums1[i - 1] > nums2[j]) {\n                    max = i - 1;\n                } else if (i < max && nums1[i] < nums2[j - 1]) {\n                    min = i + 1;\n                } else {\n                    let left,right;\n                    if (i === 0) left = nums2[j - 1];\n                    else if (j === 0) left = nums1[i - 1];\n                    else left = Math.max(nums1[i - 1], nums2[j - 1]);\n                    \n                    if (i === length1) right = nums2[j];\n                    else if (j === length2) right = nums1[i];\n                    else right = Math.min(nums1[i], nums2[j]);\n                    \n                    return (length1 + length2) % 2 ? left : (left + right) / 2;\n                }\n            }\n            return 0;\n        };\n    `\n}\n\nexport default Median_of_Two_Sorted_Arrays\n"]},"metadata":{},"sourceType":"module"}