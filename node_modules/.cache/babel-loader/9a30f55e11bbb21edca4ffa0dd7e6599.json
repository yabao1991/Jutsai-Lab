{"ast":null,"code":"var Flatten_Binary_Tree_to_Linked_List={id:'0025',name:'Flatten_Binary_Tree_to_Linked_List',refLink:['https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/die-dai-javascript-by-a-si-shua-ma-tong/','https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/description','https://www.jiuzhang.com/solution/flatten-binary-tree-to-linked-list/'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Flatten a binary tree to a fake \\\"linked list\\\" in pre-order traversal.\\n\\n        // Here we use the right pointer in TreeNode as the next pointer in ListNode.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\\n\\n        /**\\n         * @param root: a TreeNode, the root of the binary tree\\n         * @return: \\n         */\\n\\n        const flatten = function(root) {\\n            if(!root) return null\\n            const stack = []\\n            while(root.left || root.right || stack.length>0){\\n                if(root.right) stack.push(root.right)\\n                if(root.left){\\n                    root.right = root.left\\n                    root.left = null\\n                    \\n                }else{\\n                    root.right = stack.pop()\\n                }\\n                root = root.right\\n            }\\n        };\\n    \"};export default Flatten_Binary_Tree_to_Linked_List;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Flatten_Binary_Tree_to_Linked_List.js"],"names":["Flatten_Binary_Tree_to_Linked_List","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,kCAAkC,CAAG,CACvCC,EAAE,CAAE,MADmC,CAEvCC,IAAI,CAAE,oCAFiC,CAGvCC,OAAO,CAAE,CACL,uHADK,CAEL,iFAFK,CAGL,uEAHK,CAH8B,CAQvCC,KAAK,CAAE,MARgC,CASvCC,GAAG,CAAE,EATkC,CAUvCC,KAAK,GAVkC,CAWvCC,UAAU,46BAX6B,CAA3C,CAyCA,cAAeP,CAAAA,kCAAf","sourcesContent":["const Flatten_Binary_Tree_to_Linked_List = {\n    id: '0025',\n    name: 'Flatten_Binary_Tree_to_Linked_List',\n    refLink: [\n        'https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/die-dai-javascript-by-a-si-shua-ma-tong/',\n        'https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/description',\n        'https://www.jiuzhang.com/solution/flatten-binary-tree-to-linked-list/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Flatten a binary tree to a fake \"linked list\" in pre-order traversal.\n\n        // Here we use the right pointer in TreeNode as the next pointer in ListNode.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\n\n        /**\n         * @param root: a TreeNode, the root of the binary tree\n         * @return: \n         */\n\n        const flatten = function(root) {\n            if(!root) return null\n            const stack = []\n            while(root.left || root.right || stack.length>0){\n                if(root.right) stack.push(root.right)\n                if(root.left){\n                    root.right = root.left\n                    root.left = null\n                    \n                }else{\n                    root.right = stack.pop()\n                }\n                root = root.right\n            }\n        };\n    `\n}\n\nexport default Flatten_Binary_Tree_to_Linked_List\n"]},"metadata":{},"sourceType":"module"}