{"ast":null,"code":"var Minimum_Subtree={id:'0019',name:'Minimum_Subtree',refLink:['https://www.lintcode.com/problem/minimum-subtree/description','https://www.jiuzhang.com/solution/minimum-subtree/#tag-highlight'],level:'Easy',tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/minimum-subtree/\\n\\n        // version 1 : traverse + divide conquer\\n        public class Solution {\\n            private TreeNode subtree = null;\\n            private int subtreeSum = Integer.MAX_VALUE;\\n            /**\\n             * @param root the root of binary tree\\n             * @return the root of the minimum subtree\\n             */\\n            public TreeNode findSubtree(TreeNode root) {\\n                helper(root);\\n                return subtree;\\n            }\\n            \\n            private int helper(TreeNode root) {\\n                if (root == null) {\\n                    return 0;\\n                }\\n                \\n                int sum = helper(root.left) + helper(root.right) + root.val;\\n                if (sum <= subtreeSum) {\\n                    subtreeSum = sum;\\n                    subtree = root;\\n                }\\n                return sum;\\n            }\\n        }\\n    \"};export default Minimum_Subtree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Minimum_Subtree.js"],"names":["Minimum_Subtree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,eAAe,CAAG,CACpBC,EAAE,CAAE,MADgB,CAEpBC,IAAI,CAAE,iBAFc,CAGpBC,OAAO,CAAE,CACL,8DADK,CAEL,kEAFK,CAHW,CAOpBC,KAAK,CAAE,MAPa,CAQpBC,GAAG,CAAE,EARe,CASpBC,KAAK,YATe,CAUpBC,UAAU,4lCAVU,CAAxB,CA4CA,cAAeP,CAAAA,eAAf","sourcesContent":["const Minimum_Subtree = {\n    id: '0019',\n    name: 'Minimum_Subtree',\n    refLink: [\n        'https://www.lintcode.com/problem/minimum-subtree/description',\n        'https://www.jiuzhang.com/solution/minimum-subtree/#tag-highlight'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: `JAVA only`,\n    jsSolution: `\n        // Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.\n\n        // 在线评测地址: https://www.lintcode.com/problem/minimum-subtree/\n\n        // version 1 : traverse + divide conquer\n        public class Solution {\n            private TreeNode subtree = null;\n            private int subtreeSum = Integer.MAX_VALUE;\n            /**\n             * @param root the root of binary tree\n             * @return the root of the minimum subtree\n             */\n            public TreeNode findSubtree(TreeNode root) {\n                helper(root);\n                return subtree;\n            }\n            \n            private int helper(TreeNode root) {\n                if (root == null) {\n                    return 0;\n                }\n                \n                int sum = helper(root.left) + helper(root.right) + root.val;\n                if (sum <= subtreeSum) {\n                    subtreeSum = sum;\n                    subtree = root;\n                }\n                return sum;\n            }\n        }\n    `\n}\n\nexport default Minimum_Subtree\n"]},"metadata":{},"sourceType":"module"}