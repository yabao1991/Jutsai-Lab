{"ast":null,"code":"var Serialize_and_Deserialize_Binary_Tree={id:'0027',name:'Serialize_and_Deserialize_Binary_Tree',refLink:['https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/javascriptceng-xu-bian-li-si-lu-he-shi-xian-by-xin/'],level:'Medium',tag:[''],notes:\"\",jsSolution:\"\\n        // \\u5E8F\\u5217\\u5316\\u662F\\u5C06\\u4E00\\u4E2A\\u6570\\u636E\\u7ED3\\u6784\\u6216\\u8005\\u5BF9\\u8C61\\u8F6C\\u6362\\u4E3A\\u8FDE\\u7EED\\u7684\\u6BD4\\u7279\\u4F4D\\u7684\\u64CD\\u4F5C\\uFF0C\\u8FDB\\u800C\\u53EF\\u4EE5\\u5C06\\u8F6C\\u6362\\u540E\\u7684\\u6570\\u636E\\u5B58\\u50A8\\u5728\\u4E00\\u4E2A\\u6587\\u4EF6\\u6216\\u8005\\u5185\\u5B58\\u4E2D\\uFF0C\\u540C\\u65F6\\u4E5F\\u53EF\\u4EE5\\u901A\\u8FC7\\u7F51\\u7EDC\\u4F20\\u8F93\\u5230\\u53E6\\u4E00\\u4E2A\\u8BA1\\u7B97\\u673A\\u73AF\\u5883\\uFF0C\\u91C7\\u53D6\\u76F8\\u53CD\\u65B9\\u5F0F\\u91CD\\u6784\\u5F97\\u5230\\u539F\\u6570\\u636E\\u3002\\n\\n        // \\u8BF7\\u8BBE\\u8BA1\\u4E00\\u4E2A\\u7B97\\u6CD5\\u6765\\u5B9E\\u73B0\\u4E8C\\u53C9\\u6811\\u7684\\u5E8F\\u5217\\u5316\\u4E0E\\u53CD\\u5E8F\\u5217\\u5316\\u3002\\u8FD9\\u91CC\\u4E0D\\u9650\\u5B9A\\u4F60\\u7684\\u5E8F\\u5217 / \\u53CD\\u5E8F\\u5217\\u5316\\u7B97\\u6CD5\\u6267\\u884C\\u903B\\u8F91\\uFF0C\\u4F60\\u53EA\\u9700\\u8981\\u4FDD\\u8BC1\\u4E00\\u4E2A\\u4E8C\\u53C9\\u6811\\u53EF\\u4EE5\\u88AB\\u5E8F\\u5217\\u5316\\u4E3A\\u4E00\\u4E2A\\u5B57\\u7B26\\u4E32\\u5E76\\u4E14\\u5C06\\u8FD9\\u4E2A\\u5B57\\u7B26\\u4E32\\u53CD\\u5E8F\\u5217\\u5316\\u4E3A\\u539F\\u59CB\\u7684\\u6811\\u7ED3\\u6784\\u3002\\n        \\n        // \\u793A\\u4F8B: \\n        \\n        // \\u4F60\\u53EF\\u4EE5\\u5C06\\u4EE5\\u4E0B\\u4E8C\\u53C9\\u6811\\uFF1A\\n        \\n        // \\u5E8F\\u5217\\u5316\\u4E3A \\\"[1,2,3,null,null,4,5]\\\"\\n        // \\u63D0\\u793A: \\u8FD9\\u4E0E LeetCode \\u76EE\\u524D\\u4F7F\\u7528\\u7684\\u65B9\\u5F0F\\u4E00\\u81F4\\uFF0C\\u8BE6\\u60C5\\u8BF7\\u53C2\\u9605 LeetCode \\u5E8F\\u5217\\u5316\\u4E8C\\u53C9\\u6811\\u7684\\u683C\\u5F0F\\u3002\\u4F60\\u5E76\\u975E\\u5FC5\\u987B\\u91C7\\u53D6\\u8FD9\\u79CD\\u65B9\\u5F0F\\uFF0C\\u4F60\\u4E5F\\u53EF\\u4EE5\\u91C7\\u7528\\u5176\\u4ED6\\u7684\\u65B9\\u6CD5\\u89E3\\u51B3\\u8FD9\\u4E2A\\u95EE\\u9898\\u3002\\n        \\n        // \\u8BF4\\u660E: \\u4E0D\\u8981\\u4F7F\\u7528\\u7C7B\\u7684\\u6210\\u5458 / \\u5168\\u5C40 / \\u9759\\u6001\\u53D8\\u91CF\\u6765\\u5B58\\u50A8\\u72B6\\u6001\\uFF0C\\u4F60\\u7684\\u5E8F\\u5217\\u5316\\u548C\\u53CD\\u5E8F\\u5217\\u5316\\u7B97\\u6CD5\\u5E94\\u8BE5\\u662F\\u65E0\\u72B6\\u6001\\u7684\\u3002\\n\\n\\n        \\u5E8F\\u5217\\u5316\\u4E8C\\u53C9\\u6811\\u601D\\u8DEF\\n        \\u4F7F\\u7528\\u5E7F\\u5EA6\\u4F18\\u5148\\uFF08BFS\\uFF09\\u904D\\u5386\\u6240\\u6709\\u8282\\u70B9\\uFF08\\u5305\\u62EC\\u7A7A\\u8282\\u70B9\\uFF09\\uFF0C\\u6574\\u4F53\\u6D41\\u7A0B\\u5982\\u4E0B\\uFF1A\\n\\n        \\u521D\\u59CB\\u5316\\u5B57\\u7B26\\u4E32 res\\n        \\u521D\\u59CB\\u5316\\u961F\\u5217 queue\\uFF0C\\u5C06 root \\u653E\\u5165\\u961F\\u5217\\n        \\u68C0\\u67E5\\u961F\\u5217\\u662F\\u5426\\u4E3A\\u7A7A\\uFF1A\\n        \\u961F\\u5217\\u4E0D\\u4E3A\\u7A7A\\uFF1A\\u53D6\\u51FA\\u961F\\u9996\\u8282\\u70B9\\uFF0C\\u5982\\u679C\\u8282\\u70B9\\u4E3A null\\uFF0C\\u90A3\\u4E48 res \\u66F4\\u65B0\\u4E3A res + '#,'\\uFF1B\\u5982\\u679C\\u8282\\u70B9\\u4E0D\\u662F null\\uFF0C\\u90A3\\u4E48 res \\u66F4\\u65B0\\u4E3A res + val\\uFF0C\\u5E76\\u4E14\\u5C06\\u8282\\u70B9\\u7684\\u5DE6\\u53F3\\u8282\\u70B9\\u4F9D\\u6B21\\u52A0\\u5165 queue\\u3002\\u7EE7\\u7EED\\u5FAA\\u73AF\\u3002\\n        \\u961F\\u5217\\u4E3A\\u7A7A\\uFF1A\\u7ED3\\u675F\\u5FAA\\u73AF\\n        \\u8FD4\\u56DE\\\"[\\\" + res + \\\"]\\\"\\n        \\n        \\u4EE5\\u4E0A\\u9762\\u8FD9\\u68F5\\u4E8C\\u53C9\\u6811\\u4E3A\\u4F8B\\uFF0C\\u5B83\\u7684\\u5E8F\\u5217\\u5316\\u7ED3\\u679C\\u662F\\\"[1,2,3,#,#,4,5,#,#,#,#]\\\"\\n\\n        \\u5E8F\\u5217\\u5316\\u7684\\u4EE3\\u7801\\u5B9E\\u73B0\\u5982\\u4E0B\\uFF1A\\n\\n        // ac\\u5730\\u5740\\uFF1Ahttps://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\\n        // \\u539F\\u6587\\u5730\\u5740\\uFF1Ahttps://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\\n\\n        /**\\n         * Encodes a tree to a single string.\\n         *\\n         * @param {TreeNode} root\\n         * @return {string}\\n         */\\n        var serialize = function(root) {\\n            if (!root) {\\n                return \\\"[]\\\";\\n            }\\n\\n            let res = \\\"\\\";\\n            let node = root;\\n            const queue = [node];\\n            while (queue.length) {\\n                const front = queue.shift();\\n                if (front) {\\n                    res += `${front.val},`;\\n                    queue.push(front.left);\\n                    queue.push(front.right);\\n                } else {\\n                    res += \\\"#,\\\";\\n                }\\n            }\\n\\n            res = res.substring(0, res.length - 1); // \\u53BB\\u6389\\u6700\\u540E\\u4E00\\u4E2A\\u9017\\u53F7\\n\\n            return `[${res}]`;\\n        };\\n        \\u53CD\\u5E8F\\u5217\\u5316\\u4E8C\\u53C9\\u6811\\u601D\\u8DEF\\n        \\u4EE5\\u524D\\u9762\\u7684\\u4E8C\\u53C9\\u6811\\u4E3A\\u4F8B\\uFF0C\\u53CD\\u5E8F\\u5217\\u8BDD\\u5C31\\u662F\\u5C06\\u5B57\\u7B26\\u4E32\\\"[1,2,3,#,#,4,5,#,#,#,#]\\\"\\u91CD\\u65B0\\u8FD8\\u539F\\u6210\\u539F\\u6765\\u7684\\u4E8C\\u53C9\\u6811\\u3002\\n\\n        \\u53CD\\u5E8F\\u5217\\u5316\\u6D41\\u7A0B\\u5982\\u4E0B\\uFF1A\\n\\n        \\u53BB\\u6389\\u5B57\\u7B26\\u4E32 res \\u524D\\u540E\\u7684[\\u548C]\\uFF0C\\u5E76\\u5C06\\u5176\\u6309\\u7167,\\u9017\\u53F7\\u5207\\u5206\\u5F97\\u5230\\u6570\\u7EC4 nodes\\n        \\u521D\\u59CB\\u5316\\u961F\\u5217 queue\\uFF0C\\u653E\\u5165 nodes \\u7684\\u7B2C\\u4E00\\u4E2A\\u503C\\u5BF9\\u5E94\\u7684\\u8282\\u70B9\\uFF0Cnodes \\u5F39\\u51FA\\u7B2C\\u4E00\\u4E2A\\u503C\\n        \\u68C0\\u67E5\\u961F\\u5217\\u662F\\u5426\\u4E3A\\u7A7A\\uFF1A\\n        \\u961F\\u5217\\u4E0D\\u4E3A\\u7A7A\\u3002\\u4ECE queue \\u53D6\\u51FA\\u961F\\u9996\\u5143\\u7D20\\u3002\\u4ECE nodes \\u4E2D\\u53D6\\u51FA\\u7B2C\\u4E00\\u4E2A\\u503C\\u548C\\u7B2C\\u4E8C\\u503C\\uFF0C\\u4F9D\\u6B21\\u5904\\u7406\\u3002\\u7EE7\\u7EED\\u5FAA\\u73AF\\u3002\\n        \\u961F\\u5217\\u4E3A\\u7A7A\\u3002\\u7ED3\\u675F\\u5FAA\\u73AF\\u3002\\n        \\u8FD4\\u56DE\\u6839\\u8282\\u70B9\\u3002\\n        \\u53CD\\u5E8F\\u5217\\u5316\\u51FD\\u6570\\u7684\\u8BBE\\u8BA1\\u5173\\u952E\\u662F\\uFF1A\\u6570\\u7EC4 nodes \\u53D6\\u51FA\\u5143\\u7D20\\u7684\\u987A\\u5E8F\\u548C\\u539F\\u4E8C\\u53C9\\u6811\\u5C42\\u5E8F\\u904D\\u5386\\u7684\\u987A\\u5E8F\\u662F\\u5BF9\\u5E94\\u7684\\u3002\\n\\n        \\u53CD\\u5E8F\\u5217\\u7684\\u51FD\\u6570\\u5B9E\\u73B0\\u5982\\u4E0B\\uFF1A\\n\\n        // ac\\u5730\\u5740\\uFF1Ahttps://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\\n        // \\u539F\\u6587\\u5730\\u5740\\uFF1Ahttps://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\\n\\n        /**\\n         * Decodes your encoded data to tree.\\n         *\\n         * @param {string} data\\n         * @return {TreeNode}\\n         */\\n        var deserialize = function(data) {\\n            if (data.length <= 2) {\\n                return null;\\n            }\\n\\n            const nodes = data.substring(1, data.length - 1).split(\\\",\\\");\\n            const root = new TreeNode(parseInt(nodes[0]));\\n            nodes.shift();\\n\\n            const queue = [root];\\n            while (queue.length) {\\n                const node = queue.shift();\\n                // \\u7B2C\\u4E00\\u4E2A\\u662F\\u5DE6\\u8282\\u70B9\\uFF0C\\u8282\\u70B9\\u4E3A\\u7A7A\\uFF0C\\u76F4\\u63A5\\u8DF3\\u8FC7\\n                const leftVal = nodes.shift();\\n                if (leftVal !== \\\"#\\\") {\\n                    node.left = new TreeNode(leftVal);\\n                    queue.push(node.left);\\n                }\\n                // \\u7B2C\\u4E8C\\u4E2A\\u662F\\u53F3\\u8282\\u70B9\\uFF0C\\u8282\\u70B9\\u4E3A\\u7A7A\\uFF0C\\u76F4\\u63A5\\u8DF3\\u8FC7\\n                const rightVal = nodes.shift();\\n                if (rightVal !== \\\"#\\\") {\\n                    node.right = new TreeNode(rightVal);\\n                    queue.push(node.right);\\n                }\\n            }\\n\\n            return root;\\n        };\\n    \"};export default Serialize_and_Deserialize_Binary_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Breadth_First_Search/Serialize_and_Deserialize_Binary_Tree.js"],"names":["Serialize_and_Deserialize_Binary_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,qCAAqC,CAAG,CAC1CC,EAAE,CAAE,MADsC,CAE1CC,IAAI,CAAE,uCAFoC,CAG1CC,OAAO,CAAE,CACL,qIADK,CAHiC,CAM1CC,KAAK,CAAE,QANmC,CAO1CC,GAAG,CAAE,CACD,EADC,CAPqC,CAU1CC,KAAK,GAVqC,CAW1CC,UAAU,4+NAXgC,CAA9C,CA+HA,cAAeP,CAAAA,qCAAf","sourcesContent":["const Serialize_and_Deserialize_Binary_Tree = {\n    id: '0027',\n    name: 'Serialize_and_Deserialize_Binary_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/javascriptceng-xu-bian-li-si-lu-he-shi-xian-by-xin/',\n    ],\n    level: 'Medium',\n    tag: [\n        ''\n    ],\n    notes: ``,\n    jsSolution: `\n        // 序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。\n\n        // 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n        \n        // 示例: \n        \n        // 你可以将以下二叉树：\n        \n        // 序列化为 \"[1,2,3,null,null,4,5]\"\n        // 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。\n        \n        // 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。\n\n\n        序列化二叉树思路\n        使用广度优先（BFS）遍历所有节点（包括空节点），整体流程如下：\n\n        初始化字符串 res\n        初始化队列 queue，将 root 放入队列\n        检查队列是否为空：\n        队列不为空：取出队首节点，如果节点为 null，那么 res 更新为 res + '#,'；如果节点不是 null，那么 res 更新为 res + val，并且将节点的左右节点依次加入 queue。继续循环。\n        队列为空：结束循环\n        返回\"[\" + res + \"]\"\n        \n        以上面这棵二叉树为例，它的序列化结果是\"[1,2,3,#,#,4,5,#,#,#,#]\"\n\n        序列化的代码实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Encodes a tree to a single string.\n         *\n         * @param {TreeNode} root\n         * @return {string}\n         */\n        var serialize = function(root) {\n            if (!root) {\n                return \"[]\";\n            }\n\n            let res = \"\";\n            let node = root;\n            const queue = [node];\n            while (queue.length) {\n                const front = queue.shift();\n                if (front) {\n                    res += \\`\\${front.val},\\`;\n                    queue.push(front.left);\n                    queue.push(front.right);\n                } else {\n                    res += \"#,\";\n                }\n            }\n\n            res = res.substring(0, res.length - 1); // 去掉最后一个逗号\n\n            return \\`[\\${res}]\\`;\n        };\n        反序列化二叉树思路\n        以前面的二叉树为例，反序列话就是将字符串\"[1,2,3,#,#,4,5,#,#,#,#]\"重新还原成原来的二叉树。\n\n        反序列化流程如下：\n\n        去掉字符串 res 前后的[和]，并将其按照,逗号切分得到数组 nodes\n        初始化队列 queue，放入 nodes 的第一个值对应的节点，nodes 弹出第一个值\n        检查队列是否为空：\n        队列不为空。从 queue 取出队首元素。从 nodes 中取出第一个值和第二值，依次处理。继续循环。\n        队列为空。结束循环。\n        返回根节点。\n        反序列化函数的设计关键是：数组 nodes 取出元素的顺序和原二叉树层序遍历的顺序是对应的。\n\n        反序列的函数实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\n        // 原文地址：https://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\n\n        /**\n         * Decodes your encoded data to tree.\n         *\n         * @param {string} data\n         * @return {TreeNode}\n         */\n        var deserialize = function(data) {\n            if (data.length <= 2) {\n                return null;\n            }\n\n            const nodes = data.substring(1, data.length - 1).split(\",\");\n            const root = new TreeNode(parseInt(nodes[0]));\n            nodes.shift();\n\n            const queue = [root];\n            while (queue.length) {\n                const node = queue.shift();\n                // 第一个是左节点，节点为空，直接跳过\n                const leftVal = nodes.shift();\n                if (leftVal !== \"#\") {\n                    node.left = new TreeNode(leftVal);\n                    queue.push(node.left);\n                }\n                // 第二个是右节点，节点为空，直接跳过\n                const rightVal = nodes.shift();\n                if (rightVal !== \"#\") {\n                    node.right = new TreeNode(rightVal);\n                    queue.push(node.right);\n                }\n            }\n\n            return root;\n        };\n    `\n}\n\nexport default Serialize_and_Deserialize_Binary_Tree\n"]},"metadata":{},"sourceType":"module"}