{"ast":null,"code":"const sort_colors_II = {\n  id: '0060',\n  name: 'sort_colors_II',\n  refLink: ['https://www.jiuzhang.com/solution/sort-colors-ii/#tag-highlight-lang-javascript', 'https://www.lintcode.com/problem/sort-colors-ii/description'],\n  level: 'Medium',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.\n\n        // 在线评测地址: https://www.lintcode.com/problem/sort-colors-ii/\n        \n        /**\n         * @param colors: A list of integer\n         * @param k: An integer\n         * @return: \n         */\n        const sortColors2 = function (colors, k) {\n            if (colors === null || colors.length === 0) {\n                    return;\n            }\n            rainbowSort = function(colors, left, right, colorFrom, colorTo) {\n                if (colorFrom === colorTo) {\n                    return;\n                }\n                if (left >= right) {\n                    return;\n                }\n                var colorMid = Math.floor((colorFrom + colorTo) / 2);\n                var l = left, r = right;\n                var temp;\n                while (l <= r) {\n                    while (l <= r && colors[l] <= colorMid) {\n                        l++;\n                    }\n                    while (l <= r && colors[r] > colorMid) {\n                        r--;\n                    }\n                    if (l <= r) {\n                        temp = colors[l];\n                        colors[l] = colors[r];\n                        colors[r] = temp;\n                        \n                        l++;\n                        r--;\n                    }\n                }\n                \n                rainbowSort(colors, left, r, colorFrom, colorMid);\n                rainbowSort(colors, l, right, colorMid + 1, colorTo);\n            }\n            rainbowSort(colors, 0, colors.length - 1, 1, k);\n        }\n    `\n};\nexport default sort_colors_II;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Two_Pointers/sort_colors_II.js"],"names":["sort_colors_II","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACnBC,EAAAA,EAAE,EAAE,MADe;AAEnBC,EAAAA,IAAI,EAAE,gBAFa;AAGnBC,EAAAA,OAAO,EAAE,CACL,iFADK,EAEL,6DAFK,CAHU;AAQnBC,EAAAA,KAAK,EAAE,QARY;AASnBC,EAAAA,GAAG,EAAE,EATc;AAUnBC,EAAAA,KAAK,EAAG,EAVW;AAWnBC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXM,CAAvB;AA4DA,eAAeP,cAAf","sourcesContent":["const sort_colors_II = {\n    id: '0060',\n    name: 'sort_colors_II', \n    refLink: [\n        'https://www.jiuzhang.com/solution/sort-colors-ii/#tag-highlight-lang-javascript',\n        'https://www.lintcode.com/problem/sort-colors-ii/description',\n        \n    ],\n    level: 'Medium',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.\n\n        // 在线评测地址: https://www.lintcode.com/problem/sort-colors-ii/\n        \n        /**\n         * @param colors: A list of integer\n         * @param k: An integer\n         * @return: \n         */\n        const sortColors2 = function (colors, k) {\n            if (colors === null || colors.length === 0) {\n                    return;\n            }\n            rainbowSort = function(colors, left, right, colorFrom, colorTo) {\n                if (colorFrom === colorTo) {\n                    return;\n                }\n                if (left >= right) {\n                    return;\n                }\n                var colorMid = Math.floor((colorFrom + colorTo) / 2);\n                var l = left, r = right;\n                var temp;\n                while (l <= r) {\n                    while (l <= r && colors[l] <= colorMid) {\n                        l++;\n                    }\n                    while (l <= r && colors[r] > colorMid) {\n                        r--;\n                    }\n                    if (l <= r) {\n                        temp = colors[l];\n                        colors[l] = colors[r];\n                        colors[r] = temp;\n                        \n                        l++;\n                        r--;\n                    }\n                }\n                \n                rainbowSort(colors, left, r, colorFrom, colorMid);\n                rainbowSort(colors, l, right, colorMid + 1, colorTo);\n            }\n            rainbowSort(colors, 0, colors.length - 1, 1, k);\n        }\n    `\n}\n\nexport default sort_colors_II\n"]},"metadata":{},"sourceType":"module"}