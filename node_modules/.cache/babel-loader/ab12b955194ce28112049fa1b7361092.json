{"ast":null,"code":"var _jsxFileName = \"/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/components/SubredditList/index.js\";\nimport React from 'react';\nimport { Table, Tag } from 'antd';\nimport { DEFAULT_SUBREDDIT_API } from '../../utils/Constants';\n\nconst SubredditList = props => {\n  const {\n    data,\n    url,\n    selectedRowKeys,\n    handleUpdateRowKeys,\n    handleGetColumnSearchProps\n  } = props;\n  const SubredditListColumns = [{\n    title: 'Title',\n    dataIndex: 'title',\n    ...handleGetColumnSearchProps('title')\n  }];\n\n  const onRowClick = (rowdata, rowIndex) => {\n    const {\n      handleUpdateUrl\n    } = props;\n    return {\n      onClick: handleUpdateUrl(rowdata.url, rowIndex)\n    };\n  }; // const rowSelection = {\n  //   type:'radio',\n  //   selectedRowKeys,\n  //   onChange: (keys) => handleUpdateRowKeys(keys, 'subredditListSelectedRowKeys'),\n  // };\n\n\n  const rowSelection = undefined;\n  const hasSelected = selectedRowKeys.length > 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tableHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tag, {\n    color: \"#108ee9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Step 1: Select a subreddit\"), hasSelected ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, `Selected url: ${url} `) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Selected url: (No selection)\")), /*#__PURE__*/React.createElement(Table, {\n    onRow: (record, index) => {\n      return {\n        onClick: () => {\n          onRowClick(record, index);\n        }\n      };\n    },\n    rowSelection: rowSelection,\n    columns: SubredditListColumns,\n    dataSource: data,\n    expandable: {\n      expandedRowRender: record => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, \"Api url:\"), /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        href: `https://www.reddit.com${record.url}hot.json`,\n        style: {\n          margin: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, \"https://www.reddit.com\", record.url, \"hot.json\")),\n      rowExpandable: record => record.name !== 'Not Expandable'\n    },\n    pagination: {\n      defaultCurrent: 1,\n      defaultPageSize: 27\n    },\n    scroll: {\n      y: 350\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"default data from: \", DEFAULT_SUBREDDIT_API));\n};\n\nexport default SubredditList;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/components/SubredditList/index.js"],"names":["React","Table","Tag","DEFAULT_SUBREDDIT_API","SubredditList","props","data","url","selectedRowKeys","handleUpdateRowKeys","handleGetColumnSearchProps","SubredditListColumns","title","dataIndex","onRowClick","rowdata","rowIndex","handleUpdateUrl","onClick","rowSelection","undefined","hasSelected","length","record","index","expandedRowRender","margin","rowExpandable","name","defaultCurrent","defaultPageSize","y"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Table, Tag } from 'antd';\nimport { DEFAULT_SUBREDDIT_API } from '../../utils/Constants'\n\nconst SubredditList = (props) => {\n  const { data, url, selectedRowKeys, handleUpdateRowKeys, handleGetColumnSearchProps } = props\n\n  const SubredditListColumns = [\n    {\n        title: 'Title',\n        dataIndex: 'title',\n        ...handleGetColumnSearchProps('title')\n    },\n  ]\n\n  const onRowClick = (rowdata, rowIndex) => {\n    const { handleUpdateUrl } = props\n    return {\n      onClick: handleUpdateUrl(rowdata.url, rowIndex),\n    }\n  }\n  // const rowSelection = {\n  //   type:'radio',\n  //   selectedRowKeys,\n  //   onChange: (keys) => handleUpdateRowKeys(keys, 'subredditListSelectedRowKeys'),\n  // };\n  const rowSelection = undefined;\n  const hasSelected = selectedRowKeys.length > 0;\n\n  return (\n    <div>\n      <div className=\"tableHeader\">\n        <Tag color=\"#108ee9\">Step 1: Select a subreddit</Tag>\n        {hasSelected\n          ? <p>{`Selected url: ${url} `}</p>\n          : <p>Selected url: (No selection)</p>}\n      </div>\n      <Table\n        onRow={(record, index) => {\n            return {\n              onClick: () => {\n                  onRowClick(record, index)\n              }\n            }\n        }}\n        rowSelection={rowSelection}\n        columns={SubredditListColumns}\n        dataSource={data}\n        expandable={{\n            expandedRowRender: record => (\n              <div>\n                <p style={{ margin: 10 }}>Api url:</p>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.reddit.com${record.url}hot.json`} style={{ margin: 5 }}>https://www.reddit.com{record.url}hot.json</a>\n              </div>\n            ),\n            rowExpandable: record => record.name !== 'Not Expandable',\n        }}\n        pagination={{\n            defaultCurrent: 1,\n            defaultPageSize: 27,\n        }}\n        scroll={{ y: 350 }}\n      />\n      <p>default data from: {DEFAULT_SUBREDDIT_API}</p>\n    </div>\n  );\n}\n\nexport default SubredditList"]},"metadata":{},"sourceType":"module"}