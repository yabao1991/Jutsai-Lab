{"ast":null,"code":"const Flatten_Binary_Tree_to_Linked_List = {\n  id: '0025',\n  name: 'Flatten_Binary_Tree_to_Linked_List',\n  refLink: ['https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/die-dai-javascript-by-a-si-shua-ma-tong/', 'https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/description', 'https://www.jiuzhang.com/solution/flatten-binary-tree-to-linked-list/'],\n  level: 'Easy',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Flatten a binary tree to a fake \"linked list\" in pre-order traversal.\n\n        // Here we use the right pointer in TreeNode as the next pointer in ListNode.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\n\n        /**\n         * @param root: a TreeNode, the root of the binary tree\n         * @return: \n         */\n\n        const flatten = function(root) {\n            if(!root) return null\n            const stack = []\n            while(root.left || root.right || stack.length>0){\n                if(root.right) stack.push(root.right)\n                if(root.left){\n                    root.right = root.left\n                    root.left = null\n                    \n                }else{\n                    root.right = stack.pop()\n                }\n                root = root.right\n            }\n        };\n    `\n};\nexport default Flatten_Binary_Tree_to_Linked_List;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Flatten_Binary_Tree_to_Linked_List.js"],"names":["Flatten_Binary_Tree_to_Linked_List","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,kCAAkC,GAAG;AACvCC,EAAAA,EAAE,EAAE,MADmC;AAEvCC,EAAAA,IAAI,EAAE,oCAFiC;AAGvCC,EAAAA,OAAO,EAAE,CACL,uHADK,EAEL,iFAFK,EAGL,uEAHK,CAH8B;AAQvCC,EAAAA,KAAK,EAAE,MARgC;AASvCC,EAAAA,GAAG,EAAE,EATkC;AAUvCC,EAAAA,KAAK,EAAG,EAV+B;AAWvCC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAX0B,CAA3C;AAyCA,eAAeP,kCAAf","sourcesContent":["const Flatten_Binary_Tree_to_Linked_List = {\n    id: '0025',\n    name: 'Flatten_Binary_Tree_to_Linked_List',\n    refLink: [\n        'https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/die-dai-javascript-by-a-si-shua-ma-tong/',\n        'https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/description',\n        'https://www.jiuzhang.com/solution/flatten-binary-tree-to-linked-list/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Flatten a binary tree to a fake \"linked list\" in pre-order traversal.\n\n        // Here we use the right pointer in TreeNode as the next pointer in ListNode.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\n\n        /**\n         * @param root: a TreeNode, the root of the binary tree\n         * @return: \n         */\n\n        const flatten = function(root) {\n            if(!root) return null\n            const stack = []\n            while(root.left || root.right || stack.length>0){\n                if(root.right) stack.push(root.right)\n                if(root.left){\n                    root.right = root.left\n                    root.left = null\n                    \n                }else{\n                    root.right = stack.pop()\n                }\n                root = root.right\n            }\n        };\n    `\n}\n\nexport default Flatten_Binary_Tree_to_Linked_List\n"]},"metadata":{},"sourceType":"module"}