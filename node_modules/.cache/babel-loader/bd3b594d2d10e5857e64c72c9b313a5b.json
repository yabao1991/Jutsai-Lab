{"ast":null,"code":"const Validate_Binary_Search_Tree = {\n  id: '0023',\n  name: 'Validate_Binary_Search_Tree',\n  refLink: ['https://leetcode-cn.com/problems/validate-binary-search-tree/solution/js-di-gui-san-xing-dai-ma-by-jsyt/', 'https://blog.csdn.net/qq_34629352/article/details/102938948', 'https://www.lintcode.com/problem/validate-binary-search-tree/description'],\n  level: 'Easy',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given a binary tree, determine if it is a valid binary search tree (BST).\n\n        // Assume a BST is defined as follows:\n        \n        // The left subtree of a node contains only nodes with keys less than the node's key.\n        // The right subtree of a node contains only nodes with keys greater than the node's key.\n        // Both the left and right subtrees must also be binary search trees.\n        // A single node tree is a BST\n        // 在线评测地址: https://www.lintcode.com/problem/validate-binary-search-tree/\n\n        var isValidBST = function(root, min = -Infinity, max = Infinity) {\n            if (!root) return true;\n            if (root.val <= min || root.val >= max) return false;\n            return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);\n        };\n    `\n};\nexport default Validate_Binary_Search_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Validate_Binary_Search_Tree.js"],"names":["Validate_Binary_Search_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,2BAA2B,GAAG;AAChCC,EAAAA,EAAE,EAAE,MAD4B;AAEhCC,EAAAA,IAAI,EAAE,6BAF0B;AAGhCC,EAAAA,OAAO,EAAE,CACL,0GADK,EAEL,6DAFK,EAGL,0EAHK,CAHuB;AAQhCC,EAAAA,KAAK,EAAE,MARyB;AAShCC,EAAAA,GAAG,EAAE,EAT2B;AAUhCC,EAAAA,KAAK,EAAG,EAVwB;AAWhCC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;AAXmB,CAApC;AA8BA,eAAeP,2BAAf","sourcesContent":["const Validate_Binary_Search_Tree = {\n    id: '0023',\n    name: 'Validate_Binary_Search_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/validate-binary-search-tree/solution/js-di-gui-san-xing-dai-ma-by-jsyt/',\n        'https://blog.csdn.net/qq_34629352/article/details/102938948',\n        'https://www.lintcode.com/problem/validate-binary-search-tree/description'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, determine if it is a valid binary search tree (BST).\n\n        // Assume a BST is defined as follows:\n        \n        // The left subtree of a node contains only nodes with keys less than the node's key.\n        // The right subtree of a node contains only nodes with keys greater than the node's key.\n        // Both the left and right subtrees must also be binary search trees.\n        // A single node tree is a BST\n        // 在线评测地址: https://www.lintcode.com/problem/validate-binary-search-tree/\n\n        var isValidBST = function(root, min = -Infinity, max = Infinity) {\n            if (!root) return true;\n            if (root.val <= min || root.val >= max) return false;\n            return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);\n        };\n    `\n}\n\nexport default Validate_Binary_Search_Tree\n"]},"metadata":{},"sourceType":"module"}