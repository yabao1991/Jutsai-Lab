{"ast":null,"code":"import * as moment from 'moment';\n\nclass UtilFunctions {\n  static getFormattedData(data) {\n    const formattedSalesDataArr = [];\n    let productDataObj = data[0];\n    let salesArr = productDataObj.sales.sort((a, b) => {\n      return new Date(a.weekEnding) - new Date(b.weekEnding);\n    });\n    salesArr.map((itemDataObj, index) => {\n      salesArr[index].key = index;\n      salesArr[index].month = moment(itemDataObj.weekEnding).format(\"MMM\").toUpperCase();\n      salesArr[index].retailSalesStr = UtilFunctions.formatMoney(itemDataObj.retailSales);\n      salesArr[index].wholesaleSalesStr = UtilFunctions.formatMoney(itemDataObj.wholesaleSales);\n      salesArr[index].retailerMarginStr = UtilFunctions.formatMoney(itemDataObj.retailerMargin);\n      return formattedSalesDataArr.push(salesArr[index]);\n    }); // const formattedChartDataArr = UtilFunctions.unique(formattedSalesDataArr)\n\n    const formattedChartDataArr = UtilFunctions.getLastEntryOfMonth(formattedSalesDataArr);\n    return { ...productDataObj,\n      sales: formattedSalesDataArr,\n      chartSalesDataArr: formattedChartDataArr\n    };\n  }\n\n  static formatMoney(number) {\n    number = number || 0;\n    let j;\n    let negative = number < 0 ? \"-\" : \"\";\n    let i = parseInt(number = Math.abs(+number || 0).toFixed(0), 10) + \"\";\n    j = (j = i.length) > 3 ? j % 3 : 0;\n    return `$${negative}${j ? i.substr(0, j) + ',' : ''}${i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1,')}`;\n  }\n\n  static unique(dataArr) {\n    let result = {};\n    let finalResult = [];\n\n    for (let i = 0; i < dataArr.length; i++) {\n      result[dataArr[i].month] = dataArr[i];\n    }\n\n    for (let item in result) {\n      finalResult.push(result[item]);\n    }\n\n    return finalResult;\n  }\n\n}\n\nUtilFunctions.getLastEntryOfMonth = sales => {\n  const returnArr = [];\n  let startMonth = \"Jan\";\n\n  for (let i = 0; i < sales.length - 1; i++) {\n    let obj = sales[i + 1];\n\n    if (obj.month !== startMonth) {\n      returnArr.push(sales[i]);\n      startMonth = obj.month;\n    }\n  }\n\n  returnArr.push(sales[sales.length - 1]);\n  return returnArr.sort((a, b) => {\n    return new Date(a.weekEnding) - new Date(b.weekEnding);\n  });\n};\n\nexport default UtilFunctions;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/stacklineTest/utils/UtilFunctions.js"],"names":["moment","UtilFunctions","getFormattedData","data","formattedSalesDataArr","productDataObj","salesArr","sales","sort","a","b","Date","weekEnding","map","itemDataObj","index","key","month","format","toUpperCase","retailSalesStr","formatMoney","retailSales","wholesaleSalesStr","wholesaleSales","retailerMarginStr","retailerMargin","push","formattedChartDataArr","getLastEntryOfMonth","chartSalesDataArr","number","j","negative","i","parseInt","Math","abs","toFixed","length","substr","replace","unique","dataArr","result","finalResult","item","returnArr","startMonth","obj"],"mappings":"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","sourcesContent":["import * as moment from 'moment';\n\nclass UtilFunctions {\n    static getFormattedData(data) {\n        const formattedSalesDataArr = []\n        let productDataObj = data[0]\n\n        let salesArr = productDataObj.sales.sort((a, b) => {\n            return new Date(a.weekEnding) - new Date(b.weekEnding);\n        });\n\n        salesArr.map((itemDataObj, index) => {\n            salesArr[index].key = index\n            salesArr[index].month = moment(itemDataObj.weekEnding).format(\"MMM\").toUpperCase()\n            salesArr[index].retailSalesStr = UtilFunctions.formatMoney(itemDataObj.retailSales)\n            salesArr[index].wholesaleSalesStr = UtilFunctions.formatMoney(itemDataObj.wholesaleSales)\n            salesArr[index].retailerMarginStr = UtilFunctions.formatMoney(itemDataObj.retailerMargin)\n            return formattedSalesDataArr.push(salesArr[index])\n        })\n\n        // const formattedChartDataArr = UtilFunctions.unique(formattedSalesDataArr)\n        const formattedChartDataArr = UtilFunctions.getLastEntryOfMonth(formattedSalesDataArr)\n        \n        return {\n            ...productDataObj,\n            sales: formattedSalesDataArr,\n            chartSalesDataArr: formattedChartDataArr\n        }\n    };\n    static formatMoney(number) {\n        number = number || 0;\n        let j\n        let negative = number < 0 ? \"-\" : \"\"\n        let i = parseInt(number = Math.abs(+number || 0).toFixed(0), 10) + \"\"\n        j = (j = i.length) > 3 ? j % 3 : 0\n        return `$${negative}${j ? i.substr(0, j) + ',' : ''}${i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1,')}`;\n    };\n    static unique(dataArr){\n        let result = {};\n        let finalResult=[];\n        for(let i=0;i<dataArr.length;i++){\n            result[dataArr[i].month]=dataArr[i];\n        }\n        for(let item in result){\n            finalResult.push(result[item]);\n        }\n        return finalResult;\n    };\n    static getLastEntryOfMonth = sales => {\n        const returnArr = [];\n        let startMonth = \"Jan\";\n        for (let i = 0; i < sales.length - 1; i++) {\n          let obj = sales[i + 1];\n          if (obj.month !== startMonth) {\n            returnArr.push(sales[i]);\n            startMonth = obj.month;\n          }\n        }\n        returnArr.push(sales[sales.length - 1]);\n        return returnArr.sort((a, b) => {\n          return new Date(a.weekEnding) - new Date(b.weekEnding);\n        });\n      };\n    \n}\n\nexport default UtilFunctions\n"]},"metadata":{},"sourceType":"module"}