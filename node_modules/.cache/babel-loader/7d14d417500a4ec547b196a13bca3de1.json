{"ast":null,"code":"var isValidParentheses={id:'0003',name:'isValidParentheses',refLink:['https://www.lintcode.com/problem/valid-parentheses/description','https://www.jiuzhang.com/solution/valid-parentheses/','https://leetcode-cn.com/problems/valid-parentheses/solution/javascript-you-xiao-de-gua-hao-by-rhinoc/'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Given a string containing just the characters '(', ')', '{', '}', '[' and ']', \\n        // determine if the input string is valid.\\n\\n        // The brackets must close in the correct order, \\\"()\\\" \\n        // and \\\"()[]{}\\\" are all valid but \\\"(]\\\" and \\\"([)]\\\" are not.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/valid-parentheses/\\n\\n        var isValid = function(s) {\\n            let stack = [];\\n            var obj = {\\n                \\\"]\\\": \\\"[\\\",\\n                \\\"}\\\": \\\"{\\\",\\n                \\\")\\\": \\\"(\\\",\\n            };\\n        \\n            for(var i = 0; i < s.length; i++) {\\n                if(s[i] === \\\"[\\\" || s[i] === \\\"{\\\" || s[i] === \\\"(\\\") {\\n                    stack.push(s[i]);\\n                } else {\\n                    var key = stack.pop();\\n                    if(obj[key] !== s[i]) {\\n                        return false;\\n                    }\\n                }\\n            }\\n            if(!stack.length) {\\n                return true;\\n            }\\n            return false;\\n        };\\n\\n        var isValid = function(s) {\\n            var stack = [];\\n            var map = new Map();\\n            map.set(\\\"(\\\",\\\")\\\");\\n            map.set(\\\"{\\\",\\\"}\\\");\\n            map.set(\\\"[\\\",\\\"]\\\");\\n            for(var i = 0;i < s.length;i++){\\n                if(!map.get(s[i])){\\n                    if(stack.length == 0){\\n                        return false;\\n                    }\\n                    var topEle = stack.pop();\\n                    if(map.get(topEle) != s[i]){\\n                        return false;\\n                    }\\n                }else{\\n                    stack.push(s[i]);\\n                }\\n            }\\n            return stack.length == 0;\\n        };\\n    \"};export default isValidParentheses;// var isValid = function(s) {\n//     let stack = [];\n//     var obj = {\n//         \"]\": \"[\",\n//         \"}\": \"{\",\n//         \")\": \"(\",\n//     };\n//     for(var i = 0; i < s.length; i++) {\n//         if(s[i] === \"[\" || s[i] === \"{\" || s[i] === \"(\") {\n//             stack.push(s[i]);\n//         } else {\n//             var key = stack.pop();\n//             if(obj[key] !== s[i]) {\n//                 return false;\n//             }\n//         }\n//     }\n//     if(!stack.length) {\n//         return true;\n//     }\n//     return false;\n// };","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/isValidParentheses.js"],"names":["isValidParentheses","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,kBAAkB,CAAG,CACvBC,EAAE,CAAE,MADmB,CAEvBC,IAAI,CAAE,oBAFiB,CAGvBC,OAAO,CAAE,CACL,gEADK,CAEL,sDAFK,CAGL,uGAHK,CAHc,CAQvBC,KAAK,CAAE,MARgB,CASvBC,GAAG,CAAE,EATkB,CAUvBC,KAAK,GAVkB,CAWvBC,UAAU,4wDAXa,CAA3B,CAoEA,cAAeP,CAAAA,kBAAf,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const isValidParentheses = {\n    id: '0003',\n    name: 'isValidParentheses',\n    refLink: [\n        'https://www.lintcode.com/problem/valid-parentheses/description',\n        'https://www.jiuzhang.com/solution/valid-parentheses/',\n        'https://leetcode-cn.com/problems/valid-parentheses/solution/javascript-you-xiao-de-gua-hao-by-rhinoc/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a string containing just the characters '(', ')', '{', '}', '[' and ']', \n        // determine if the input string is valid.\n\n        // The brackets must close in the correct order, \"()\" \n        // and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\n\n        // 在线评测地址: https://www.lintcode.com/problem/valid-parentheses/\n\n        var isValid = function(s) {\n            let stack = [];\n            var obj = {\n                \"]\": \"[\",\n                \"}\": \"{\",\n                \")\": \"(\",\n            };\n        \n            for(var i = 0; i < s.length; i++) {\n                if(s[i] === \"[\" || s[i] === \"{\" || s[i] === \"(\") {\n                    stack.push(s[i]);\n                } else {\n                    var key = stack.pop();\n                    if(obj[key] !== s[i]) {\n                        return false;\n                    }\n                }\n            }\n            if(!stack.length) {\n                return true;\n            }\n            return false;\n        };\n\n        var isValid = function(s) {\n            var stack = [];\n            var map = new Map();\n            map.set(\"(\",\")\");\n            map.set(\"{\",\"}\");\n            map.set(\"[\",\"]\");\n            for(var i = 0;i < s.length;i++){\n                if(!map.get(s[i])){\n                    if(stack.length == 0){\n                        return false;\n                    }\n                    var topEle = stack.pop();\n                    if(map.get(topEle) != s[i]){\n                        return false;\n                    }\n                }else{\n                    stack.push(s[i]);\n                }\n            }\n            return stack.length == 0;\n        };\n    `\n}\n\nexport default isValidParentheses\n\n\n// var isValid = function(s) {\n//     let stack = [];\n//     var obj = {\n//         \"]\": \"[\",\n//         \"}\": \"{\",\n//         \")\": \"(\",\n//     };\n\n//     for(var i = 0; i < s.length; i++) {\n//         if(s[i] === \"[\" || s[i] === \"{\" || s[i] === \"(\") {\n//             stack.push(s[i]);\n//         } else {\n//             var key = stack.pop();\n//             if(obj[key] !== s[i]) {\n//                 return false;\n//             }\n//         }\n//     }\n//     if(!stack.length) {\n//         return true;\n//     }\n//     return false;\n// };"]},"metadata":{},"sourceType":"module"}