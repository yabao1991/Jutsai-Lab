{"ast":null,"code":"var Lowest_Common_Ancestor_of_a_Binary_Tree={id:'0022',name:'Lowest_Common_Ancestor_of_a_Binary_Tree',refLink:['https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/solution/chao-jian-dan-di-gui-pythonjavascript-by-azl397985/','https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description','https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, find the subtree with maximum average. Return the root of the subtree.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/subtree-with-maximum-average/\\n\\n        // \\u590D\\u6742\\u5EA6\\u5206\\u6790\\n\\n        // \\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\uFF1AO(N)O(N)\\n        // \\u7A7A\\u95F4\\u590D\\u6742\\u5EA6\\uFF1AO(N)O(N)\\n\\n        var lowestCommonAncestor = function(root, p, q) {\\n            if (!root || root === p || root === q) return root;\\n            const left = lowestCommonAncestor(root.left, p, q);\\n            const right = lowestCommonAncestor(root.right, p, q);\\n            if (!left) return right; // \\u5DE6\\u5B50\\u6811\\u627E\\u4E0D\\u5230\\uFF0C\\u8FD4\\u56DE\\u53F3\\u5B50\\u6811\\n            if (!right) return left; // \\u53F3\\u5B50\\u6811\\u627E\\u4E0D\\u5230\\uFF0C\\u8FD4\\u56DE\\u5DE6\\u5B50\\u6811\\n            return root;\\n        };\\n    \"};export default Lowest_Common_Ancestor_of_a_Binary_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Lowest_Common_Ancestor_of_a_Binary_Tree.js"],"names":["Lowest_Common_Ancestor_of_a_Binary_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,uCAAuC,CAAG,CAC5CC,EAAE,CAAE,MADwC,CAE5CC,IAAI,CAAE,yCAFsC,CAG5CC,OAAO,CAAE,CACL,4IADK,CAEL,sFAFK,CAGL,sFAHK,CAHmC,CAQ5CC,KAAK,CAAE,MARqC,CAS5CC,GAAG,CAAE,EATuC,CAU5CC,KAAK,GAVuC,CAW5CC,UAAU,i5BAXkC,CAAhD,CAgCA,cAAeP,CAAAA,uCAAf","sourcesContent":["const Lowest_Common_Ancestor_of_a_Binary_Tree = {\n    id: '0022',\n    name: 'Lowest_Common_Ancestor_of_a_Binary_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/solution/chao-jian-dan-di-gui-pythonjavascript-by-azl397985/',\n        'https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description',\n        'https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, find the subtree with maximum average. Return the root of the subtree.\n\n        // 在线评测地址: https://www.lintcode.com/problem/subtree-with-maximum-average/\n\n        // 复杂度分析\n\n        // 时间复杂度：O(N)O(N)\n        // 空间复杂度：O(N)O(N)\n\n        var lowestCommonAncestor = function(root, p, q) {\n            if (!root || root === p || root === q) return root;\n            const left = lowestCommonAncestor(root.left, p, q);\n            const right = lowestCommonAncestor(root.right, p, q);\n            if (!left) return right; // 左子树找不到，返回右子树\n            if (!right) return left; // 右子树找不到，返回左子树\n            return root;\n        };\n    `\n}\n\nexport default Lowest_Common_Ancestor_of_a_Binary_Tree\n"]},"metadata":{},"sourceType":"module"}