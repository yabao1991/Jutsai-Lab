{"ast":null,"code":"const find_first_and_last_position_of_element_in_sorted_array = {\n  id: '0005',\n  name: 'find_first_and_last_position_of_element_in_sorted_array',\n  refLink: ['https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/javascriptzui-qing-xi-de-er-fen-cha-zhao-fu-shuo-m/', 'https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/solution'],\n  level: 'Easy',\n  tag: ['Binary Search'],\n  notes: ``,\n  jsSolution: `\n        // Given an array of integers nums sorted in ascending order, \n        // find the starting and ending position of a given target value.\n\n        // Your algorithm's runtime complexity must be in the order of O(log n).\n        \n        // If the target is not found in the array, return [-1, -1].\n        \n        // 在线评测地址: https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/\n\n        /**\n         * @param {number[]} nums\n         * @param {number} target\n         * @return {number[]}\n         */\n        var searchRange = function (nums, target) {\n            let low = 0;\n            let high = nums.length\n            while (low < high) {\n                let mid = low + Math.floor((high - low) / 2)\n                if (nums[mid] >= target) {\n                    high=mid\n                }\n                else {\n                    low=mid+1\n                }\n            } \n            \n            //如果没有找到最左索引，说明值不在数组中，直接返回 [-1,-1]\n            if (nums[low] !== target) return [-1, -1]\n            let resut = [low]\n            high = nums.length\n            low=0\n            while (low < high) {\n                let mid = low + Math.floor((high - low) / 2)\n                if (nums[mid] > target) {\n                    high = mid\n                } else {\n                    low = mid + 1\n                }\n            }\n            //最右索引是 low-1\n            resut[1] = low - 1\n            return resut\n        };\n    `\n};\nexport default find_first_and_last_position_of_element_in_sorted_array;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/find_first_and_last_position_of_element_in_sorted_array.js"],"names":["find_first_and_last_position_of_element_in_sorted_array","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,uDAAuD,GAAG;AAC5DC,EAAAA,EAAE,EAAE,MADwD;AAE5DC,EAAAA,IAAI,EAAE,yDAFsD;AAG5DC,EAAAA,OAAO,EAAE,CACL,uJADK,EAEL,mGAFK,CAHmD;AAO5DC,EAAAA,KAAK,EAAE,MAPqD;AAQ5DC,EAAAA,GAAG,EAAE,CACD,eADC,CARuD;AAW5DC,EAAAA,KAAK,EAAG,EAXoD;AAY5DC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZ+C,CAAhE;AA4DA,eAAeP,uDAAf","sourcesContent":["const find_first_and_last_position_of_element_in_sorted_array = {\n    id: '0005',\n    name: 'find_first_and_last_position_of_element_in_sorted_array',\n    refLink: [\n        'https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/javascriptzui-qing-xi-de-er-fen-cha-zhao-fu-shuo-m/',\n        'https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/solution'\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: ``,\n    jsSolution: `\n        // Given an array of integers nums sorted in ascending order, \n        // find the starting and ending position of a given target value.\n\n        // Your algorithm's runtime complexity must be in the order of O(log n).\n        \n        // If the target is not found in the array, return [-1, -1].\n        \n        // 在线评测地址: https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/\n\n        /**\n         * @param {number[]} nums\n         * @param {number} target\n         * @return {number[]}\n         */\n        var searchRange = function (nums, target) {\n            let low = 0;\n            let high = nums.length\n            while (low < high) {\n                let mid = low + Math.floor((high - low) / 2)\n                if (nums[mid] >= target) {\n                    high=mid\n                }\n                else {\n                    low=mid+1\n                }\n            } \n            \n            //如果没有找到最左索引，说明值不在数组中，直接返回 [-1,-1]\n            if (nums[low] !== target) return [-1, -1]\n            let resut = [low]\n            high = nums.length\n            low=0\n            while (low < high) {\n                let mid = low + Math.floor((high - low) / 2)\n                if (nums[mid] > target) {\n                    high = mid\n                } else {\n                    low = mid + 1\n                }\n            }\n            //最右索引是 low-1\n            resut[1] = low - 1\n            return resut\n        };\n    `,\n}\n\nexport default find_first_and_last_position_of_element_in_sorted_array"]},"metadata":{},"sourceType":"module"}