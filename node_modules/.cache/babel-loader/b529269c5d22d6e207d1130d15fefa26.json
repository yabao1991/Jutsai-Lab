{"ast":null,"code":"var _jsxFileName = \"/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/views/RedditBrowser/index.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport axiosUtil from '../../axios';\nimport { Layout, Row, Col, Input, Button } from 'antd';\nimport { Highlighter } from 'react-highlight-words';\nimport SubredditList from '../../components/SubredditList';\nimport PostList from '../../components/PostList';\nimport PostDetails from '../../components/PostDetails';\nimport { DEFAULT_SUBREDDIT_API, DEFAULT_POST_API } from '../../utils/Constants';\nimport './index.scss';\nconst {\n  Header,\n  Footer\n} = Layout;\nexport default class RedditBrowser extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      subredditListData: [],\n      subredditListSelectedRowKeys: [],\n      postListData: [],\n      postListSelectedRowKeys: [],\n      postDetailData: {},\n      url: '',\n      selectedPostAuthor: '',\n      userPostData: [],\n      searchText: '',\n      searchedColumn: ''\n    };\n\n    this.updateUrl = (url, rowIndex) => {\n      this.setState({\n        subredditListSelectedRowKeys: [rowIndex],\n        postListSelectedRowKeys: []\n      });\n\n      if (url) {\n        axiosUtil.GET({\n          url: `${url}hot.json`\n        }).then(res => {\n          const postListData = res.map((obj, index) => {\n            return { ...obj.data,\n              key: index\n            };\n          });\n          this.setState({\n            url,\n            postListData\n          });\n        });\n      }\n    };\n\n    this.updatePostData = (data, rowIndex) => {\n      axiosUtil.GET({\n        url: `user/${data.author}.json`\n      }).then(res => {\n        const userPostData = res.map((obj, index) => {\n          return { ...obj.data,\n            key: index\n          };\n        });\n        this.setState({\n          postDetailData: data,\n          postListSelectedRowKeys: [rowIndex],\n          selectedPostAuthor: data.author,\n          userPostData\n        });\n      });\n    };\n\n    this.updateRowKeys = (selectedRowKeys, type) => {\n      this.setState({\n        [type]: selectedRowKeys\n      });\n    };\n\n    this.handleSearch = (selectedKeys, confirm, dataIndex) => {\n      confirm(); // console.log(\"selectedKeys\", selectedKeys)\n      // console.log(\"dataIndex\", dataIndex)\n\n      this.setState({\n        searchText: selectedKeys[0] // searchedColumn: dataIndex\n\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: `Search ${dataIndex}`,\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm, dataIndex) // onPressEnter={() => { console.log(\"selectedKeys\", selectedKeys)}}\n        ,\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm, dataIndex) // onClick={() => { console.log(\"selectedKeys\", selectedKeys)}}\n        // icon={<SearchOutlined />}\n        ,\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }\n      }, \"Search\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }, \"Reset\")),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => this.state.searchedColumn === dataIndex ? /*#__PURE__*/React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }) : text\n    });\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n  }\n\n  componentDidMount() {\n    const requestSubredditListData = axios.get(DEFAULT_SUBREDDIT_API);\n    const requestPostListData = axios.get(DEFAULT_POST_API);\n    axios.all([requestSubredditListData, requestPostListData]).then(axios.spread((...responses) => {\n      const responseSubredditListData = responses[0].data.data.children.map((obj, index) => {\n        return { ...obj.data,\n          key: index\n        };\n      });\n      const responesPostListData = responses[1].data.data.children.map((obj, index) => {\n        return { ...obj.data,\n          key: index\n        };\n      });\n      this.setState({\n        subredditListData: responseSubredditListData,\n        postListData: responesPostListData\n      });\n    })).catch(errors => {\n      console.error(`Failed on ${errors}`);\n    });\n  }\n\n  render() {\n    const {\n      subredditListData,\n      subredditListSelectedRowKeys,\n      postListData,\n      postListSelectedRowKeys,\n      selectedPostAuthor,\n      postDetailData,\n      url,\n      userPostData\n    } = this.state;\n    const commonProps = {\n      handleUpdateRowKeys: this.updateRowKeys,\n      url: url\n    };\n    const subredditListProps = { ...commonProps,\n      handleUpdateUrl: this.updateUrl,\n      data: subredditListData,\n      selectedRowKeys: subredditListSelectedRowKeys,\n      handleGetColumnSearchProps: this.getColumnSearchProps\n    };\n    const postListProps = { ...commonProps,\n      handleUpdatePostData: this.updatePostData,\n      data: postListData,\n      author: selectedPostAuthor,\n      selectedRowKeys: postListSelectedRowKeys\n    };\n    return /*#__PURE__*/React.createElement(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, \" RedditBrowser \"), /*#__PURE__*/React.createElement(Row, {\n      className: \"contenWrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      sm: 24,\n      md: 11,\n      lg: 6,\n      xl: 6,\n      className: \"subredditList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SubredditList, Object.assign({}, subredditListProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      sm: 24,\n      md: 11,\n      lg: 6,\n      xl: 6,\n      className: \"postList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PostList, Object.assign({}, postListProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      sm: 24,\n      md: 24,\n      lg: 10,\n      xl: 10,\n      className: \"postDetails\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PostDetails, {\n      data: postDetailData,\n      userPostData: userPostData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, \"RedditBrowser for Service Channel @ Lin Zhang\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/views/RedditBrowser/index.js"],"names":["React","axios","axiosUtil","Layout","Row","Col","Input","Button","Highlighter","SubredditList","PostList","PostDetails","DEFAULT_SUBREDDIT_API","DEFAULT_POST_API","Header","Footer","RedditBrowser","Component","state","subredditListData","subredditListSelectedRowKeys","postListData","postListSelectedRowKeys","postDetailData","url","selectedPostAuthor","userPostData","searchText","searchedColumn","updateUrl","rowIndex","setState","GET","then","res","map","obj","index","data","key","updatePostData","author","updateRowKeys","selectedRowKeys","type","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","padding","node","searchInput","e","target","value","width","marginBottom","display","marginRight","handleReset","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","componentDidMount","requestSubredditListData","get","requestPostListData","all","spread","responses","responseSubredditListData","children","responesPostListData","catch","errors","console","error","commonProps","handleUpdateRowKeys","subredditListProps","handleUpdateUrl","handleGetColumnSearchProps","postListProps","handleUpdatePostData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\nimport axiosUtil from '../../axios';\nimport {\n    Layout,\n    Row,\n    Col,\n    Input,\n    Button\n} from 'antd';\nimport { Highlighter } from 'react-highlight-words'\nimport SubredditList from '../../components/SubredditList';\nimport PostList from '../../components/PostList'\nimport PostDetails from '../../components/PostDetails'\nimport { DEFAULT_SUBREDDIT_API, DEFAULT_POST_API } from '../../utils/Constants'\nimport './index.scss'\n\nconst { Header, Footer } = Layout;\n\nexport default class RedditBrowser extends React.Component {\n    state = {\n        subredditListData: [],\n        subredditListSelectedRowKeys: [],\n        postListData: [],\n        postListSelectedRowKeys: [],\n        postDetailData: {},\n        url: '',\n        selectedPostAuthor: '',\n        userPostData: [],\n        searchText: '',\n        searchedColumn: ''\n    };\n\n    componentDidMount() {\n        const requestSubredditListData = axios.get(DEFAULT_SUBREDDIT_API);\n        const requestPostListData = axios.get(DEFAULT_POST_API);\n        axios.all([requestSubredditListData, requestPostListData])\n            .then(axios.spread((...responses) => {\n                const responseSubredditListData = responses[0].data.data.children.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                const responesPostListData = responses[1].data.data.children.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                this.setState({ \n                    subredditListData: responseSubredditListData,\n                    postListData: responesPostListData\n                });\n            }))\n            .catch(errors => {\n                console.error(`Failed on ${errors}`)\n            })\n    }\n\n    updateUrl = (url, rowIndex) => {\n        this.setState({\n            subredditListSelectedRowKeys:[rowIndex],\n            postListSelectedRowKeys: []\n        });\n        if (url) {\n            axiosUtil.GET({\n                url:`${url}hot.json`\n            }).then(res => {\n                const postListData = res.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                this.setState({ \n                    url,\n                    postListData\n                });\n            });\n        }\n    }\n\n    updatePostData = (data, rowIndex) => {\n        axiosUtil.GET({\n            url:`user/${data.author}.json`\n        }).then(res => {\n            const userPostData = res.map((obj, index) => {\n                return {\n                    ...obj.data,\n                    key: index\n                }\n            });\n            this.setState({\n                postDetailData: data,\n                postListSelectedRowKeys: [rowIndex],\n                selectedPostAuthor: data.author,\n                userPostData\n            })\n        });\n    }\n\n    updateRowKeys = (selectedRowKeys, type) => {\n        this.setState({ [type]: selectedRowKeys })\n    }\n\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm()\n        // console.log(\"selectedKeys\", selectedKeys)\n        // console.log(\"dataIndex\", dataIndex)\n        this.setState({\n            searchText: selectedKeys[0],\n            // searchedColumn: dataIndex\n        })\n    }\n\n    getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n              <Input\n                ref={node => {\n                  this.searchInput = node;\n                }}\n                placeholder={`Search ${dataIndex}`}\n                value={selectedKeys[0]}\n                onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                // onPressEnter={() => { console.log(\"selectedKeys\", selectedKeys)}}\n                style={{ width: 188, marginBottom: 8, display: 'block' }}\n              />\n              <Button\n                type=\"primary\"\n                onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                // onClick={() => { console.log(\"selectedKeys\", selectedKeys)}}\n                // icon={<SearchOutlined />}\n                size=\"small\"\n                style={{ width: 90, marginRight: 8 }}\n              >\n                Search\n              </Button>\n              <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                Reset\n              </Button>\n            </div>\n          ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n        this.state.searchedColumn === dataIndex ? (\n            <Highlighter\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n            searchWords={[this.state.searchText]}\n            autoEscape\n            textToHighlight={text.toString()}\n            />\n        ) : (\n            text\n        ),\n    })\n\n    handleReset = (clearFilters) => {\n        clearFilters()\n        this.setState({\n            searchText: ''\n        })\n    }\n\n    render() {\n        const {\n            subredditListData,\n            subredditListSelectedRowKeys,\n            postListData,\n            postListSelectedRowKeys,\n            selectedPostAuthor,\n            postDetailData,\n            url,\n            userPostData\n        } = this.state\n\n        const commonProps = {\n            handleUpdateRowKeys: this.updateRowKeys,\n            url: url,\n        }\n\n        const subredditListProps = {\n            ...commonProps,\n            handleUpdateUrl: this.updateUrl,\n            data: subredditListData,\n            selectedRowKeys: subredditListSelectedRowKeys,\n            handleGetColumnSearchProps: this.getColumnSearchProps\n        }\n\n        const postListProps = {\n            ...commonProps,\n            handleUpdatePostData: this.updatePostData,\n            data: postListData,\n            author: selectedPostAuthor,\n            selectedRowKeys: postListSelectedRowKeys\n        }\n\n        return (\n            <Layout>\n                <Header> RedditBrowser </Header>\n                <Row className=\"contenWrap\">\n                    <Col xs={24} sm={24} md={11} lg={6} xl={6} className=\"subredditList\">\n                        <SubredditList {...subredditListProps} />\n                    </Col>\n                    <Col xs={24} sm={24} md={11} lg={6} xl={6} className=\"postList\">\n                        <PostList {...postListProps} />\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={10} xl={10} className=\"postDetails\">\n                        <PostDetails data={postDetailData} userPostData={userPostData}/>\n                    </Col>\n                </Row>\n                <Footer>RedditBrowser for Service Channel @ Lin Zhang</Footer>\n            </Layout>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}