{"ast":null,"code":"var First_Position_Of_Target={id:'0009',name:'First_Position_Of_Target',refLink:['https://www.lintcode.com/problem/first-position-of-target/'],level:'Easy',tag:['Binary Search'],notes:\"\",jsSolution:\"\\n        // For a given sorted array (ascending order) and a target number, \\n        // find the first index of this number in O(log n) time complexity.\\n\\n        // If the target number does not exist in the array, return -1.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/first-position-of-target/\\n\\n        /**\\n         * @param nums: The integer array.\\n         * @param target: Target to find.\\n         * @return: The first position of target. Position starts from 0.\\n         */\\n        const binarySearch = function (nums, target) {\\n            var left, right, mid, res;\\n            res = 0;\\n            left = 0;\\n            right = nums.length - 1;\\n            while (left <= right) {\\n                mid = Math.floor((left + right) / 2);\\n                if (nums[mid] === target) {\\n                    res = mid;\\n                }\\n                if (nums[mid] >= target) {\\n                    right = mid - 1;\\n                } else {\\n                    left = mid + 1;\\n                }\\n            }\\n            if (nums[res] != target) {\\n                return -1;\\n            }\\n            return res;\\n        }\\n    \"};export default First_Position_Of_Target;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/First_Position_Of_Target.js"],"names":["First_Position_Of_Target","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,wBAAwB,CAAG,CAC7BC,EAAE,CAAE,MADyB,CAE7BC,IAAI,CAAE,0BAFuB,CAG7BC,OAAO,CAAE,CACL,4DADK,CAHoB,CAM7BC,KAAK,CAAE,MANsB,CAO7BC,GAAG,CAAE,CACD,eADC,CAPwB,CAU7BC,KAAK,GAVwB,CAW7BC,UAAU,4rCAXmB,CAAjC,CAgDA,cAAeP,CAAAA,wBAAf","sourcesContent":["const First_Position_Of_Target = {\n    id: '0009',\n    name: 'First_Position_Of_Target',\n    refLink: [\n        'https://www.lintcode.com/problem/first-position-of-target/',\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: ``,\n    jsSolution: `\n        // For a given sorted array (ascending order) and a target number, \n        // find the first index of this number in O(log n) time complexity.\n\n        // If the target number does not exist in the array, return -1.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/first-position-of-target/\n\n        /**\n         * @param nums: The integer array.\n         * @param target: Target to find.\n         * @return: The first position of target. Position starts from 0.\n         */\n        const binarySearch = function (nums, target) {\n            var left, right, mid, res;\n            res = 0;\n            left = 0;\n            right = nums.length - 1;\n            while (left <= right) {\n                mid = Math.floor((left + right) / 2);\n                if (nums[mid] === target) {\n                    res = mid;\n                }\n                if (nums[mid] >= target) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            if (nums[res] != target) {\n                return -1;\n            }\n            return res;\n        }\n    `,\n}\n\nexport default First_Position_Of_Target"]},"metadata":{},"sourceType":"module"}