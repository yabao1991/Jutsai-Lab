{"ast":null,"code":"const find_peak_element = {\n  id: '0007',\n  name: 'find_peak_element',\n  refLink: ['https://www.lintcode.com/problem/find-peak-element/', 'https://www.lintcode.com/problem/find-peak-element/description', 'https://leetcode-cn.com/problems/find-peak-element/solution/'],\n  level: 'Easy',\n  tag: ['Binary Search'],\n  notes: ``,\n  jsSolution: `\n        // There is an integer array which has the following features:\n\n        // The numbers in adjacent positions are different.\n        // A[0] < A[1] && A[A.length - 2] > A[A.length - 1].\n        // We define a position P is a peak if:\n        \n        // A[P] > A[P-1] && A[P] > A[P+1]\n        // Find a peak element in this array. Return the index of the peak.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/find-peak-element/\n\n        /**\n         * @param {number[]} nums\n         * @return {number}\n         */\n        var findPeakElement = function(nums = []) {\n            const length = nums.length;\n            let index = length - 1;\n            \n            for(let i = 0; i < length - 1; i++) {\n                const item = nums[i];\n                const after = nums[i + 1];\n\n                if(item > after) {\n                    return i;\n                }\n            }\n\n            return index;\n        };\n    `\n};\nexport default find_peak_element;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/find_peak_element.js"],"names":["find_peak_element","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG;AACtBC,EAAAA,EAAE,EAAE,MADkB;AAEtBC,EAAAA,IAAI,EAAE,mBAFgB;AAGtBC,EAAAA,OAAO,EAAE,CACL,qDADK,EAEL,gEAFK,EAGL,8DAHK,CAHa;AAQtBC,EAAAA,KAAK,EAAE,MARe;AAStBC,EAAAA,GAAG,EAAE,CACD,eADC,CATiB;AAYtBC,EAAAA,KAAK,EAAG,EAZc;AAatBC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbS,CAA1B;AA+CA,eAAeP,iBAAf","sourcesContent":["const find_peak_element = {\n    id: '0007',\n    name: 'find_peak_element',\n    refLink: [\n        'https://www.lintcode.com/problem/find-peak-element/',\n        'https://www.lintcode.com/problem/find-peak-element/description',\n        'https://leetcode-cn.com/problems/find-peak-element/solution/'\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: ``,\n    jsSolution: `\n        // There is an integer array which has the following features:\n\n        // The numbers in adjacent positions are different.\n        // A[0] < A[1] && A[A.length - 2] > A[A.length - 1].\n        // We define a position P is a peak if:\n        \n        // A[P] > A[P-1] && A[P] > A[P+1]\n        // Find a peak element in this array. Return the index of the peak.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/find-peak-element/\n\n        /**\n         * @param {number[]} nums\n         * @return {number}\n         */\n        var findPeakElement = function(nums = []) {\n            const length = nums.length;\n            let index = length - 1;\n            \n            for(let i = 0; i < length - 1; i++) {\n                const item = nums[i];\n                const after = nums[i + 1];\n\n                if(item > after) {\n                    return i;\n                }\n            }\n\n            return index;\n        };\n    `,\n}\n\nexport default find_peak_element"]},"metadata":{},"sourceType":"module"}