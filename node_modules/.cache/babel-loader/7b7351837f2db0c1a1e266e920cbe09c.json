{"ast":null,"code":"var Palindrome_Partitioning={id:'0037',name:'Palindrome_Partitioning',refLink:['https://leetcode-cn.com/problems/palindrome-partitioning/solution/jschao-guo-90dong-tai-gui-hua-shen-du-you-xian-sou/','https://www.lintcode.com/problem/palindrome-partitioning/description','https://www.jiuzhang.com/solution/palindrome-partitioning/'],level:'Medium',tag:[],notes:\"\",jsSolution:\"\\n        // Given a string s. Partition s such that every substring in the partition is a palindrome.\\n\\n        // Return all possible palindrome partitioning of s.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/palindrome-partitioning/\\n\\n        function isPalindrome(s) {\\n            let dp = new Array(s.length)\\n            for (let i = 0; i < dp.length; i++) {\\n                dp[i] = new Array(s.length).fill(false)\\n            }\\n            for (let l = 1; l <= s.length; l++) {\\n                for (let i = 0; i <= s.length - l; i++) {\\n                    let j = i + l - 1\\n                    dp[i][j] = s[i] == s[j] && (l < 3 || dp[i + 1][j - 1])\\n                }\\n            }\\n            return dp\\n        }\\n        \\n        var partition = function (s) {\\n            let dp = isPalindrome(s)\\n            let ans = []\\n        \\n            function dfs(router) {\\n                if (router.length > 0 && router[router.length - 1][1] == s.length - 1) {\\n                    ans.push(router)\\n                    return\\n                }\\n                let row = router[router.length - 1]\\n                for (let j = row[1] + 1; j < s.length; j++) {\\n                    if (dp[row[1] + 1][j]) {\\n                        dfs([...router].concat([[row[1] + 1, j]]))\\n                    }\\n                }\\n            }\\n        \\n            for (let j = 0; j < s.length; j++) {\\n                if (dp[0][j]) dfs([[0, j]])\\n            }\\n            \\n            return ans.map((item) => {\\n                return item.reduce((pre, k) => {\\n                   return pre.concat([s.substr(k[0], k[1] - k[0] + 1)])\\n                }, [])\\n            })\\n        };\\n    \"};export default Palindrome_Partitioning;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Depth_First_Search/Palindrome_Partitioning.js"],"names":["Palindrome_Partitioning","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,uBAAuB,CAAG,CAC5BC,EAAE,CAAE,MADwB,CAE5BC,IAAI,CAAE,yBAFsB,CAG5BC,OAAO,CAAE,CACL,uHADK,CAEL,sEAFK,CAGL,4DAHK,CAHmB,CAQ5BC,KAAK,CAAE,QARqB,CAS5BC,GAAG,CAAE,EATuB,CAU5BC,KAAK,GAVuB,CAW5BC,UAAU,guDAXkB,CAAhC,CA8DA,cAAeP,CAAAA,uBAAf","sourcesContent":["const Palindrome_Partitioning = {\n    id: '0037',\n    name: 'Palindrome_Partitioning',\n    refLink: [\n        'https://leetcode-cn.com/problems/palindrome-partitioning/solution/jschao-guo-90dong-tai-gui-hua-shen-du-you-xian-sou/',\n        'https://www.lintcode.com/problem/palindrome-partitioning/description',\n        'https://www.jiuzhang.com/solution/palindrome-partitioning/'\n    ],\n    level: 'Medium',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a string s. Partition s such that every substring in the partition is a palindrome.\n\n        // Return all possible palindrome partitioning of s.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/palindrome-partitioning/\n\n        function isPalindrome(s) {\n            let dp = new Array(s.length)\n            for (let i = 0; i < dp.length; i++) {\n                dp[i] = new Array(s.length).fill(false)\n            }\n            for (let l = 1; l <= s.length; l++) {\n                for (let i = 0; i <= s.length - l; i++) {\n                    let j = i + l - 1\n                    dp[i][j] = s[i] == s[j] && (l < 3 || dp[i + 1][j - 1])\n                }\n            }\n            return dp\n        }\n        \n        var partition = function (s) {\n            let dp = isPalindrome(s)\n            let ans = []\n        \n            function dfs(router) {\n                if (router.length > 0 && router[router.length - 1][1] == s.length - 1) {\n                    ans.push(router)\n                    return\n                }\n                let row = router[router.length - 1]\n                for (let j = row[1] + 1; j < s.length; j++) {\n                    if (dp[row[1] + 1][j]) {\n                        dfs([...router].concat([[row[1] + 1, j]]))\n                    }\n                }\n            }\n        \n            for (let j = 0; j < s.length; j++) {\n                if (dp[0][j]) dfs([[0, j]])\n            }\n            \n            return ans.map((item) => {\n                return item.reduce((pre, k) => {\n                   return pre.concat([s.substr(k[0], k[1] - k[0] + 1)])\n                }, [])\n            })\n        };\n    `\n}\n\nexport default Palindrome_Partitioning\n"]},"metadata":{},"sourceType":"module"}