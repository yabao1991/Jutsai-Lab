{"ast":null,"code":"var Balanced_Binary_Tree={id:'0020',name:'Balanced_Binary_Tree',refLink:['https://leetcode-cn.com/problems/balanced-binary-tree/solution/di-gui-pan-duan-ping-heng-er-cha-shu-by-zhu-zhu-xi/','https://www.lintcode.com/problem/balanced-binary-tree/description','https://www.jiuzhang.com/solution/balanced-binary-tree/'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, determine if it is height-balanced.\\n\\n        // For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n        \\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/balanced-binary-tree/\\n\\n        /**\\n         * @param {TreeNode} root\\n         * @return {boolean}\\n         */\\n        var isBalanced = function(root) {\\n            // \\u904D\\u5386\\u5230\\u5E95\\u8FD8\\u6CA1\\u6709\\u53D1\\u73B0\\u9AD8\\u5EA6\\u5DEE\\u8D85\\u8FC7 1 \\u7684\\u5DE6\\u53F3\\u5B50\\u6811\\uFF0C\\u90A3\\u4E48\\u8FD9\\u4E2A\\u5B50\\u6811\\u80AF\\u5B9A\\u7B26\\u5408\\u5E73\\u8861\\u4E8C\\u53C9\\u6811\\u7684\\u89C4\\u8303\\n            if (!root) {\\n                return true\\n            }\\n            // \\u5224\\u65AD\\u5DE6\\u53F3\\u5B50\\u6811\\u7684\\u9AD8\\u5EA6\\u5DEE\\uFF0C\\u5982\\u679C\\u8D85\\u8FC7 1 \\u90A3\\u4E48\\u7ACB\\u5373\\u8FD4\\u56DE false\\n            if (Math.abs(getHeight(root.left) - getHeight(root.right)) > 1) {\\n                return false\\n            }\\n            // \\u5206\\u522B\\u9012\\u5F52\\u5DE6\\u53F3\\u5B50\\u6811\\n            return isBalanced(root.left) && isBalanced(root.right)\\n            // \\u83B7\\u53D6\\u67D0\\u4E2A\\u5B50\\u6811\\u7684\\u9AD8\\u5EA6\\n            function getHeight (root) {\\n                if (!root) {\\n                    return 0\\n                }\\n                return Math.max(getHeight(root.left), getHeight(root.right)) + 1\\n            }\\n        };\\n    \"};export default Balanced_Binary_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Balanced_Binary_Tree.js"],"names":["Balanced_Binary_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,oBAAoB,CAAG,CACzBC,EAAE,CAAE,MADqB,CAEzBC,IAAI,CAAE,sBAFmB,CAGzBC,OAAO,CAAE,CACL,oHADK,CAEL,mEAFK,CAGL,yDAHK,CAHgB,CAQzBC,KAAK,CAAE,MARkB,CASzBC,GAAG,CAAE,EAToB,CAUzBC,KAAK,GAVoB,CAWzBC,UAAU,w/CAXe,CAA7B,CA4CA,cAAeP,CAAAA,oBAAf","sourcesContent":["const Balanced_Binary_Tree = {\n    id: '0020',\n    name: 'Balanced_Binary_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/balanced-binary-tree/solution/di-gui-pan-duan-ping-heng-er-cha-shu-by-zhu-zhu-xi/',\n        'https://www.lintcode.com/problem/balanced-binary-tree/description',\n        'https://www.jiuzhang.com/solution/balanced-binary-tree/'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, determine if it is height-balanced.\n\n        // For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n        \n        // 在线评测地址: https://www.lintcode.com/problem/balanced-binary-tree/\n\n        /**\n         * @param {TreeNode} root\n         * @return {boolean}\n         */\n        var isBalanced = function(root) {\n            // 遍历到底还没有发现高度差超过 1 的左右子树，那么这个子树肯定符合平衡二叉树的规范\n            if (!root) {\n                return true\n            }\n            // 判断左右子树的高度差，如果超过 1 那么立即返回 false\n            if (Math.abs(getHeight(root.left) - getHeight(root.right)) > 1) {\n                return false\n            }\n            // 分别递归左右子树\n            return isBalanced(root.left) && isBalanced(root.right)\n            // 获取某个子树的高度\n            function getHeight (root) {\n                if (!root) {\n                    return 0\n                }\n                return Math.max(getHeight(root.left), getHeight(root.right)) + 1\n            }\n        };\n    `\n}\n\nexport default Balanced_Binary_Tree\n"]},"metadata":{},"sourceType":"module"}