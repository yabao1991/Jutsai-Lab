{"ast":null,"code":"var Validate_Binary_Search_Tree={id:'0023',name:'Validate_Binary_Search_Tree',refLink:['https://leetcode-cn.com/problems/validate-binary-search-tree/solution/js-di-gui-san-xing-dai-ma-by-jsyt/','https://blog.csdn.net/qq_34629352/article/details/102938948','https://www.lintcode.com/problem/validate-binary-search-tree/description'],level:'Easy',tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, determine if it is a valid binary search tree (BST).\\n\\n        // Assume a BST is defined as follows:\\n        \\n        // The left subtree of a node contains only nodes with keys less than the node's key.\\n        // The right subtree of a node contains only nodes with keys greater than the node's key.\\n        // Both the left and right subtrees must also be binary search trees.\\n        // A single node tree is a BST\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/validate-binary-search-tree/\\n\\n        var isValidBST = function(root, min = -Infinity, max = Infinity) {\\n            if (!root) return true;\\n            if (root.val <= min || root.val >= max) return false;\\n            return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);\\n        };\\n    \"};export default Validate_Binary_Search_Tree;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Tree_Divide_Conquer/Validate_Binary_Search_Tree.js"],"names":["Validate_Binary_Search_Tree","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,2BAA2B,CAAG,CAChCC,EAAE,CAAE,MAD4B,CAEhCC,IAAI,CAAE,6BAF0B,CAGhCC,OAAO,CAAE,CACL,0GADK,CAEL,6DAFK,CAGL,0EAHK,CAHuB,CAQhCC,KAAK,CAAE,MARyB,CAShCC,GAAG,CAAE,EAT2B,CAUhCC,KAAK,GAV2B,CAWhCC,UAAU,y2BAXsB,CAApC,CA8BA,cAAeP,CAAAA,2BAAf","sourcesContent":["const Validate_Binary_Search_Tree = {\n    id: '0023',\n    name: 'Validate_Binary_Search_Tree',\n    refLink: [\n        'https://leetcode-cn.com/problems/validate-binary-search-tree/solution/js-di-gui-san-xing-dai-ma-by-jsyt/',\n        'https://blog.csdn.net/qq_34629352/article/details/102938948',\n        'https://www.lintcode.com/problem/validate-binary-search-tree/description'\n    ],\n    level: 'Easy',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given a binary tree, determine if it is a valid binary search tree (BST).\n\n        // Assume a BST is defined as follows:\n        \n        // The left subtree of a node contains only nodes with keys less than the node's key.\n        // The right subtree of a node contains only nodes with keys greater than the node's key.\n        // Both the left and right subtrees must also be binary search trees.\n        // A single node tree is a BST\n        // 在线评测地址: https://www.lintcode.com/problem/validate-binary-search-tree/\n\n        var isValidBST = function(root, min = -Infinity, max = Infinity) {\n            if (!root) return true;\n            if (root.val <= min || root.val >= max) return false;\n            return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);\n        };\n    `\n}\n\nexport default Validate_Binary_Search_Tree\n"]},"metadata":{},"sourceType":"module"}