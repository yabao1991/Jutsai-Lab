{"ast":null,"code":"var Linked_List_Cycle={id:'0044',name:'Linked_List_Cycle',refLink:['https://leetcode-cn.com/problems/linked-list-cycle/solution/shuang-jie-fa-floydsuan-fa-ha-xi-biao-javascriptsh/','https://www.lintcode.com/problem/linked-list-cycle/desciption','https://www.jiuzhang.com/solution/linked-list-cycle/#tag-highlight'],level:'Medium',tag:[],notes:\"TEST with issue\",jsSolution:\"\\n        // Given a linked list, determine if it has a cycle in it.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/linked-list-cycle/\\n\\n        \\u89E3\\u6CD5 1\\uFF1AFloyd \\u5224\\u5708\\u7B97\\u6CD5\\n        Floyd \\u5224\\u5708\\u7B97\\u6CD5\\u7C7B\\u4F3C\\u9F9F\\u5154\\u8D5B\\u8DD1\\uFF0C\\u9700\\u8981\\u7528\\u5230\\u5FEB\\u6307\\u9488 fast \\u548C\\u6162\\u6307\\u9488 slow\\u3002\\u7B97\\u6CD5\\u6D41\\u7A0B\\u662F\\uFF1A\\n\\n        slow \\u6BCF\\u6B21\\u79FB\\u52A8 1 \\u4E0D\\uFF0Cfast \\u79FB\\u52A8 2 \\u6B65\\n        \\u4E00\\u76F4\\u79FB\\u52A8\\u4E0B\\u53BB\\uFF0C\\u82E5 slow\\u3001fast \\u76F8\\u9047\\uFF0C\\u90A3\\u4E48\\u5FC5\\u6709\\u73AF\\uFF1B\\u82E5 slow \\u6216 fast \\u62B5\\u8FBE\\u8FB9\\u754C\\uFF0C\\u90A3\\u4E48\\u4E0D\\u5B58\\u5728\\u73AF\\u3002\\n        \\u4EE3\\u7801\\u5B9E\\u73B0\\u5982\\u4E0B\\uFF1A\\n\\n        // ac\\u5730\\u5740\\uFF1Ahttps://leetcode-cn.com/problems/linked-list-cycle/\\n        // \\u539F\\u6587\\u5730\\u5740\\uFF1Ahttps://xxoo521.com/2020-03-03-linked-list-cycle/\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {boolean}\\n         */\\n        var hasCycle = function(head) {\\n            let slow = head;\\n            let fast = head;\\n\\n            while (slow && fast && fast.next) {\\n                slow = slow.next;\\n                fast = fast.next.next;\\n                if (slow === fast) return true;\\n            }\\n            return false;\\n        };\\n        \\u89E3\\u6CD5 2: \\u54C8\\u5E0C\\u8868\\n        \\u8FD9\\u79CD\\u89E3\\u6CD5\\u6BD4\\u8F83\\u5BB9\\u6613\\u60F3\\u5230\\uFF0C\\u4F7F\\u7528\\u54C8\\u5E0C\\u8868\\u6765\\u8BB0\\u5F55\\u8282\\u70B9\\u662F\\u5426\\u51FA\\u73B0\\u8FC7\\u3002\\u82E5\\u5B58\\u5728\\u73AF\\uFF0C\\u90A3\\u4E48\\u4E00\\u76F4\\u5411\\u4E0B\\u8BBF\\u95EE\\uFF0C\\u4E00\\u5B9A\\u4F1A\\u56DE\\u5230\\u73AF\\u7684\\u5165\\u53E3\\u5904\\u3002\\n\\n        \\u4EE3\\u7801\\u5B9E\\u73B0\\u5982\\u4E0B\\uFF1A\\n\\n        // ac\\u5730\\u5740\\uFF1Ahttps://leetcode-cn.com/problems/linked-list-cycle/\\n        // \\u539F\\u6587\\u5730\\u5740\\uFF1Ahttps://xxoo521.com/2020-03-03-linked-list-cycle/\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {boolean}\\n         */\\n        var hasCycle = function(head) {\\n            if (!head) return false;\\n\\n            const map = new Map();\\n            let node = head;\\n            map.set(node, true);\\n\\n            while (node.next) {\\n                if (map.get(node.next)) {\\n                    // map.clear() // \\u8282\\u7701\\u65F6\\u95F4\\u53EF\\u4EE5\\u53BB\\u6389\\n                    return true;\\n                }\\n                map.set(node.next, true);\\n                node = node.next;\\n            }\\n            // map.clear()\\n            return false;\\n        };\\n    \"};export default Linked_List_Cycle;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Linked_List_Array/Linked_List_Cycle.js"],"names":["Linked_List_Cycle","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,iBAAiB,CAAG,CACtBC,EAAE,CAAE,MADkB,CAEtBC,IAAI,CAAE,mBAFgB,CAGtBC,OAAO,CAAE,CACL,iHADK,CAEL,+DAFK,CAGL,oEAHK,CAHa,CAQtBC,KAAK,CAAE,QARe,CAStBC,GAAG,CAAE,EATiB,CAUtBC,KAAK,kBAViB,CAWtBC,UAAU,8lFAXY,CAA1B,CA0EA,cAAeP,CAAAA,iBAAf","sourcesContent":["const Linked_List_Cycle = {\n    id: '0044',\n    name: 'Linked_List_Cycle',\n    refLink: [\n        'https://leetcode-cn.com/problems/linked-list-cycle/solution/shuang-jie-fa-floydsuan-fa-ha-xi-biao-javascriptsh/',\n        'https://www.lintcode.com/problem/linked-list-cycle/desciption',\n        'https://www.jiuzhang.com/solution/linked-list-cycle/#tag-highlight'\n    ],\n    level: 'Medium',\n    tag: [],\n    notes: `TEST with issue`,\n    jsSolution: `\n        // Given a linked list, determine if it has a cycle in it.\n\n        // 在线评测地址: https://www.lintcode.com/problem/linked-list-cycle/\n\n        解法 1：Floyd 判圈算法\n        Floyd 判圈算法类似龟兔赛跑，需要用到快指针 fast 和慢指针 slow。算法流程是：\n\n        slow 每次移动 1 不，fast 移动 2 步\n        一直移动下去，若 slow、fast 相遇，那么必有环；若 slow 或 fast 抵达边界，那么不存在环。\n        代码实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/linked-list-cycle/\n        // 原文地址：https://xxoo521.com/2020-03-03-linked-list-cycle/\n\n        /**\n         * @param {ListNode} head\n         * @return {boolean}\n         */\n        var hasCycle = function(head) {\n            let slow = head;\n            let fast = head;\n\n            while (slow && fast && fast.next) {\n                slow = slow.next;\n                fast = fast.next.next;\n                if (slow === fast) return true;\n            }\n            return false;\n        };\n        解法 2: 哈希表\n        这种解法比较容易想到，使用哈希表来记录节点是否出现过。若存在环，那么一直向下访问，一定会回到环的入口处。\n\n        代码实现如下：\n\n        // ac地址：https://leetcode-cn.com/problems/linked-list-cycle/\n        // 原文地址：https://xxoo521.com/2020-03-03-linked-list-cycle/\n\n        /**\n         * @param {ListNode} head\n         * @return {boolean}\n         */\n        var hasCycle = function(head) {\n            if (!head) return false;\n\n            const map = new Map();\n            let node = head;\n            map.set(node, true);\n\n            while (node.next) {\n                if (map.get(node.next)) {\n                    // map.clear() // 节省时间可以去掉\n                    return true;\n                }\n                map.set(node.next, true);\n                node = node.next;\n            }\n            // map.clear()\n            return false;\n        };\n    `\n}\n\nexport default Linked_List_Cycle\n"]},"metadata":{},"sourceType":"module"}