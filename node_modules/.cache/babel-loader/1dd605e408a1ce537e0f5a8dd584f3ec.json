{"ast":null,"code":"var Two_Sum_Closest_to_target={id:'0056',name:'Two_Sum_Closest_to_target',refLink:['https://www.lintcode.com/problem/two-sum-closest-to-target/description','https://www.jiuzhang.com/solution/two-sum-closest-to-target/#tag-highlight'],level:'Medium',tag:[],notes:\"\",jsSolution:\"\\n        // http://www.lintcode.com/problem/two-sum-closest-to-target/\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: http://www.lintcode.com/problem/two-sum-closest-to-target/\\n        \\n        public class Solution {\\n            /**\\n             * @param nums an integer array\\n             * @param target an integer\\n             * @return the difference between the sum and the target\\n             */\\n            public int twoSumClosest(int[] nums, int target) {\\n                if (nums == null || nums.length < 2) {\\n                    return -1;\\n                }\\n                \\n                Arrays.sort(nums);\\n                \\n                int left = 0, right = nums.length - 1;\\n                int diff = Integer.MAX_VALUE;\\n                \\n                while (left < right) {\\n                    if (nums[left] + nums[right] < target) {\\n                        diff = Math.min(diff, target - nums[left] - nums[right]);\\n                        left++;\\n                    } else {\\n                        diff = Math.min(diff, nums[left] + nums[right] - target);\\n                        right--;\\n                    }\\n                }\\n                \\n                return diff;\\n            }\\n        }\\n        \\n        // \\u4E5D\\u7AE0\\u7845\\u8C37\\u6C42\\u804C\\u7B97\\u6CD5\\u96C6\\u8BAD\\u8425\\u7248\\u672C\\n        public class Solution {\\n            /**\\n             * @param nums an integer array\\n             * @param target an integer\\n             * @return the difference between the sum and the target\\n             */\\n            int diff = Integer.MAX_VALUE;\\n            int T = 0;\\n            \\n            public void update(int[] A, int x, int y) {\\n                if (x != y && x >= 0 && x < A.length && y >= 0 && y < A.length) {\\n                    diff = Math.min(diff, Math.abs(A[x] + A[y] - T));\\n                }\\n            }\\n            \\n            public int twoSumClosest(int[] A, int target) {\\n                // Write your code here\\n                T = target;\\n                 if (A == null || A.length < 2) {\\n                    return -1;\\n                }\\n                \\n                Arrays.sort(A);\\n                \\n                int j = A.length - 1;\\n                for (int i = 0; i < A.length; ++i) {\\n                    while (j >= 0 && A[i] + A[j] > target) --j;\\n                    update(A, i, j + 1);\\n                    update(A, i, j);\\n                    update(A, i, j - 1);\\n                }\\n                \\n                return diff;\\n            }\\n        }\\n    \"};export default Two_Sum_Closest_to_target;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Two_Pointers/Two_Sum_Closest_to_target.js"],"names":["Two_Sum_Closest_to_target","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,yBAAyB,CAAG,CAC9BC,EAAE,CAAE,MAD0B,CAE9BC,IAAI,CAAE,2BAFwB,CAG9BC,OAAO,CAAE,CACL,wEADK,CAEL,4EAFK,CAHqB,CAO9BC,KAAK,CAAE,QAPuB,CAQ9BC,GAAG,CAAE,EARyB,CAS9BC,KAAK,GATyB,CAU9BC,UAAU,gjFAVoB,CAAlC,CAoFA,cAAeP,CAAAA,yBAAf","sourcesContent":["const Two_Sum_Closest_to_target = {\n    id: '0056',\n    name: 'Two_Sum_Closest_to_target', \n    refLink: [\n        'https://www.lintcode.com/problem/two-sum-closest-to-target/description',\n        'https://www.jiuzhang.com/solution/two-sum-closest-to-target/#tag-highlight'\n    ],\n    level: 'Medium',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // http://www.lintcode.com/problem/two-sum-closest-to-target/\n\n        // 在线评测地址: http://www.lintcode.com/problem/two-sum-closest-to-target/\n        \n        public class Solution {\n            /**\n             * @param nums an integer array\n             * @param target an integer\n             * @return the difference between the sum and the target\n             */\n            public int twoSumClosest(int[] nums, int target) {\n                if (nums == null || nums.length < 2) {\n                    return -1;\n                }\n                \n                Arrays.sort(nums);\n                \n                int left = 0, right = nums.length - 1;\n                int diff = Integer.MAX_VALUE;\n                \n                while (left < right) {\n                    if (nums[left] + nums[right] < target) {\n                        diff = Math.min(diff, target - nums[left] - nums[right]);\n                        left++;\n                    } else {\n                        diff = Math.min(diff, nums[left] + nums[right] - target);\n                        right--;\n                    }\n                }\n                \n                return diff;\n            }\n        }\n        \n        // 九章硅谷求职算法集训营版本\n        public class Solution {\n            /**\n             * @param nums an integer array\n             * @param target an integer\n             * @return the difference between the sum and the target\n             */\n            int diff = Integer.MAX_VALUE;\n            int T = 0;\n            \n            public void update(int[] A, int x, int y) {\n                if (x != y && x >= 0 && x < A.length && y >= 0 && y < A.length) {\n                    diff = Math.min(diff, Math.abs(A[x] + A[y] - T));\n                }\n            }\n            \n            public int twoSumClosest(int[] A, int target) {\n                // Write your code here\n                T = target;\n                 if (A == null || A.length < 2) {\n                    return -1;\n                }\n                \n                Arrays.sort(A);\n                \n                int j = A.length - 1;\n                for (int i = 0; i < A.length; ++i) {\n                    while (j >= 0 && A[i] + A[j] > target) --j;\n                    update(A, i, j + 1);\n                    update(A, i, j);\n                    update(A, i, j - 1);\n                }\n                \n                return diff;\n            }\n        }\n    `\n}\n\nexport default Two_Sum_Closest_to_target\n"]},"metadata":{},"sourceType":"module"}