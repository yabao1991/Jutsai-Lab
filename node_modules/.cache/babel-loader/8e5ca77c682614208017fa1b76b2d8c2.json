{"ast":null,"code":"import _defineProperty from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/yabao/Documents/githubspace/Jutsai-Lab/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import axios from\"axios\";import axiosUtil from'../../axios';import{Layout,Row,Col,Input,Button}from'antd';import{Highlighter}from'react-highlight-words';import SubredditList from'../../components/SubredditList';import PostList from'../../components/PostList';import PostDetails from'../../components/PostDetails';import{DEFAULT_SUBREDDIT_API,DEFAULT_POST_API}from'../../utils/Constants';import'./index.scss';var Header=Layout.Header,Footer=Layout.Footer;var RedditBrowser=/*#__PURE__*/function(_React$Component){_inherits(RedditBrowser,_React$Component);var _super=_createSuper(RedditBrowser);function RedditBrowser(){var _this;_classCallCheck(this,RedditBrowser);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={subredditListData:[],subredditListSelectedRowKeys:[],postListData:[],postListSelectedRowKeys:[],postDetailData:{},url:'',selectedPostAuthor:'',userPostData:[],searchText:'',searchedColumn:''};_this.updateUrl=function(url,rowIndex){_this.setState({subredditListSelectedRowKeys:[rowIndex],postListSelectedRowKeys:[]});if(url){axiosUtil.GET({url:\"\".concat(url,\"hot.json\")}).then(function(res){var postListData=res.map(function(obj,index){return _objectSpread(_objectSpread({},obj.data),{},{key:index});});_this.setState({url:url,postListData:postListData});});}};_this.updatePostData=function(data,rowIndex){axiosUtil.GET({url:\"user/\".concat(data.author,\".json\")}).then(function(res){var userPostData=res.map(function(obj,index){return _objectSpread(_objectSpread({},obj.data),{},{key:index});});_this.setState({postDetailData:data,postListSelectedRowKeys:[rowIndex],selectedPostAuthor:data.author,userPostData:userPostData});});};_this.updateRowKeys=function(selectedRowKeys,type){_this.setState(_defineProperty({},type,selectedRowKeys));};_this.handleSearch=function(selectedKeys,confirm,dataIndex){confirm();// console.log(\"selectedKeys\", selectedKeys)\n// console.log(\"dataIndex\", dataIndex)\n_this.setState({searchText:selectedKeys[0]// searchedColumn: dataIndex\n});};_this.getColumnSearchProps=function(dataIndex){return{filterDropdown:function filterDropdown(_ref){var setSelectedKeys=_ref.setSelectedKeys,selectedKeys=_ref.selectedKeys,confirm=_ref.confirm,clearFilters=_ref.clearFilters;return/*#__PURE__*/React.createElement(\"div\",{style:{padding:8}},/*#__PURE__*/React.createElement(Input,{ref:function ref(node){_this.searchInput=node;},placeholder:\"Search \".concat(dataIndex),value:selectedKeys[0],onChange:function onChange(e){return setSelectedKeys(e.target.value?[e.target.value]:[]);},onPressEnter:function onPressEnter(){return _this.handleSearch(selectedKeys,confirm,dataIndex);}// onPressEnter={() => { console.log(\"selectedKeys\", selectedKeys)}}\n,style:{width:188,marginBottom:8,display:'block'}}),/*#__PURE__*/React.createElement(Button,{type:\"primary\",onClick:function onClick(){return _this.handleSearch(selectedKeys,confirm,dataIndex);}// onClick={() => { console.log(\"selectedKeys\", selectedKeys)}}\n// icon={<SearchOutlined />}\n,size:\"small\",style:{width:90,marginRight:8}},\"Search\"),/*#__PURE__*/React.createElement(Button,{onClick:function onClick(){return _this.handleReset(clearFilters);},size:\"small\",style:{width:90}},\"Reset\"));},onFilter:function onFilter(value,record){return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());},onFilterDropdownVisibleChange:function onFilterDropdownVisibleChange(visible){if(visible){setTimeout(function(){return _this.searchInput.select();});}},render:function render(text){return _this.state.searchedColumn===dataIndex?/*#__PURE__*/React.createElement(Highlighter,{highlightStyle:{backgroundColor:'#ffc069',padding:0},searchWords:[_this.state.searchText],autoEscape:true,textToHighlight:text.toString()}):text;}};};_this.handleReset=function(clearFilters){clearFilters();_this.setState({searchText:''});};return _this;}_createClass(RedditBrowser,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var requestSubredditListData=axios.get(DEFAULT_SUBREDDIT_API);var requestPostListData=axios.get(DEFAULT_POST_API);axios.all([requestSubredditListData,requestPostListData]).then(axios.spread(function(){for(var _len2=arguments.length,responses=new Array(_len2),_key2=0;_key2<_len2;_key2++){responses[_key2]=arguments[_key2];}var responseSubredditListData=responses[0].data.data.children.map(function(obj,index){return _objectSpread(_objectSpread({},obj.data),{},{key:index});});var responesPostListData=responses[1].data.data.children.map(function(obj,index){return _objectSpread(_objectSpread({},obj.data),{},{key:index});});_this2.setState({subredditListData:responseSubredditListData,postListData:responesPostListData});})).catch(function(errors){console.error(\"Failed on \".concat(errors));});}},{key:\"render\",value:function render(){var _this$state=this.state,subredditListData=_this$state.subredditListData,subredditListSelectedRowKeys=_this$state.subredditListSelectedRowKeys,postListData=_this$state.postListData,postListSelectedRowKeys=_this$state.postListSelectedRowKeys,selectedPostAuthor=_this$state.selectedPostAuthor,postDetailData=_this$state.postDetailData,url=_this$state.url,userPostData=_this$state.userPostData;var commonProps={handleUpdateRowKeys:this.updateRowKeys,url:url};var subredditListProps=_objectSpread(_objectSpread({},commonProps),{},{handleUpdateUrl:this.updateUrl,data:subredditListData,selectedRowKeys:subredditListSelectedRowKeys,handleGetColumnSearchProps:this.getColumnSearchProps});var postListProps=_objectSpread(_objectSpread({},commonProps),{},{handleUpdatePostData:this.updatePostData,data:postListData,author:selectedPostAuthor,selectedRowKeys:postListSelectedRowKeys});return/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Header,null,\" RedditBrowser \"),/*#__PURE__*/React.createElement(Row,{className:\"contenWrap\"},/*#__PURE__*/React.createElement(Col,{xs:24,sm:24,md:11,lg:6,xl:6,className:\"subredditList\"},/*#__PURE__*/React.createElement(SubredditList,subredditListProps)),/*#__PURE__*/React.createElement(Col,{xs:24,sm:24,md:11,lg:6,xl:6,className:\"postList\"},/*#__PURE__*/React.createElement(PostList,postListProps)),/*#__PURE__*/React.createElement(Col,{xs:24,sm:24,md:24,lg:10,xl:10,className:\"postDetails\"},/*#__PURE__*/React.createElement(PostDetails,{data:postDetailData,userPostData:userPostData}))),/*#__PURE__*/React.createElement(Footer,null,\"RedditBrowser for Service Channel @ Lin Zhang\"));}}]);return RedditBrowser;}(React.Component);export{RedditBrowser as default};","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/RedditBrowserApp/pages/views/RedditBrowser/index.js"],"names":["React","axios","axiosUtil","Layout","Row","Col","Input","Button","Highlighter","SubredditList","PostList","PostDetails","DEFAULT_SUBREDDIT_API","DEFAULT_POST_API","Header","Footer","RedditBrowser","state","subredditListData","subredditListSelectedRowKeys","postListData","postListSelectedRowKeys","postDetailData","url","selectedPostAuthor","userPostData","searchText","searchedColumn","updateUrl","rowIndex","setState","GET","then","res","map","obj","index","data","key","updatePostData","author","updateRowKeys","selectedRowKeys","type","handleSearch","selectedKeys","confirm","dataIndex","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","padding","node","searchInput","e","target","value","width","marginBottom","display","marginRight","handleReset","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","requestSubredditListData","get","requestPostListData","all","spread","responses","responseSubredditListData","children","responesPostListData","catch","errors","console","error","commonProps","handleUpdateRowKeys","subredditListProps","handleUpdateUrl","handleGetColumnSearchProps","postListProps","handleUpdatePostData","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\nimport axiosUtil from '../../axios';\nimport {\n    Layout,\n    Row,\n    Col,\n    Input,\n    Button\n} from 'antd';\nimport { Highlighter } from 'react-highlight-words'\nimport SubredditList from '../../components/SubredditList';\nimport PostList from '../../components/PostList'\nimport PostDetails from '../../components/PostDetails'\nimport { DEFAULT_SUBREDDIT_API, DEFAULT_POST_API } from '../../utils/Constants'\nimport './index.scss'\n\nconst { Header, Footer } = Layout;\n\nexport default class RedditBrowser extends React.Component {\n    state = {\n        subredditListData: [],\n        subredditListSelectedRowKeys: [],\n        postListData: [],\n        postListSelectedRowKeys: [],\n        postDetailData: {},\n        url: '',\n        selectedPostAuthor: '',\n        userPostData: [],\n        searchText: '',\n        searchedColumn: ''\n    };\n\n    componentDidMount() {\n        const requestSubredditListData = axios.get(DEFAULT_SUBREDDIT_API);\n        const requestPostListData = axios.get(DEFAULT_POST_API);\n        axios.all([requestSubredditListData, requestPostListData])\n            .then(axios.spread((...responses) => {\n                const responseSubredditListData = responses[0].data.data.children.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                const responesPostListData = responses[1].data.data.children.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                this.setState({ \n                    subredditListData: responseSubredditListData,\n                    postListData: responesPostListData\n                });\n            }))\n            .catch(errors => {\n                console.error(`Failed on ${errors}`)\n            })\n    }\n\n    updateUrl = (url, rowIndex) => {\n        this.setState({\n            subredditListSelectedRowKeys:[rowIndex],\n            postListSelectedRowKeys: []\n        });\n        if (url) {\n            axiosUtil.GET({\n                url:`${url}hot.json`\n            }).then(res => {\n                const postListData = res.map((obj, index) => {\n                    return {\n                        ...obj.data,\n                        key: index\n                    }\n                });\n                this.setState({ \n                    url,\n                    postListData\n                });\n            });\n        }\n    }\n\n    updatePostData = (data, rowIndex) => {\n        axiosUtil.GET({\n            url:`user/${data.author}.json`\n        }).then(res => {\n            const userPostData = res.map((obj, index) => {\n                return {\n                    ...obj.data,\n                    key: index\n                }\n            });\n            this.setState({\n                postDetailData: data,\n                postListSelectedRowKeys: [rowIndex],\n                selectedPostAuthor: data.author,\n                userPostData\n            })\n        });\n    }\n\n    updateRowKeys = (selectedRowKeys, type) => {\n        this.setState({ [type]: selectedRowKeys })\n    }\n\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm()\n        // console.log(\"selectedKeys\", selectedKeys)\n        // console.log(\"dataIndex\", dataIndex)\n        this.setState({\n            searchText: selectedKeys[0],\n            // searchedColumn: dataIndex\n        })\n    }\n\n    getColumnSearchProps = (dataIndex) => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n              <Input\n                ref={node => {\n                  this.searchInput = node;\n                }}\n                placeholder={`Search ${dataIndex}`}\n                value={selectedKeys[0]}\n                onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                // onPressEnter={() => { console.log(\"selectedKeys\", selectedKeys)}}\n                style={{ width: 188, marginBottom: 8, display: 'block' }}\n              />\n              <Button\n                type=\"primary\"\n                onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                // onClick={() => { console.log(\"selectedKeys\", selectedKeys)}}\n                // icon={<SearchOutlined />}\n                size=\"small\"\n                style={{ width: 90, marginRight: 8 }}\n              >\n                Search\n              </Button>\n              <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                Reset\n              </Button>\n            </div>\n          ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n        this.state.searchedColumn === dataIndex ? (\n            <Highlighter\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n            searchWords={[this.state.searchText]}\n            autoEscape\n            textToHighlight={text.toString()}\n            />\n        ) : (\n            text\n        ),\n    })\n\n    handleReset = (clearFilters) => {\n        clearFilters()\n        this.setState({\n            searchText: ''\n        })\n    }\n\n    render() {\n        const {\n            subredditListData,\n            subredditListSelectedRowKeys,\n            postListData,\n            postListSelectedRowKeys,\n            selectedPostAuthor,\n            postDetailData,\n            url,\n            userPostData\n        } = this.state\n\n        const commonProps = {\n            handleUpdateRowKeys: this.updateRowKeys,\n            url: url,\n        }\n\n        const subredditListProps = {\n            ...commonProps,\n            handleUpdateUrl: this.updateUrl,\n            data: subredditListData,\n            selectedRowKeys: subredditListSelectedRowKeys,\n            handleGetColumnSearchProps: this.getColumnSearchProps\n        }\n\n        const postListProps = {\n            ...commonProps,\n            handleUpdatePostData: this.updatePostData,\n            data: postListData,\n            author: selectedPostAuthor,\n            selectedRowKeys: postListSelectedRowKeys\n        }\n\n        return (\n            <Layout>\n                <Header> RedditBrowser </Header>\n                <Row className=\"contenWrap\">\n                    <Col xs={24} sm={24} md={11} lg={6} xl={6} className=\"subredditList\">\n                        <SubredditList {...subredditListProps} />\n                    </Col>\n                    <Col xs={24} sm={24} md={11} lg={6} xl={6} className=\"postList\">\n                        <PostList {...postListProps} />\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={10} xl={10} className=\"postDetails\">\n                        <PostDetails data={postDetailData} userPostData={userPostData}/>\n                    </Col>\n                </Row>\n                <Footer>RedditBrowser for Service Channel @ Lin Zhang</Footer>\n            </Layout>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}