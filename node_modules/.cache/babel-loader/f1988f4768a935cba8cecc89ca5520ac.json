{"ast":null,"code":"var ClassicalBinarySearch={id:'0004',name:'Classical Binary Search',refLink:['https://www.lintcode.com/problem/classical-binary-search/'],level:'Easy',tag:['Binary Search'],notes:\"\",jsSolution:\"\\n        // Binary search is a famous question in algorithm.\\n\\n        // For a given sorted array (ascending order) and a target number, \\n        // find the first index of this number in O(log n) time complexity.\\n        \\n        // If the target number does not exist in the array, return -1.\\n        \\n        // Example\\n        // If the array is [1, 2, 3, 3, 4, 5, 10], for given target 3, return 2.\\n\\n        function findPosition(nums, target) {\\n            if(!nums || !nums.length) return -1\\n            let start = 0\\n            let end = nums.length - 1\\n\\n            // while loop to only reduce the range, \\n            // check the value outside the while loop later\\n\\n            while(start + 1 < end){\\n                let mid = Math.floor((start + end)/2)\\n                if(nums[mid] === target){\\n                    return mid\\n                } else if (nums[mid] < target){\\n                    start = mid + 1\\n                } else if (nums[mid] > target){\\n                    end = mid - 1\\n                }\\n          \\n            }\\n          \\n            if(nums[start] === target){\\n              return start\\n            }\\n            if(nums[end] === target){\\n              return end\\n            }\\n            return -1\\n        }\\n    \"};export default ClassicalBinarySearch;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Binary_Search/ClassicalBinarySearch.js"],"names":["ClassicalBinarySearch","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,qBAAqB,CAAG,CAC1BC,EAAE,CAAE,MADsB,CAE1BC,IAAI,CAAE,yBAFoB,CAG1BC,OAAO,CAAE,CACL,2DADK,CAHiB,CAM1BC,KAAK,CAAE,MANmB,CAO1BC,GAAG,CAAE,CACD,eADC,CAPqB,CAU1BC,KAAK,GAVqB,CAW1BC,UAAU,ixCAXgB,CAA9B,CAqDA,cAAeP,CAAAA,qBAAf","sourcesContent":["const ClassicalBinarySearch = {\n    id: '0004',\n    name: 'Classical Binary Search',\n    refLink: [\n        'https://www.lintcode.com/problem/classical-binary-search/'\n    ],\n    level: 'Easy',\n    tag: [\n        'Binary Search',\n    ],\n    notes: ``,\n    jsSolution: `\n        // Binary search is a famous question in algorithm.\n\n        // For a given sorted array (ascending order) and a target number, \n        // find the first index of this number in O(log n) time complexity.\n        \n        // If the target number does not exist in the array, return -1.\n        \n        // Example\n        // If the array is [1, 2, 3, 3, 4, 5, 10], for given target 3, return 2.\n\n        function findPosition(nums, target) {\n            if(!nums || !nums.length) return -1\n            let start = 0\n            let end = nums.length - 1\n\n            // while loop to only reduce the range, \n            // check the value outside the while loop later\n\n            while(start + 1 < end){\n                let mid = Math.floor((start + end)/2)\n                if(nums[mid] === target){\n                    return mid\n                } else if (nums[mid] < target){\n                    start = mid + 1\n                } else if (nums[mid] > target){\n                    end = mid - 1\n                }\n          \n            }\n          \n            if(nums[start] === target){\n              return start\n            }\n            if(nums[end] === target){\n              return end\n            }\n            return -1\n        }\n    `,\n}\n\nexport default ClassicalBinarySearch"]},"metadata":{},"sourceType":"module"}