{"ast":null,"code":"const reducers = {\n  todos(state, action) {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case 'set':\n        return payload;\n\n      case 'add':\n        return [...state, payload];\n\n      case 'remove':\n        return state.filter(todo => {\n          return todo.id !== payload;\n        });\n\n      case 'toggle':\n        return state.map(todo => {\n          return todo.id === payload ? { ...todo,\n            complete: !todo.complete\n          } : todo;\n        });\n\n      default:\n        return state;\n    } // return state\n\n  },\n\n  incrementCount(state, action) {\n    const {\n      type\n    } = action;\n\n    switch (type) {\n      case 'set':\n      case 'add':\n        return state + 1;\n\n      default:\n        return state;\n    }\n  }\n\n};\n\nfunction combinReducers(reducers) {\n  return function reducer(state, action) {\n    const changed = {};\n\n    for (let key in reducers) {\n      changed[key] = reducers[key](state[key], action);\n    }\n\n    return { ...state,\n      ...changed\n    };\n  };\n}\n\nexport default combinReducers(reducers);","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/react/TodoList/pages/reducers.js"],"names":["reducers","todos","state","action","type","payload","filter","todo","id","map","complete","incrementCount","combinReducers","reducer","changed","key"],"mappings":"AAAA,MAAMA,QAAQ,GAAG;AACfC,EAAAA,KAAK,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACnB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmBF,MAAzB;;AACA,YAAOC,IAAP;AACE,WAAK,KAAL;AACE,eAAOC,OAAP;;AACF,WAAK,KAAL;AACE,eAAO,CAAC,GAAGH,KAAJ,EAAWG,OAAX,CAAP;;AACF,WAAK,QAAL;AACE,eAAOH,KAAK,CAACI,MAAN,CAAaC,IAAI,IAAI;AAC1B,iBAAOA,IAAI,CAACC,EAAL,KAAYH,OAAnB;AACD,SAFM,CAAP;;AAGF,WAAK,QAAL;AACE,eAAOH,KAAK,CAACO,GAAN,CAAUF,IAAI,IAAI;AACvB,iBAAOA,IAAI,CAACC,EAAL,KAAYH,OAAZ,GAEH,EACE,GAAGE,IADL;AAEEG,YAAAA,QAAQ,EAAE,CAACH,IAAI,CAACG;AAFlB,WAFG,GAMHH,IANJ;AAOD,SARM,CAAP;;AASF;AACE,eAAOL,KAAP;AApBJ,KAFmB,CAwBnB;;AACD,GA1Bc;;AA2BfS,EAAAA,cAAc,CAACT,KAAD,EAAQC,MAAR,EAAgB;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAWD,MAAjB;;AACA,YAAOC,IAAP;AACE,WAAK,KAAL;AACA,WAAK,KAAL;AACE,eAAOF,KAAK,GAAG,CAAf;;AACF;AACE,eAAOA,KAAP;AALJ;AAOD;;AApCc,CAAjB;;AAuCA,SAASU,cAAT,CAAwBZ,QAAxB,EAAkC;AAC9B,SAAO,SAASa,OAAT,CAAiBX,KAAjB,EAAwBC,MAAxB,EAAgC;AACrC,UAAMW,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,GAAT,IAAgBf,QAAhB,EAA0B;AACxBc,MAAAA,OAAO,CAACC,GAAD,CAAP,GAAef,QAAQ,CAACe,GAAD,CAAR,CAAcb,KAAK,CAACa,GAAD,CAAnB,EAA0BZ,MAA1B,CAAf;AACD;;AAED,WAAO,EACL,GAAGD,KADE;AAEL,SAAGY;AAFE,KAAP;AAKD,GAXD;AAYH;;AAED,eAAeF,cAAc,CAACZ,QAAD,CAA7B","sourcesContent":["const reducers = {\n  todos(state, action) {\n    const { type, payload} = action\n    switch(type) {\n      case 'set':\n        return payload\n      case 'add':\n        return [...state, payload]\n      case 'remove':\n        return state.filter(todo => {\n          return todo.id !== payload\n        })\n      case 'toggle':\n        return state.map(todo => {\n          return todo.id === payload\n            ? \n              {\n                ...todo,\n                complete: !todo.complete,\n              }\n            : todo\n        });\n      default:\n        return state\n    }\n    // return state\n  },\n  incrementCount(state, action) {\n    const { type } = action\n    switch(type) {\n      case 'set':\n      case 'add':\n        return state + 1\n      default:\n        return state\n    }\n  }\n}\n\nfunction combinReducers(reducers) {\n    return function reducer(state, action) {\n      const changed = {}\n      for (let key in reducers) {\n        changed[key] = reducers[key](state[key], action)\n      }\n  \n      return {\n        ...state,\n        ...changed\n      }\n  \n    }\n}\n\nexport default combinReducers(reducers)"]},"metadata":{},"sourceType":"module"}