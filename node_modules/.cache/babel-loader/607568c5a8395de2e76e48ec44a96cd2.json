{"ast":null,"code":"const Sort_Colors = {\n  id: '0059',\n  name: 'Sort_Colors',\n  refLink: ['https://www.lintcode.com/problem/sort-colors/description', 'https://www.jiuzhang.com/solution/sort-colors/#tag-highlight-lang-javascript', 'https://leetcode-cn.com/problems/sort-colors/solution/75-yan-se-fen-lei-by-alexer-660/'],\n  level: 'Hard',\n  tag: [],\n  notes: ``,\n  jsSolution: `\n        // Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, \n        // with the colors in the order red, white and blue.\n\n        // Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n\n        // 在线评测地址: https://www.lintcode.com/problem/sort-colors/\n        \n        const sortColors = function (nums) {\n            if (nums === null || nums.length <= 1) {\n                return;\n            }\n            var pl = 0;\n            var pr = nums.length - 1;\n            var i = 0;\n            var tmp;\n            while (i <= pr) {\n                if (nums[i] === 0) {\n                    tmp = nums[i];\n                    nums[i] = nums[pl];\n                    nums[pl] = tmp;\n                    pl++;\n                    i++;\n                } else if(nums[i] === 1) {\n                    i++;\n                } else {\n                    tmp = nums[i];\n                    nums[i] = nums[pr];\n                    nums[pr] = tmp;\n                    pr--;\n                }\n            }\n        }\n\n        解法一：计数排序\n        思路完全同 - 经典排序算法讲解 - 计数排序\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let countSort = (arr,maxVal) => {\n                let bucketLen = maxVal + 1;\n                let bucket = new Array(bucketLen).fill(0);\n                let sortedI = 0;\n                let arrLen = arr.length;\n                for(let i = 0;i < arrLen;i++){\n                    bucket[arr[i]]++;\n                }\n                for(let j = 0;j < bucketLen;j++){\n                    while(bucket[j] > 0){\n                        arr[sortedI++] = j;\n                        bucket[j]--;\n                    }\n                }\n                return arr;\n            }\n            return countSort(nums,2);\n        };\n        解法二：两路替换\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let n = nums.length;\n            for(let i = 0;i < n;i++){\n                if(nums[i] === 0){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                }\n            }\n            let right = n - 1;\n            for(let i = right;i >= left;i--){\n                if(nums[i] === 2){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n            }\n        };\n        解法三：一次遍历\n        解法二的 while 版\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let right = nums.length - 1;\n            let i = 0;\n            while(i <= right){\n                if(nums[i] === 0){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                    i++;\n                }\n                else if(nums[i] === 2){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n                else {\n                    i++;\n                }\n            }\n        };\n        或者这样写也可\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let right = nums.length - 1;\n            let i = 0;\n            while(i <= right){\n                while(nums[i] == 2 && i < right){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n                while(nums[i] == 0 && i > left){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                }\n                i++;\n            }\n        };\n    `\n};\nexport default Sort_Colors;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Two_Pointers/Sort_Colors.js"],"names":["Sort_Colors","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,MADY;AAEhBC,EAAAA,IAAI,EAAE,aAFU;AAGhBC,EAAAA,OAAO,EAAE,CACL,0DADK,EAEL,8EAFK,EAGL,wFAHK,CAHO;AAQhBC,EAAAA,KAAK,EAAE,MARS;AAShBC,EAAAA,GAAG,EAAE,EATW;AAUhBC,EAAAA,KAAK,EAAG,EAVQ;AAWhBC,EAAAA,UAAU,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXG,CAApB;AA6IA,eAAeP,WAAf","sourcesContent":["const Sort_Colors = {\n    id: '0059',\n    name: 'Sort_Colors',  \n    refLink: [\n        'https://www.lintcode.com/problem/sort-colors/description',\n        'https://www.jiuzhang.com/solution/sort-colors/#tag-highlight-lang-javascript',\n        'https://leetcode-cn.com/problems/sort-colors/solution/75-yan-se-fen-lei-by-alexer-660/'\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, \n        // with the colors in the order red, white and blue.\n\n        // Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n\n        // 在线评测地址: https://www.lintcode.com/problem/sort-colors/\n        \n        const sortColors = function (nums) {\n            if (nums === null || nums.length <= 1) {\n                return;\n            }\n            var pl = 0;\n            var pr = nums.length - 1;\n            var i = 0;\n            var tmp;\n            while (i <= pr) {\n                if (nums[i] === 0) {\n                    tmp = nums[i];\n                    nums[i] = nums[pl];\n                    nums[pl] = tmp;\n                    pl++;\n                    i++;\n                } else if(nums[i] === 1) {\n                    i++;\n                } else {\n                    tmp = nums[i];\n                    nums[i] = nums[pr];\n                    nums[pr] = tmp;\n                    pr--;\n                }\n            }\n        }\n\n        解法一：计数排序\n        思路完全同 - 经典排序算法讲解 - 计数排序\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let countSort = (arr,maxVal) => {\n                let bucketLen = maxVal + 1;\n                let bucket = new Array(bucketLen).fill(0);\n                let sortedI = 0;\n                let arrLen = arr.length;\n                for(let i = 0;i < arrLen;i++){\n                    bucket[arr[i]]++;\n                }\n                for(let j = 0;j < bucketLen;j++){\n                    while(bucket[j] > 0){\n                        arr[sortedI++] = j;\n                        bucket[j]--;\n                    }\n                }\n                return arr;\n            }\n            return countSort(nums,2);\n        };\n        解法二：两路替换\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let n = nums.length;\n            for(let i = 0;i < n;i++){\n                if(nums[i] === 0){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                }\n            }\n            let right = n - 1;\n            for(let i = right;i >= left;i--){\n                if(nums[i] === 2){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n            }\n        };\n        解法三：一次遍历\n        解法二的 while 版\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let right = nums.length - 1;\n            let i = 0;\n            while(i <= right){\n                if(nums[i] === 0){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                    i++;\n                }\n                else if(nums[i] === 2){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n                else {\n                    i++;\n                }\n            }\n        };\n        或者这样写也可\n        /**\n         * @param {number[]} nums\n         * @return {void} Do not return anything, modify nums in-place instead.\n         */\n        var sortColors = function(nums) {\n            let left = 0;\n            let right = nums.length - 1;\n            let i = 0;\n            while(i <= right){\n                while(nums[i] == 2 && i < right){\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\n                    right--;\n                }\n                while(nums[i] == 0 && i > left){\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\n                    left++;\n                }\n                i++;\n            }\n        };\n    `\n}\n\nexport default Sort_Colors\n"]},"metadata":{},"sourceType":"module"}