{"ast":null,"code":"var _3Sum={id:'0054',name:'_3Sum',refLink:['https://www.lintcode.com/problem/3sum/description','https://www.jiuzhang.com/solution/3sum/#tag-highlight','https://leetcode-cn.com/problems/3sum/solution/three-sum-ti-jie-by-wonderful611/'],level:'Hard',tag:[],notes:\"\",jsSolution:\"\\n        // Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\\n\\n        // \\u5728\\u7EBF\\u8BC4\\u6D4B\\u5730\\u5740: https://www.lintcode.com/problem/3sum/\\n        \\n        \\u70ED\\u8EAB\\n        \\u9996\\u5148\\uFF0C\\u5148\\u627E\\u4E00\\u4E0B\\u5B83\\u7684\\u7B80\\u5316\\u7248 2sum \\u6765\\u70ED\\u70ED\\u8EAB\\u3002\\n\\n        \\u6700\\u7B80\\u5355\\u7684\\u60F3\\u6CD5\\u5C31\\u662F\\u628A\\u6BCF\\u4E24\\u4E2A\\u90FD\\u62FF\\u51FA\\u6765\\u52A0\\u4E00\\u4E0B\\uFF0C\\u770B\\u770B\\u7ED3\\u679C\\u662F\\u4E0D\\u662F\\u6211\\u4EEC\\u60F3\\u8981\\u7684\\u3002\\u4F46\\u662F\\u76F4\\u89C9\\u544A\\u8BC9\\u6211\\u4EEC\\uFF0C\\u8FD9\\u6837\\u5B50\\u5E76\\u4E0D\\u9AD8\\u6548\\u3002\\u4E3E\\u4E00\\u4E2A\\u5F88\\u5B9E\\u9645\\u7684\\u4F8B\\u5B50\\u5C31\\u80FD\\u660E\\u767D\\u3002\\n\\n        \\u6BD4\\u5982\\u8FD9\\u4E2A\\u5468\\u672B\\u4F60\\u53BB\\u53C2\\u52A0\\u7EBF\\u4E0B\\u76F8\\u4EB2\\u4F1A\\uFF0C\\u5168\\u573A\\u6709\\u4E14\\u53EA\\u6709\\u4E24\\u4E2A\\u4EBA\\u624D\\u662F\\u771F\\u7231\\u3002\\u4E8E\\u662F\\u6211\\u4EEC\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u8981\\u53BB\\u627E\\u5176\\u4ED6\\u6240\\u6709\\u4EBA\\u804A\\u5929\\uFF0C\\u53BB\\u5BFB\\u627E ta \\u662F\\u4E0D\\u662F\\u81EA\\u5DF1\\u8981\\u627E\\u7684\\u53E6\\u4E00\\u534A\\u3002\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u8981\\u548C\\u6BCF\\u4E2A\\u4EBA\\u8BF4\\u8BDD\\uFF0C\\u8FD9\\u6837\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u5F88\\u9AD8\\uFF0C\\u7FFB\\u8BD1\\u6210\\u8BA1\\u7B97\\u673A\\u7684\\u8868\\u793A\\u5C31\\u662F O(n2)\\u3002\\n\\n            var twoSum = function(nums, target) {\\n            for (let i = 0; i < nums.length - 1; i++) { // \\u6BCF\\u4E2A\\u4EBA\\n                for (let j = i + 1; j < nums.length; j++) { // \\u90FD\\u53BB\\u95EE\\u5176\\u4ED6\\u7684\\u4EBA\\n                if (nums[i]+nums[j] === target) {\\n                    return [nums[i], nums[j]]\\n                }\\n                }\\n            }\\n            }\\n        \\u600E\\u4E48\\u6837\\u53EF\\u4EE5\\u66F4\\u9AD8\\u6548\\u4E00\\u70B9\\uFF1F\\n        \\u8FD9\\u65F6\\u5019\\u8981\\u5F15\\u5165\\u54C8\\u5E0C\\u8868\\uFF0C\\u5176\\u5B9E\\u5C31\\u662F\\u4E00\\u4E2A\\u767B\\u8BB0\\u518C\\uFF0C\\u5199\\u4E0A\\u4F60\\u7684\\u540D\\u5B57\\u548C\\u4F60\\u7684\\u8981\\u6C42\\u3002\\u5982\\u679C\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u63D0\\u524D\\u5728\\u4E3B\\u6301\\u4EBA\\u90A3\\u91CC\\u767B\\u8BB0\\u4E00\\u904D\\uFF0C\\u7136\\u540E\\u53EA\\u8981\\u5927\\u5BB6\\u4F9D\\u6B21\\u518D\\u62A5\\u51FA\\u81EA\\u5DF1\\u540D\\u5B57\\uFF0C\\u4E3B\\u6301\\u4EBA\\u5C31\\u80FD\\u591F\\u8BC6\\u522B\\u5230\\uFF0Cta \\u5C31\\u662F\\u4F60\\u8981\\u627E\\u7684\\u4EBA\\u3002\\n\\n        var twoSum = function(nums, target) {\\n            let res = {}\\n            for (let i = 0; i < nums.length; i++) { // \\u6BCF\\u4E2A\\u4EBA\\u767B\\u8BB0\\u81EA\\u5DF1\\u60F3\\u8981\\u914D\\u5BF9\\u7684\\u4EBA\\uFF0C\\u8BA9\\u4E3B\\u6301\\u4EBA\\u8BB0\\u4F4F\\n                res[target - nums[i]] = nums[i]\\n            }\\n            for (let j = 0; j < nums.length; j++) { // \\u6BCF\\u4E2A\\u4EBA\\u518D\\u6B21\\u62A5\\u6570\\u7684\\u65F6\\u5019\\uFF0C\\u4E3B\\u6301\\u4EBA\\u770B\\u4E00\\u4E0B\\u540D\\u5355\\u91CC\\u6709\\u6CA1\\u6709\\u4ED6\\n                if (res[nums[j]] !== undefined) {\\n                return [nums[j], res[nums[j]]]\\n                }\\n            }\\n            }\\n        \\u5F88\\u5BB9\\u6613\\u770B\\u51FA\\u6765\\uFF0C\\u4E0A\\u9762\\u7684\\u65B9\\u6848\\u4ECD\\u7136\\u53EF\\u4EE5\\u4F18\\u5316\\u3002\\u5C31\\u662F\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u6765\\u95EE\\u4E00\\u4E0B\\u4E3B\\u6301\\u4EBA\\uFF0C\\u81EA\\u5DF1\\u8981\\u627E\\u7684\\u4EBA\\u6709\\u6CA1\\u6709\\u6765\\u767B\\u8BB0\\u8FC7\\uFF0C\\u5982\\u679C\\u6CA1\\u6709\\u7684\\u8BDD\\uFF0C\\u5C31\\u628A\\u81EA\\u5DF1\\u7684\\u8981\\u6C42\\u5199\\u4E0B\\u6765\\uFF0C\\u7B49\\u7740\\u522B\\u4EBA\\u6765\\u627E\\u81EA\\u5DF1\\u3002\\n\\n        var twoSum = function(nums, target) {\\n            let res = {}\\n            for (let i = 0; i < nums.length; i++) { // \\u6BCF\\u4E2A\\u4EBA\\u62A5\\u51FA\\u81EA\\u5DF1\\u60F3\\u8981\\u914D\\u5BF9\\u7684\\u4EBA\\n                if (res[nums[i]] !== undefined) { // \\u5982\\u679C\\u6709\\u4EBA\\u88AB\\u767B\\u8BB0\\u8FC7\\n                return [nums[i], res[nums[i]]] // \\u5C31\\u662F\\u4ED6\\n                } else {  // \\u5426\\u5219\\n                res[target - nums[i]] = nums[i] // \\u4E3B\\u6301\\u4EBA\\u8BB0\\u4F4F\\u4ED6\\u7684\\u9700\\u6C42\\n                }\\n            }\\n            }\\n        2sum \\u95EE\\u9898\\u6700\\u574F\\u7684\\u60C5\\u51B5\\u662F\\uFF0C\\u7B2C\\u4E00\\u4E2A\\u4EBA\\u548C\\u6700\\u540E\\u4E00\\u4E2A\\u4EBA\\u914D\\u5BF9\\uFF0C\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u53D1\\u4E86\\u4E00\\u6B21\\u8A00\\u3002\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u662F O(n)\\uFF0C\\u7A7A\\u95F4\\u590D\\u6742\\u5EA6\\u4E5F\\u662F O(n)\\uFF0C\\u56E0\\u4E3A\\u4E3B\\u6301\\u4EBA\\u8981\\u7528\\u5C0F\\u672C\\u672C\\u8BB0\\u5F55\\u4E0B\\u6BCF\\u4E2A\\u4EBA\\u7684\\u53D1\\u8A00\\uFF0C\\u6700\\u574F\\u7684\\u65F6\\u5019\\uFF0C\\u8981\\u628A\\u6240\\u6709\\u4EBA\\u7684\\u8BC9\\u6C42\\u90FD\\u8BB0\\u4E00\\u904D\\u3002\\n\\n        \\u4ECE\\u751F\\u6D3B\\u7ECF\\u9A8C\\u4E2D\\u6211\\u4EEC\\u80FD\\u611F\\u89C9\\u5230\\u4EC0\\u4E48\\u65B9\\u6848\\u662F\\u6700\\u597D\\u7684\\uFF0C\\u800C\\u4E14\\u4E5F\\u80FD\\u591F\\u77E5\\u9053\\uFF0C\\u4EC0\\u4E48\\u7B97\\u6CD5\\u5DF2\\u7ECF\\u5230\\u8FBE\\u4E86\\u4F18\\u5316\\u7684\\u6781\\u9650\\u3002\\u8FD9\\u5C31\\u662F\\u6240\\u8C13\\u7684\\u201D\\u53EA\\u4F7F\\u7528\\u4EBA\\u7C7B\\u7684\\u806A\\u660E\\u624D\\u667A\\u201C\\u5C31\\u53EF\\u4EE5\\u505A\\u51FA\\u6765\\u3002\\n\\n        \\u5F53\\u7136\\uFF0C \\u5982\\u679C\\u6CA1\\u6709\\u7F16\\u7A0B\\u7684\\u57FA\\u7840\\uFF0C\\u53EF\\u80FD\\u4E0D\\u4F1A\\u60F3\\u5230\\u54C8\\u5E0C\\u8868-\\u767B\\u8BB0\\u518C\\u8FD9\\u6837\\u7684\\u7C7B\\u6BD4\\uFF0C\\u4F46\\u8FD9\\u5E94\\u8BE5\\u53EA\\u5F71\\u54CD\\u628A\\u89E3\\u51B3\\u65B9\\u6848\\u8F6C\\u5316\\u4E3A\\u4EE3\\u7801\\u8868\\u8FBE\\u3002\\u60F3\\u5230\\u89E3\\u51B3\\u65B9\\u6848\\u8FD9\\u4EF6\\u4E8B\\uFF0C\\u5176\\u5B9E\\u662F\\u5B8C\\u5168\\u4E0D\\u4F9D\\u8D56\\u7F16\\u7801\\u80FD\\u529B\\u7684\\u3002\\n\\n        \\u9762\\u8BD5\\u5F88\\u591A\\u5E74\\u8F7B\\u524D\\u7AEF\\u540C\\u5B66\\u7684\\u65F6\\u5019\\uFF0C\\u4ED6\\u4EEC\\u4F1A\\u4E00\\u4E0A\\u6765\\u5C31\\u76F4\\u63A5\\u5F00\\u59CB\\u5199\\u4EE3\\u7801\\uFF0C\\u7136\\u540E\\u628A\\u8349\\u7EB8\\u5199\\u5F97\\u4E00\\u56E2\\u7CDF\\u3002\\u6211\\u90FD\\u4F1A\\u7ED9\\u4ED6\\u4EEC\\u8BB2\\uFF0C\\u8981\\u628A\\u7B97\\u6CD5\\u548C\\u7F16\\u7801\\u5206\\u5F00\\u6765\\u770B\\uFF0C\\u4F60\\u53EF\\u4EE5\\u7528\\u4F2A\\u4EE3\\u7801\\uFF0C\\u753B\\u56FE\\uFF0C\\u751A\\u81F3\\u6446\\u5F04\\u5C0F\\u9053\\u5177\\u7684\\u65B9\\u6CD5\\u53BB\\u5BFB\\u6C42\\u89E3\\u6CD5\\u3002\\u6709\\u4E86\\u660E\\u786E\\u7684\\u89E3\\u6CD5\\uFF0C\\u518D\\u8F6C\\u5316\\u6210\\u53EF\\u6267\\u884C\\u7684\\u4EE3\\u7801\\uFF0C\\u5C31\\u662F\\u6C34\\u5230\\u6E20\\u6210\\u7684\\u4E8B\\u60C5\\u4E86\\u3002\\n\\n        three sum\\n        \\u597D\\u7684\\uFF0C\\u70ED\\u8EAB\\u7ED3\\u675F\\uFF0C\\u73B0\\u5728\\u6765\\u770B 3sum \\u95EE\\u9898\\u3002\\u8FD9\\u4E2A\\u95EE\\u9898\\u590D\\u6742\\u4E86\\u4E00\\u4E9B\\uFF0C\\u53D8\\u6210\\u4E86\\u4E00\\u4E2A\\u4EBA\\u627E\\u4E24\\u4E2A\\u4EBA\\u3002\\n\\n        \\u4E00\\u4E2A\\u65B0\\u7684\\u5468\\u672B\\uFF0C\\u4F60\\u518D\\u6B21\\u53BB\\u73B0\\u5728\\u53C2\\u52A0\\u4E86\\u4E00\\u4E2A\\uFF0C\\u989D\\uFF0C\\u8FD9\\u6B21\\u4E0D\\u662F\\u76F8\\u4EB2\\u4F1A\\uFF0C\\u662F\\u53C2\\u52A0\\u4E00\\u4E2A\\u8857\\u7BEE\\u6BD4\\u8D5B\\uFF0C\\u8D5B\\u524D\\u5F53\\u7136\\u8981\\u7EC4\\u961F\\u5566\\uFF0C\\u73B0\\u5728\\u8981\\u60F3\\u4E00\\u4E2A\\u65B9\\u6CD5\\u627E\\u5230\\u961F\\u53CB\\u3002\\u7EC4\\u961F\\u8FD8\\u6709\\u4E00\\u4E2A\\u8981\\u6C42\\uFF0C\\u5C31\\u662F\\u961F\\u4F0D\\u7684\\u5E73\\u5747\\u5B9E\\u529B\\u8981\\u7B26\\u5408\\u8981\\u6C42\\uFF0C\\u6BD4\\u5982\\u83DC\\u9E1F\\u62B1\\u4E24\\u4E2A\\u5927\\u817F\\uFF0C\\u6216\\u8005\\u6709\\u738B\\u8005\\u5E26\\u4E24\\u4E2A\\u5F31\\u9E21\\u3002\\n\\n        \\u6211\\u4EEC\\u5148\\u60F3\\u4E00\\u4E2A\\u4FDD\\u5E95\\u7684\\u529E\\u6CD5\\uFF0C\\u518D\\u53BB\\u6162\\u6162\\u4F18\\u5316\\u3002\\u6700\\u7B80\\u5355\\u7684\\u529E\\u6CD5\\u662F\\uFF0C\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u53BB\\u4F9D\\u6B21\\u62C9\\u4E0A\\u53E6\\u4E00\\u4E2A\\u4EBA\\u4E00\\u8D77\\u53BB\\u627E\\u7B2C\\u4E09\\u4E2A\\u4EBA\\uFF0C\\u8FD9\\u4E2A\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u662F O(n3)O(n3)\\u3002\\n\\n            var threeSum = function(nums) {\\n            let res = []\\n            for (let i = 0; i < nums.length - 2; i++) { // \\u6BCF\\u4E2A\\u4EBA\\n                for (let j = i + 1; j < nums.length - 1; j++) { // \\u4F9D\\u6B21\\u62C9\\u4E0A\\u5176\\u4ED6\\u6BCF\\u4E2A\\u4EBA\\n                for (let k = j + 1; k < nums.length; k++) { // \\u53BB\\u95EE\\u5269\\u4E0B\\u7684\\u6BCF\\u4E2A\\u4EBA\\n                    if (nums[i] + nums[j] + nums[k] === 0) { // \\u6211\\u4EEC\\u662F\\u4E0D\\u662F\\u53EF\\u4EE5\\u4E00\\u8D77\\u7EC4\\u961F\\n                    res.push([nums[i], nums[j], nums[k]])\\n                    }\\n                }\\n                }\\n            }\\n            return res\\n            }\\n        \\u53D7\\u5230\\u4E0A\\u9898\\u7684\\u542F\\u53D1\\uFF0C\\u5728\\u51D1\\u9F50\\u4E24\\u4EBA\\u4EE5\\u540E\\uFF0C\\u4ED6\\u4EEC\\u53EF\\u4EE5\\u627E\\u4E3B\\u6301\\u4EBA\\u767B\\u8BB0\\u9700\\u6C42\\u7684\\u7B2C\\u4E09\\u4EBA\\uFF0C\\u800C\\u4E0D\\u9700\\u8981\\u5728\\u832B\\u832B\\u4EBA\\u6D77\\u4E2D\\u53BB\\u627E\\u961F\\u53CB\\u3002\\u8FD9\\u6837\\uFF0C\\u6211\\u4EEC\\u5C31\\u628A\\u95EE\\u9898\\u4F18\\u5316\\u6210\\u4E86\\u6BCF\\u4E2A\\u4EBA\\u90FD\\u8981\\u627E\\u5176\\u4ED6\\u6BCF\\u4E2A\\u4EBA\\uFF0C\\u5373\\u65F6\\u95F4\\u590D\\u6742\\u5EA6 O(n2)O(n2)\\uFF0C\\u56E0\\u4E3A\\u9700\\u8981\\u4E3B\\u6301\\u4EBA\\u8BB0\\u5F55\\u6570\\u636E\\uFF0C\\u8FD9\\u91CC\\u8FD8\\u6709 O(n)O(n) \\u7684\\u7A7A\\u95F4\\u590D\\u6742\\u5EA6\\u3002\\n\\n            var threeSum = function(nums) {\\n                let res = []\\n                let hash = {}\\n                for (let i = 0; i < nums.length - 2; i++) { // \\u6BCF\\u4E2A\\u4EBA\\n                for (let j = i + 1; j < nums.length - 1; j++) { // \\u4F9D\\u6B21\\u62C9\\u4E0A\\u5176\\u4ED6\\u6BCF\\u4E2A\\u4EBA\\n                    if (hash[nums[j]] !== undefined) { // \\u5DF2\\u7ECF\\u6709\\u5408\\u9002\\u81EA\\u5DF1\\u7684\\u4E24\\u4EBA\\u7EC4\\n                    res.push([nums[j]].concat(hash[nums[j]]))\\n                    hash[nums[j]] = undefined\\n                    } else { // \\u6CA1\\u6709\\u5408\\u9002\\u81EA\\u5DF1\\u7684\\u4E24\\u4EBA\\u7EC4\\n                    let mark = 0 - nums[i] - nums[j]\\n                    hash[mark] = [nums[i], nums[j]]\\n                    }\\n                }\\n                }\\n                return res\\n            } // \\u793A\\u610F\\u4EE3\\u7801 \\u672AAC\\n        \\u518D\\u4F18\\u5316\\n        \\u73B0\\u5728\\u5DF2\\u7ECF\\u60F3\\u5230\\u4E86\\u53EF\\u7528\\u7684\\u901A\\u7528\\u65B9\\u6848\\uFF0C\\u6839\\u636E\\u9898\\u76EE\\u7684\\u7279\\u70B9\\uFF0C\\u770B\\u770B\\u8FD8\\u6709\\u54EA\\u91CC\\u53EF\\u4EE5\\u505A\\u4E00\\u4E9B\\u4F18\\u5316\\u3002\\u6BD4\\u5982\\u63D0\\u524D\\u7ED3\\u675F\\u4E00\\u4E9B\\u4E0D\\u53EF\\u80FD\\u7684\\u7EC4\\u5408\\u3002\\n\\n        \\u9996\\u5148\\u5B89\\u6392\\u6240\\u6709\\u4EBA\\u6309\\u7167\\u987A\\u5E8F\\u6392\\u961F\\u7AD9\\u597D\\uFF0C\\u8FD9\\u662F\\u4E00\\u4E2A\\u9700\\u8981\\u82B1\\u65F6\\u95F4\\u7684\\u64CD\\u4F5C\\uFF0C\\u4E0D\\u8FC7\\u78E8\\u5200\\u4E0D\\u8BEF\\u780D\\u67F4\\u5DE5\\uFF0C\\u4ED8\\u51FA\\u8FD9\\u4E2A\\u65F6\\u95F4\\u8FD8\\u662F\\u503C\\u5F97\\u7684\\u3002\\u6392\\u5E8F\\u53EF\\u4EE5\\u505A\\u5230 O(nlogn)O(nlogn)\\uFF0C\\u8FD9\\u662F\\u4F18\\u4E8E O(n^2)O(n \\n        2\\n        ) \\u7684\\u3002\\n\\n        \\u7136\\u540E\\u6211\\u4EEC\\u9009\\u62E9\\u4E00\\u4E2A\\u4EBA\\u505AC\\u4F4D\\uFF0C\\u65E2\\u7136\\u662FC\\u4F4D\\uFF0C\\u90A3\\u4E48\\u5C31\\u9700\\u8981\\u5DE6\\u53F3\\u5404\\u6709\\u4E00\\u4E2A\\u4EBA\\u3002\\u5148\\u9009\\u62E9\\u961F\\u4F0D\\u6700\\u5DE6\\u8FB9\\uFF08\\u6700\\u5C0F\\u503C\\uFF09\\u548C\\u961F\\u4F0D\\u6700\\u53F3\\u8FB9\\uFF08\\u6700\\u5927\\u503C\\uFF09\\u4E24\\u4E2A\\u4EBA\\uFF0C\\u52A0\\u4E0A\\u4F60\\uFF0C\\u7B97\\u4E00\\u4E0B\\u603B\\u548C\\u3002\\u5982\\u679C\\u5927\\u4E8E 0\\uFF0C\\u8BF4\\u660E\\u5B9E\\u529B\\u592A\\u5F3A\\u4E86\\uFF0C\\u5C31\\u628A\\u5C31\\u628A\\u53F3\\u4FA7\\u7684\\u4EBA\\u9009\\u8C03\\u5DE6\\u4E00\\u4F4D\\uFF0C\\u53CD\\u4E4B\\uFF0C\\u5219\\u8C03\\u6574\\u5DE6\\u8FB9\\u7684\\u4EBA\\u9009\\uFF0C\\u589E\\u5F3A\\u4E00\\u4E0B\\u5B9E\\u529B\\u3002\\u5F53\\u67D0\\u8FB9\\u9009\\u5230\\u7D27\\u6328\\u7740\\u4F60\\u7684\\u4EBA\\u7684\\u65F6\\u5019\\uFF0C\\u5C31\\u610F\\u5473\\u7740\\u7EC4\\u961F\\u7ED3\\u675F\\uFF0C\\u4EE5\\u4F60\\u4E3A C\\u4F4D\\u7684\\u6240\\u6709\\u53EF\\u80FD\\u90FD\\u5DF2\\u7ECF\\u5C1D\\u8BD5\\u5B8C\\u6BD5\\u4E86\\u3002\\n\\n            var threeSum = function (nums) {\\n            let res = []\\n            nums.sort((a, b) => a - b) // \\u5148\\u6392\\u4E2A\\u961F\\uFF0C\\u6700\\u5DE6\\u8FB9\\u662F\\u6700\\u5F31\\uFF08\\u5C0F\\uFF09\\u7684\\uFF0C\\u6700\\u53F3\\u8FB9\\u662F\\u6700\\u5F3A(\\u5927)\\u7684\\n            for (let i = 1; i < nums.length - 1; i++) { // C\\u4F4D\\u4EBA\\u9009\\n                let first = 0\\n                let last = nums.length - 1\\n                do {\\n                let result = nums[i] + nums[first] + nums[last]\\n                if (result === 0) { // \\u5982\\u679C\\u53EF\\u4EE5\\u7EC4\\u961F\\n                    res.push([nums[i], nums[first], nums[last]])\\n                }\\n                if (result <= 0 && first < i) { // \\u5B9E\\u529B\\u592A\\u5F31\\uFF0C\\u628A\\u83DC\\u9E1F\\u90A3\\u8FB9\\u53F3\\u79FB\\u4E00\\u4F4D\\n                    while (nums[first] === nums[++first]); // \\u5982\\u679C\\u76F8\\u7B49\\u5C31\\u8DF3\\u8FC7\\n                } else if (result > 0 && last > i) { // \\u5B9E\\u529B\\u592A\\u5F3A\\uFF0C\\u628A\\u5927\\u795E\\u90A3\\u8FB9\\u53F3\\u79FB\\u4E00\\u4F4D\\n                    while (nums[last] === nums[--last]);\\n                } else {\\n                    break // \\u67D0\\u4E00\\u8FB9\\u5DF2\\u7ECF\\u6CA1\\u6709\\u4EBA\\u9009\\u4E86\\n                }\\n                } while (1) { }\\n            }\\n            return res\\n            } // \\u793A\\u610F\\u4EE3\\u7801 \\u672AAC\\n        \\u4E8E\\u662F\\u6211\\u4EEC\\u5F00\\u5F00\\u5FC3\\u5FC3\\u7684\\u628A\\u89E3\\u7B54\\u53D1\\u5230\\u4E86\\u529B\\u6263\\uFF0C\\u7136\\u540E\\u5C31\\u5F97\\u5230\\u4E86\\u4E00\\u4E2A WA\\uFF08wrong answer\\uFF09\\u3002\\u56E0\\u4E3A\\u529B\\u6263\\u7684\\u6D4B\\u8BD5\\u7528\\u4F8B\\u5F80\\u5F80\\u4F1A\\u6709\\u5F88\\u591A\\u8FB9\\u754C\\u6570\\u636E\\uFF0C\\u4E0D\\u9488\\u5BF9\\u8FD9\\u4E9B\\u7279\\u6B8A\\u60C5\\u51B5\\u505A\\u8003\\u8651\\u7684\\u8BDD\\uFF0C\\u51E0\\u4E4E\\u4E00\\u5B9A\\u4F1A\\u7FFB\\u8F66\\u7684\\u3002\\n\\n        \\u9488\\u5BF9\\u7279\\u6B8A\\u7528\\u4F8B\\u4F18\\u5316\\n        \\u6211\\u4EEC\\u521A\\u521A\\u7684\\u89E3\\u6CD5\\uFF0C\\u4F1A\\u5728 [0,0,0,0] \\u8FD9\\u4E2A\\u60C5\\u51B5\\u4E0B\\u8D25\\u4E0B\\u9635\\u6765\\uFF0C\\u6B64\\u65F6\\u6709\\u4E24\\u4E2A\\u89E3\\u51B3\\u65B9\\u6848\\uFF0C\\u7B2C\\u4E00\\u79CD\\u5C31\\u662F\\u76F4\\u63A5\\u5835\\u4E0A\\u6F0F\\u6D1E\\uFF0C\\u9488\\u5BF9\\u6709\\u95EE\\u9898\\u7684\\u6D4B\\u8BD5\\u6570\\u636E\\u5728\\u4EE3\\u7801\\u4E2D\\u52A0\\u8865\\u4E01\\u3002\\u5982\\u679C\\u8FD0\\u6C14\\u597D\\u7684\\u8BDD\\uFF0C\\u53EF\\u80FD\\u4E0B\\u4E00\\u6B21\\u63D0\\u4EA4\\u5C31\\u4F1A AC \\u4E86\\u3002\\u4F46\\u662F\\u8FD9\\u79CD\\u65B9\\u6CD5\\u5728\\u7ADE\\u8D5B\\u4E2D\\u662F\\u4E0D\\u53EF\\u53D6\\u7684\\uFF0C\\u56E0\\u4E3A\\u4E00\\u6B21 WA \\u4F1A\\u6709\\u7F5A\\u65F6\\u3002\\u5728\\u5DE5\\u4F5C\\u4E2D\\u6211\\u4EEC\\u53EF\\u80FD\\u987A\\u624B\\u5C31\\u6253\\u8865\\u4E01\\u4FEE\\u4E86\\u95EE\\u9898\\uFF0C\\u7136\\u540E\\u7B49\\u5230\\u6D4B\\u8BD5\\u62A5\\u51FA\\u5176\\u4ED6\\u95EE\\u9898\\u518D\\u53BB\\u4FEE\\u3002\\u5982\\u679C\\u6D4B\\u8BD5\\u6070\\u597D\\u6CA1\\u6709\\u53D1\\u73B0\\u4EFB\\u4F55\\u95EE\\u9898\\uFF0C\\u8FD9\\u6BB5\\u4EE3\\u7801\\u5C31\\u53EF\\u4EE5\\u4E0A\\u7EBF\\u4E86\\u3002\\u4F46\\u662F\\u8FD9\\u6837\\u5E26\\u6765\\u7684\\u95EE\\u9898\\uFF0C\\u4E00\\u662F\\u5E76\\u6CA1\\u6709\\u5728\\u903B\\u8F91\\u5C42\\u9762\\u6D88\\u9664\\u67D0\\u4E00\\u7C7B\\u7279\\u6B8A\\u6570\\u636E\\u53EF\\u80FD\\u5E26\\u6765\\u7684\\u95EE\\u9898\\uFF0C\\u4E8C\\u662F\\u4EE3\\u7801\\u4F1A\\u5F88\\u4E11\\u964B\\uFF0C\\u53D8\\u5F97\\u96BE\\u4EE5\\u7EF4\\u62A4\\u3002\\n\\n        \\u6240\\u4EE5\\u66F4\\u597D\\u7684\\u505A\\u6CD5\\u662F\\uFF1A\\u4ECE\\u8FD9\\u4E2A\\u4E0D\\u901A\\u8FC7\\u7684\\u6570\\u636E\\u63D0\\u53D6\\u7279\\u5F81\\uFF0C\\u6DFB\\u52A0\\u5BF9\\u5E94\\u7279\\u5F81\\u6570\\u636E\\u7684\\u5904\\u7406\\u903B\\u8F91\\uFF0C\\u4E00\\u6B21\\u4FEE\\u590D\\u4E00\\u7C7B\\u7684\\u9519\\u8BEF\\uFF0C\\u5E76\\u4E14\\u5C3D\\u91CF\\u4FDD\\u6301\\u4EE3\\u7801\\u7684\\u6D41\\u7545\\u3002\\n\\n        \\u6B64\\u5904\\u7684\\u62A5\\u9519\\u662F\\u7531\\u91CD\\u590D\\u6570\\u636E\\u5F15\\u8D77\\u7684\\uFF0C\\u770B\\u6837\\u5B50\\u5B8C\\u5168\\u4E00\\u6837\\u7684\\u4E24\\u4E2A\\u4EBA\\u6CA1\\u5FC5\\u8981 C \\u4F4D\\u51FA\\u9053\\u4E24\\u6B21\\uFF0C\\u4F46\\u662F\\u5728\\u4E00\\u4E2A\\u961F\\u4F0D\\u4E2D\\u5176\\u5B9E\\u5B58\\u5728\\u7740\\u6709\\u4E24\\u4E2A\\u76F8\\u540C\\u503C\\u7684\\u53EF\\u80FD\\uFF0C\\u6BD4\\u5982 [-1, -1, 2] \\u8FD9\\u79CD\\u7EC4\\u5408\\u3002\\n\\n        \\u4E8E\\u662F\\u6211\\u4EEC\\u65B0\\u7684\\u95EE\\u9898\\u5C31\\u662F\\uFF1A\\u5F53\\u6709\\u591A\\u4E2A\\u76F8\\u540C\\u503C\\u7684\\u65F6\\u5019\\uFF0C\\u9009\\u8C01\\u505A C \\u4F4D\\uFF1F\\n\\n        \\u50CF\\u5728[-1, -1, 2]\\u8FD9\\u4E2A\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u7531\\u7B2C\\u4E8C\\u4E2A-1\\u505A\\u4E86 C \\u4F4D\\uFF0C\\u6211\\u4EEC\\u7528\\u4EBA\\u7C7B\\u7684\\u806A\\u660E\\u624D\\u667A\\u60F3\\u4E00\\u4E0B\\u5C31\\u5F88\\u5BB9\\u6613\\u60F3\\u660E\\u767D\\u3002\\u5982\\u679C\\u4E00\\u4E2A\\u8D1F\\u6570\\u8981\\u505A C \\u4F4D\\uFF0C\\u5B83\\u5FC5\\u987B\\u8981\\u4FDD\\u8BC1\\u961F\\u91CC\\u6709\\u4E00\\u4E2A\\u6B63\\u6570\\uFF0C\\u6240\\u4EE5\\u9009\\u62E9\\u6700\\u53F3\\u8FB9\\u7684\\u90A3\\u4E2A\\u5C31\\u53EF\\u4EE5\\u3002\\u53CD\\u8FC7\\u6765\\u770B [-2, 1, 1] \\u8FD9\\u4E2A\\u6848\\u4F8B\\uFF0C\\u4E3A\\u4E86\\u4FDD\\u8BC1\\u81F3\\u5C11\\u6709\\u4E00\\u4E2A\\u8D1F\\u6570\\uFF0C\\u6211\\u4EEC\\u9009\\u62E9\\u6700\\u5DE6\\u8FB9\\u7684\\u91CD\\u590D\\u503C\\u3002\\n\\n        \\u5BF9\\u4E8E 0 \\u8FD9\\u4E2A\\u7279\\u6B8A\\u503C\\u6765\\u8BF4\\uFF0C\\u5DE6\\u53F3\\u4E00\\u5B9A\\u662F\\u5BF9\\u79F0\\u7684\\uFF0C\\u6709\\u4E00\\u4E2A\\u6781\\u7279\\u6B8A\\u7684\\u60C5\\u51B5\\u5C31\\u662F\\u961F\\u5217\\u91CC\\u9762\\u6709\\u8D85\\u8FC7\\u4E09\\u4E2A 0\\uFF0C\\u6B64\\u65F6\\u53EA\\u6709\\u9009\\u62E9\\u4E2D\\u95F4\\u7684 0 \\u624D\\u80FD\\u4FDD\\u8BC1\\u4E0D\\u9057\\u6F0F\\u8FD9\\u79CD\\u60C5\\u51B5\\u3002\\u9664\\u6B64\\u4E4B\\u5916\\uFF0C\\u9009\\u62E9\\u54EA\\u4E2A0\\u5C45\\u4E2D\\u90FD\\u662F\\u65E0\\u6240\\u8C13\\u7684\\u3002\\n\\n        \\u91CD\\u6784\\u7B56\\u7565\\n        \\u7B49\\u7B49\\uFF0C\\u5206\\u6790\\u5230\\u8FD9\\u91CC\\uFF0C\\u597D\\u50CF\\u628A\\u4E8B\\u60C5\\u641E\\u5F97\\u8FC7\\u4E8E\\u590D\\u6742\\u4E86\\u3002\\u6211\\u4EEC\\u5728\\u9009\\u62E9\\u7B2C\\u4E00\\u4E2A\\u4EBA\\u7684\\u65F6\\u5019\\u5C31\\u5206\\u4E86\\u4E09\\u79CD\\u60C5\\u51B5\\u3002\\n        \\u91CD\\u65B0\\u601D\\u8003\\u4E00\\u4E0B\\uFF0C\\u4E00\\u5F00\\u59CB\\u9009\\u62E9 C \\u4F4D\\uFF0C\\u5B9E\\u5219\\u662F\\u4E3A\\u4E86\\u5229\\u7528\\u6709\\u5E8F\\u6570\\u7EC4\\u5FEB\\u901F\\u7B5B\\u9009\\u65B9\\u6848\\u3002\\u56E0\\u4E3A\\u8FD9\\u4E2A\\u4EBA\\u4F4D\\u4E8E\\u4E2D\\u95F4\\uFF0C\\u6240\\u4EE5\\u624D\\u4F1A\\u6709\\u590D\\u6742\\u7684\\u9009\\u53D6\\u7B56\\u7565\\u3002\\u5982\\u679C\\u7B2C\\u4E00\\u6B21\\u76F4\\u63A5\\u9009\\u62E9\\u6700\\u5DE6\\u8FB9\\u7684\\u90A3\\u4E2A\\u4EBA\\uFF0C\\u540E\\u9762\\u7684\\u7B56\\u7565\\u4F9D\\u7136\\u7C7B\\u4F3C\\uFF0C\\u4EE5\\u53CC\\u6307\\u9488\\u4ECE\\u6700\\u5927\\u6700\\u5C0F\\u4E24\\u7AEF\\u76F8\\u5411\\u800C\\u884C\\uFF0C\\u76F4\\u5230\\u76F8\\u9047\\uFF0C\\u6216\\u8005\\u5373\\u5C06\\u7B5B\\u9009\\u51FA\\u6765\\u4E09\\u4E2A\\u7B26\\u53F7\\u76F8\\u540C\\u7684\\u7ED3\\u679C\\uFF0C\\u5373\\u505C\\u6B62\\u3002\\u597D\\u50CF\\u4ECD\\u7136\\u53EF\\u4EE5\\u627E\\u5230\\u6B63\\u786E\\u7B54\\u6848\\uFF0C\\u540C\\u65F6\\u4E5F\\u6070\\u597D\\u907F\\u5F00\\u4E86\\u590D\\u6742\\u7684\\u9009 C \\u4F4D\\u60C5\\u51B5\\u3002\\n\\n        \\u6211\\u4EEC\\u53EF\\u4EE5\\u8FDB\\u4E00\\u6B65\\u628A\\u4E00\\u4E9B\\u660E\\u663E\\u51FA\\u754C\\u7684\\u6761\\u4EF6\\u52A0\\u4E0A\\u5224\\u65AD\\uFF0C\\u518D\\u4E00\\u6B21\\u526A\\u9664\\u90E8\\u5206\\u65E0\\u7528\\u5C1D\\u8BD5\\u3002\\n\\n            var threeSum = function (nums) {\\n            let res = []\\n            let length = nums.length;\\n            nums.sort((a, b) => a - b) // \\u5148\\u6392\\u4E2A\\u961F\\uFF0C\\u6700\\u5DE6\\u8FB9\\u662F\\u6700\\u5F31\\uFF08\\u5C0F\\uFF09\\u7684\\uFF0C\\u6700\\u53F3\\u8FB9\\u662F\\u6700\\u5F3A(\\u5927)\\u7684\\n            if (nums[0] <= 0 && nums[length - 1] >= 0) { // \\u4F18\\u53161: \\u6574\\u4E2A\\u6570\\u7EC4\\u540C\\u7B26\\u53F7\\uFF0C\\u5219\\u65E0\\u89E3\\n                for (let i = 0; i < length - 2;) {\\n                if (nums[i] > 0) break; // \\u4F18\\u53162: \\u6700\\u5DE6\\u503C\\u4E3A\\u6B63\\u6570\\u5219\\u4E00\\u5B9A\\u65E0\\u89E3\\n                let first = i + 1\\n                let last = length - 1\\n                do {\\n                    if (first >= last || nums[i] * nums[last] > 0) break // \\u4E24\\u4EBA\\u9009\\u76F8\\u9047\\uFF0C\\u6216\\u8005\\u4E09\\u4EBA\\u540C\\u7B26\\u53F7\\uFF0C\\u5219\\u9000\\u51FA\\n                    let result = nums[i] + nums[first] + nums[last]\\n                    if (result === 0) { // \\u5982\\u679C\\u53EF\\u4EE5\\u7EC4\\u961F\\n                    res.push([nums[i], nums[first], nums[last]])\\n                    }\\n                    if (result <= 0 ) { // \\u5B9E\\u529B\\u592A\\u5F31\\uFF0C\\u628A\\u83DC\\u9E1F\\u90A3\\u8FB9\\u53F3\\u79FB\\u4E00\\u4F4D\\n                    while (first < last && nums[first] === nums[++first]){} // \\u5982\\u679C\\u76F8\\u7B49\\u5C31\\u8DF3\\u8FC7\\n                    } else { // \\u5B9E\\u529B\\u592A\\u5F3A\\uFF0C\\u628A\\u5927\\u795E\\u90A3\\u8FB9\\u53F3\\u79FB\\u4E00\\u4F4D\\n                    while (first < last && nums[last] === nums[--last]) {}\\n                    }\\n                } while (first < last)\\n                while (nums[i] === nums[++i]) {}\\n                }\\n            }\\n            return res\\n            }\\n        \\u9762\\u8BD5\\u4E2D\\u8003\\u5BDF\\u7B97\\u6CD5\\u5F53\\u7136\\u6709\\u53EF\\u80FD\\u5C31\\u662F\\u6BD4\\u8F83\\u7EAF\\u7CB9\\u7684\\u667A\\u5546\\u6D4B\\u8BD5\\u3002\\u65E2\\u7136\\u4F60\\u80FD\\u591F\\u8BB2\\u6E05\\u695A\\u8FD9\\u9053\\u9898\\uFF0C\\u81F3\\u5C11\\u8BF4\\u660E\\u4F60\\u53EF\\u4EE5\\u7406\\u89E3\\u4E00\\u4E2A\\u8F83\\u590D\\u6742\\u95EE\\u9898\\u662F\\u5982\\u4F55\\u89E3\\u51B3\\u7684\\uFF0C\\u601D\\u7EF4\\u548C\\u8868\\u8FBE\\u80FD\\u529B\\u53EF\\u4EE5\\u8FBE\\u5230\\u4E00\\u5B9A\\u7684\\u6C34\\u5E73\\u3002\\n\\n        \\u53E6\\u4E00\\u79CD\\u8003\\u5BDF\\u7684\\u53EF\\u80FD\\uFF0C\\u5E76\\u4E0D\\u662F\\u8981\\u80CC\\u7B97\\u6CD5\\uFF0C\\u800C\\u662F\\u8BA9\\u9762\\u8BD5\\u8005\\u73B0\\u573A\\u5BF9\\u95EE\\u9898\\u8FDB\\u884C\\u5206\\u6790\\uFF0C\\u63D0\\u51FA\\u89E3\\u51B3\\u65B9\\u6848\\uFF0C\\u7136\\u540E\\u8FDB\\u4E00\\u6B65\\u7684\\u8F6C\\u5316\\u4E3A\\u4EE3\\u7801\\uFF0C\\u518D\\u53BB\\u9A8C\\u8BC1\\u3002\\u5728\\u8FD9\\u4E2A\\u8FC7\\u7A0B\\u4E2D\\u8FD8\\u53EF\\u4EE5\\u6301\\u7EED\\u7684\\u4F18\\u5316\\uFF0C\\u5305\\u62EC\\u5BF9\\u8FB9\\u754C\\u7684\\u4F18\\u5316\\u8865\\u5145\\uFF0C\\u5C40\\u90E8\\u5206\\u652F\\u4F18\\u5316\\uFF0C\\u751A\\u81F3\\u4E5F\\u5305\\u62EC\\u5BF9\\u89E3\\u6CD5\\u6A21\\u578B\\u7684\\u4F18\\u5316\\u3002\\n        \\u8FD9\\u548C\\u6211\\u4EEC\\u65E5\\u5E38\\u7684\\u5F00\\u53D1\\u8FC7\\u7A0B\\u4E5F\\u5F88\\u50CF\\u3002\\u4ECE\\u9700\\u6C42\\u62BD\\u8C61\\u51FA\\u6280\\u672F\\u65B9\\u6848\\uFF0C\\u518D\\u8F6C\\u5316\\u4E3A\\u4EE3\\u7801\\uFF0C\\u7ECF\\u8FC7\\u8054\\u8C03\\u6D4B\\u8BD5\\uFF0C\\u4FEEbug\\uFF0C\\u53EF\\u80FD\\u8FD8\\u6709\\u6574\\u5408\\u548C\\u91CD\\u6784\\u3002\\n\\n        \\u4E00\\u9053\\u529B\\u6263\\u9898\\u76EE\\u7684\\u89E3\\u7B54\\uFF0C\\u5C31\\u662F\\u4E00\\u4E2A\\u9879\\u76EE\\u5F00\\u53D1\\u7684\\u7F29\\u5F71\\uFF0C\\u8FD9\\u662F\\u6211\\u5728\\u9762\\u8BD5\\u4E2D\\u7684\\u4F53\\u4F1A\\u3002\\u800C\\u6700\\u7EC8\\u6253\\u52A8\\u6211\\u7684\\u540C\\u5B66\\uFF0C\\u672A\\u5FC5\\u662F\\u56E0\\u4E3A\\u5B8C\\u7F8E\\u7684\\u505A\\u5BF9\\u4E86\\u95EE\\u9898\\uFF0C\\u91CD\\u8981\\u7684\\u662F\\uFF0C\\u5C55\\u793A\\u4E86\\u4ED6\\u4EEC\\u4F5C\\u4E3A\\u4E00\\u4E2A\\u7A0B\\u5E8F\\u5458\\uFF0C\\u5E94\\u6709\\u7684\\u806A\\u660E\\u624D\\u667A\\u3002\\n    \"};export default _3Sum;","map":{"version":3,"sources":["/Users/yabao/Documents/githubspace/Jutsai-Lab/src/apps/bao/baoApp/views/examples/JsLeetcode/js/Two_Pointers/_3Sum.js"],"names":["_3Sum","id","name","refLink","level","tag","notes","jsSolution"],"mappings":"AAAA,GAAMA,CAAAA,KAAK,CAAG,CACVC,EAAE,CAAE,MADM,CAEVC,IAAI,CAAE,OAFI,CAGVC,OAAO,CAAE,CACL,mDADK,CAEL,uDAFK,CAGL,kFAHK,CAHC,CASVC,KAAK,CAAE,MATG,CAUVC,GAAG,CAAE,EAVK,CAWVC,KAAK,GAXK,CAYVC,UAAU,wjrBAZA,CAAd,CAgMA,cAAeP,CAAAA,KAAf","sourcesContent":["const _3Sum = {\n    id: '0054',\n    name: '_3Sum', \n    refLink: [\n        'https://www.lintcode.com/problem/3sum/description',\n        'https://www.jiuzhang.com/solution/3sum/#tag-highlight',\n        'https://leetcode-cn.com/problems/3sum/solution/three-sum-ti-jie-by-wonderful611/'\n\n    ],\n    level: 'Hard',\n    tag: [],\n    notes: ``,\n    jsSolution: `\n        // Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\n        // 在线评测地址: https://www.lintcode.com/problem/3sum/\n        \n        热身\n        首先，先找一下它的简化版 2sum 来热热身。\n\n        最简单的想法就是把每两个都拿出来加一下，看看结果是不是我们想要的。但是直觉告诉我们，这样子并不高效。举一个很实际的例子就能明白。\n\n        比如这个周末你去参加线下相亲会，全场有且只有两个人才是真爱。于是我们每个人都要去找其他所有人聊天，去寻找 ta 是不是自己要找的另一半。每个人都要和每个人说话，这样时间复杂度很高，翻译成计算机的表示就是 O(n2)。\n\n            var twoSum = function(nums, target) {\n            for (let i = 0; i < nums.length - 1; i++) { // 每个人\n                for (let j = i + 1; j < nums.length; j++) { // 都去问其他的人\n                if (nums[i]+nums[j] === target) {\n                    return [nums[i], nums[j]]\n                }\n                }\n            }\n            }\n        怎么样可以更高效一点？\n        这时候要引入哈希表，其实就是一个登记册，写上你的名字和你的要求。如果每个人都提前在主持人那里登记一遍，然后只要大家依次再报出自己名字，主持人就能够识别到，ta 就是你要找的人。\n\n        var twoSum = function(nums, target) {\n            let res = {}\n            for (let i = 0; i < nums.length; i++) { // 每个人登记自己想要配对的人，让主持人记住\n                res[target - nums[i]] = nums[i]\n            }\n            for (let j = 0; j < nums.length; j++) { // 每个人再次报数的时候，主持人看一下名单里有没有他\n                if (res[nums[j]] !== undefined) {\n                return [nums[j], res[nums[j]]]\n                }\n            }\n            }\n        很容易看出来，上面的方案仍然可以优化。就是每个人都来问一下主持人，自己要找的人有没有来登记过，如果没有的话，就把自己的要求写下来，等着别人来找自己。\n\n        var twoSum = function(nums, target) {\n            let res = {}\n            for (let i = 0; i < nums.length; i++) { // 每个人报出自己想要配对的人\n                if (res[nums[i]] !== undefined) { // 如果有人被登记过\n                return [nums[i], res[nums[i]]] // 就是他\n                } else {  // 否则\n                res[target - nums[i]] = nums[i] // 主持人记住他的需求\n                }\n            }\n            }\n        2sum 问题最坏的情况是，第一个人和最后一个人配对，每个人都发了一次言。时间复杂度是 O(n)，空间复杂度也是 O(n)，因为主持人要用小本本记录下每个人的发言，最坏的时候，要把所有人的诉求都记一遍。\n\n        从生活经验中我们能感觉到什么方案是最好的，而且也能够知道，什么算法已经到达了优化的极限。这就是所谓的”只使用人类的聪明才智“就可以做出来。\n\n        当然， 如果没有编程的基础，可能不会想到哈希表-登记册这样的类比，但这应该只影响把解决方案转化为代码表达。想到解决方案这件事，其实是完全不依赖编码能力的。\n\n        面试很多年轻前端同学的时候，他们会一上来就直接开始写代码，然后把草纸写得一团糟。我都会给他们讲，要把算法和编码分开来看，你可以用伪代码，画图，甚至摆弄小道具的方法去寻求解法。有了明确的解法，再转化成可执行的代码，就是水到渠成的事情了。\n\n        three sum\n        好的，热身结束，现在来看 3sum 问题。这个问题复杂了一些，变成了一个人找两个人。\n\n        一个新的周末，你再次去现在参加了一个，额，这次不是相亲会，是参加一个街篮比赛，赛前当然要组队啦，现在要想一个方法找到队友。组队还有一个要求，就是队伍的平均实力要符合要求，比如菜鸟抱两个大腿，或者有王者带两个弱鸡。\n\n        我们先想一个保底的办法，再去慢慢优化。最简单的办法是，每个人都去依次拉上另一个人一起去找第三个人，这个时间复杂度是 O(n3)O(n3)。\n\n            var threeSum = function(nums) {\n            let res = []\n            for (let i = 0; i < nums.length - 2; i++) { // 每个人\n                for (let j = i + 1; j < nums.length - 1; j++) { // 依次拉上其他每个人\n                for (let k = j + 1; k < nums.length; k++) { // 去问剩下的每个人\n                    if (nums[i] + nums[j] + nums[k] === 0) { // 我们是不是可以一起组队\n                    res.push([nums[i], nums[j], nums[k]])\n                    }\n                }\n                }\n            }\n            return res\n            }\n        受到上题的启发，在凑齐两人以后，他们可以找主持人登记需求的第三人，而不需要在茫茫人海中去找队友。这样，我们就把问题优化成了每个人都要找其他每个人，即时间复杂度 O(n2)O(n2)，因为需要主持人记录数据，这里还有 O(n)O(n) 的空间复杂度。\n\n            var threeSum = function(nums) {\n                let res = []\n                let hash = {}\n                for (let i = 0; i < nums.length - 2; i++) { // 每个人\n                for (let j = i + 1; j < nums.length - 1; j++) { // 依次拉上其他每个人\n                    if (hash[nums[j]] !== undefined) { // 已经有合适自己的两人组\n                    res.push([nums[j]].concat(hash[nums[j]]))\n                    hash[nums[j]] = undefined\n                    } else { // 没有合适自己的两人组\n                    let mark = 0 - nums[i] - nums[j]\n                    hash[mark] = [nums[i], nums[j]]\n                    }\n                }\n                }\n                return res\n            } // 示意代码 未AC\n        再优化\n        现在已经想到了可用的通用方案，根据题目的特点，看看还有哪里可以做一些优化。比如提前结束一些不可能的组合。\n\n        首先安排所有人按照顺序排队站好，这是一个需要花时间的操作，不过磨刀不误砍柴工，付出这个时间还是值得的。排序可以做到 O(nlogn)O(nlogn)，这是优于 O(n^2)O(n \n        2\n        ) 的。\n\n        然后我们选择一个人做C位，既然是C位，那么就需要左右各有一个人。先选择队伍最左边（最小值）和队伍最右边（最大值）两个人，加上你，算一下总和。如果大于 0，说明实力太强了，就把就把右侧的人选调左一位，反之，则调整左边的人选，增强一下实力。当某边选到紧挨着你的人的时候，就意味着组队结束，以你为 C位的所有可能都已经尝试完毕了。\n\n            var threeSum = function (nums) {\n            let res = []\n            nums.sort((a, b) => a - b) // 先排个队，最左边是最弱（小）的，最右边是最强(大)的\n            for (let i = 1; i < nums.length - 1; i++) { // C位人选\n                let first = 0\n                let last = nums.length - 1\n                do {\n                let result = nums[i] + nums[first] + nums[last]\n                if (result === 0) { // 如果可以组队\n                    res.push([nums[i], nums[first], nums[last]])\n                }\n                if (result <= 0 && first < i) { // 实力太弱，把菜鸟那边右移一位\n                    while (nums[first] === nums[++first]); // 如果相等就跳过\n                } else if (result > 0 && last > i) { // 实力太强，把大神那边右移一位\n                    while (nums[last] === nums[--last]);\n                } else {\n                    break // 某一边已经没有人选了\n                }\n                } while (1) { }\n            }\n            return res\n            } // 示意代码 未AC\n        于是我们开开心心的把解答发到了力扣，然后就得到了一个 WA（wrong answer）。因为力扣的测试用例往往会有很多边界数据，不针对这些特殊情况做考虑的话，几乎一定会翻车的。\n\n        针对特殊用例优化\n        我们刚刚的解法，会在 [0,0,0,0] 这个情况下败下阵来，此时有两个解决方案，第一种就是直接堵上漏洞，针对有问题的测试数据在代码中加补丁。如果运气好的话，可能下一次提交就会 AC 了。但是这种方法在竞赛中是不可取的，因为一次 WA 会有罚时。在工作中我们可能顺手就打补丁修了问题，然后等到测试报出其他问题再去修。如果测试恰好没有发现任何问题，这段代码就可以上线了。但是这样带来的问题，一是并没有在逻辑层面消除某一类特殊数据可能带来的问题，二是代码会很丑陋，变得难以维护。\n\n        所以更好的做法是：从这个不通过的数据提取特征，添加对应特征数据的处理逻辑，一次修复一类的错误，并且尽量保持代码的流畅。\n\n        此处的报错是由重复数据引起的，看样子完全一样的两个人没必要 C 位出道两次，但是在一个队伍中其实存在着有两个相同值的可能，比如 [-1, -1, 2] 这种组合。\n\n        于是我们新的问题就是：当有多个相同值的时候，选谁做 C 位？\n\n        像在[-1, -1, 2]这个例子中，由第二个-1做了 C 位，我们用人类的聪明才智想一下就很容易想明白。如果一个负数要做 C 位，它必须要保证队里有一个正数，所以选择最右边的那个就可以。反过来看 [-2, 1, 1] 这个案例，为了保证至少有一个负数，我们选择最左边的重复值。\n\n        对于 0 这个特殊值来说，左右一定是对称的，有一个极特殊的情况就是队列里面有超过三个 0，此时只有选择中间的 0 才能保证不遗漏这种情况。除此之外，选择哪个0居中都是无所谓的。\n\n        重构策略\n        等等，分析到这里，好像把事情搞得过于复杂了。我们在选择第一个人的时候就分了三种情况。\n        重新思考一下，一开始选择 C 位，实则是为了利用有序数组快速筛选方案。因为这个人位于中间，所以才会有复杂的选取策略。如果第一次直接选择最左边的那个人，后面的策略依然类似，以双指针从最大最小两端相向而行，直到相遇，或者即将筛选出来三个符号相同的结果，即停止。好像仍然可以找到正确答案，同时也恰好避开了复杂的选 C 位情况。\n\n        我们可以进一步把一些明显出界的条件加上判断，再一次剪除部分无用尝试。\n\n            var threeSum = function (nums) {\n            let res = []\n            let length = nums.length;\n            nums.sort((a, b) => a - b) // 先排个队，最左边是最弱（小）的，最右边是最强(大)的\n            if (nums[0] <= 0 && nums[length - 1] >= 0) { // 优化1: 整个数组同符号，则无解\n                for (let i = 0; i < length - 2;) {\n                if (nums[i] > 0) break; // 优化2: 最左值为正数则一定无解\n                let first = i + 1\n                let last = length - 1\n                do {\n                    if (first >= last || nums[i] * nums[last] > 0) break // 两人选相遇，或者三人同符号，则退出\n                    let result = nums[i] + nums[first] + nums[last]\n                    if (result === 0) { // 如果可以组队\n                    res.push([nums[i], nums[first], nums[last]])\n                    }\n                    if (result <= 0 ) { // 实力太弱，把菜鸟那边右移一位\n                    while (first < last && nums[first] === nums[++first]){} // 如果相等就跳过\n                    } else { // 实力太强，把大神那边右移一位\n                    while (first < last && nums[last] === nums[--last]) {}\n                    }\n                } while (first < last)\n                while (nums[i] === nums[++i]) {}\n                }\n            }\n            return res\n            }\n        面试中考察算法当然有可能就是比较纯粹的智商测试。既然你能够讲清楚这道题，至少说明你可以理解一个较复杂问题是如何解决的，思维和表达能力可以达到一定的水平。\n\n        另一种考察的可能，并不是要背算法，而是让面试者现场对问题进行分析，提出解决方案，然后进一步的转化为代码，再去验证。在这个过程中还可以持续的优化，包括对边界的优化补充，局部分支优化，甚至也包括对解法模型的优化。\n        这和我们日常的开发过程也很像。从需求抽象出技术方案，再转化为代码，经过联调测试，修bug，可能还有整合和重构。\n\n        一道力扣题目的解答，就是一个项目开发的缩影，这是我在面试中的体会。而最终打动我的同学，未必是因为完美的做对了问题，重要的是，展示了他们作为一个程序员，应有的聪明才智。\n    `\n}\n\nexport default _3Sum\n"]},"metadata":{},"sourceType":"module"}