{"map":{"version":3,"sources":["static/js/bao.3ca923ad.chunk.js"],"names":["this","push","1072","module","__webpack_exports__","__webpack_require__","r","react","react_default","n","react_dom","react_dom_default","react_router_dom","react_router","es","redux","objectSpread2","GET_WEATHER","WeatherInitialState","loading","error","success","data","weatherReducer","state","arguments","length","undefined","action","type","Object","payload","reducer_rootReducer","weatherData","redux_devtools_extension","redux_thunk_es","redux_Store","slicedToArray","classnames","classnames_default","Navbar","Container","NavbarBrand","Collapse","Nav","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","NavItem","NavLink","Navbars_IndexNavbar","_React$useState","a","useState","_React$useState2","navbarColor","setNavbarColor","_React$useState3","_React$useState4","navbarCollapse","setNavbarCollapse","useEffect","updateNavbarColor","document","documentElement","scrollTop","body","window","addEventListener","removeEventListener","createElement","className","expand","data-placement","href","title","aria-expanded","toggled","onClick","classList","toggle","navbar","isOpen","nav","inNavbar","aria-haspopup","caret","color","data-toggle","id","e","preventDefault","role","aria-labelledby","divider","target","disabled","to","Headers_IndexHeader","Fragment","style","backgroundImage","alt","src","Date","getFullYear","Row","Footers_DemoFooter","Col","index_sections_SectionDark","md","Button","index_sections_SectionExamples","views_Index","remove","add","pages_Home","react_Ticket","idSeq","now","createAdd","text","dispatch","getState","setTimeout","todos","find","todo","complete","createRemove","createToggle","toConsumableArray","reducers","pages_reducers","concat","filter","map","incrementCount","changed","key","bindActionCreators","actionCreators","ret","_loop","actionCreator","apply","App_Control","props","addTodo","inputRef","onSubmit","newText","current","value","trim","ref","placeholder","App_TodoItem","_props$todo","removeTodo","toggleTodo","onChange","checked","Todos","store","TodoList_pages_App","_useState","_useState2","setTodos","_useState3","_useState4","setIncrementCount","setters","newState","assign","JSON","parse","localStorage","getItem","setItem","stringify","TodoList","classCallCheck","createClass","inherits","createSuper","regenerator","regenerator_default","asyncToGenerator","axios","axios_default","BASE_URL","react_toastify_esm","Actions_GetWeatherDetails","location","_ref","mark","_callee","wrap","_context","prev","next","get","params","q","units","lang","then","response","catch","err","console","log","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","stop","_x","moment","moment_default","Home_Weather","_React$Component","Weather","_super","_this","call","handleSubmit","searchInput","GetWeatherDetails","setState","handleOnChange","_this2","_this$props$weatherDa","weather","sys","name","main","format","country","icon","temp","temp_min","temp_max","Component","WeatherApp_pages_Home","react_WeatherApp","defineProperty","axios_Axios","Axios","options","Promise","resolve","reject","url","method","baseURL","timeout","status","children","layout","input","es_button","row","col","dist_main","tag","table","PostListColumns","dataIndex","components_SubredditList","selectedRowKeys","handleGetColumnSearchProps","handleUpdateRowKeys","SubredditListColumns","hasSelected","onRow","record","index","rowdata","rowIndex","handleUpdateUrl","rowSelection","columns","dataSource","expandable","expandedRowRender","margin","rel","rowExpandable","pagination","defaultCurrent","defaultPageSize","scroll","y","components_PostList","author","handleUpdatePostData","card","carousel","comment","list","UserOutlined","LinkOutlined","pages_components_PostDetails","userPostData","selftext","preview","thumbnail","imgUrl","images","source","getPostViaAuthorApi","listData","i","link_permalink","link_title","avatar","link_url","cover","effect","content","itemLayout","size","page","pageSize","renderItem","item","Item","Meta","Header","Footer","RedditBrowser_RedditBrowser","RedditBrowser","_len","args","Array","_key","subredditListData","subredditListSelectedRowKeys","postListData","postListSelectedRowKeys","postDetailData","selectedPostAuthor","searchText","searchedColumn","updateUrl","GET","res","obj","updatePostData","updateRowKeys","handleSearch","selectedKeys","confirm","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","padding","node","onPressEnter","width","marginBottom","display","marginRight","handleReset","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","select","render","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","requestSubredditListData","requestPostListData","all","spread","_len2","responses","_key2","responseSubredditListData","responesPostListData","errors","_this$state","commonProps","subredditListProps","postListProps","xs","sm","lg","xl","views","RedditBrowserApp","makeStyles","dist","dist_default","Typography","prism","duotone_dark","Grid","Card","CardContent","Link","Alert_Alert","js","refLink","level","notes","jsSolution","useStyles","rootWrap","minWidth","minHeight","tableWrap","JScodeWrap","JSCoding_Alert","elevation","variant","JSCoding","classes","JsTitle","setJsTitle","setJsSolution","_React$useState5","_React$useState6","setRefLink","_React$useState7","_React$useState8","setNotes","_React$useState9","field","_React$useState10","container","spacing","onRowClick","evt","selectedRow","component","link","root","severity","language","Home_useStyles","theme","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","overflow","contentShift","PersistentDrawerRight","JsLeetcode","AI_TensorFlow","path","getElementById","579","exports","612","613","614","634","p","635","636","637","638","639","658","659","805","817"],"mappings":"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"},"code":"(this[\"webpackJsonpjutsai-lab\"]=this[\"webpackJsonpjutsai-lab\"]||[]).push([[1],{1072:function(n,e,t){\"use strict\";t.r(e);var r=t(0),i=t.n(r),a=t(15),o=t.n(a),s=t(566),l=t(47),u=t(134),d=t(63),c=t(40),m=\"GET_WEATHER_PENDING\",h=\"GET_WEATHER_SUCCESS\",p=\"GET_WEATHER_REJECTED\",f={loading:!1,error:!1,success:!1,data:{}},g=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:f,e=arguments.length>1?arguments[1]:void 0,t=e.type;switch(t){case m:return Object(c.a)(Object(c.a)({},n),{},{loading:!0});case h:return Object(c.a)(Object(c.a)({},n),{},{loading:!1,success:!0,data:e.payload});case p:return Object(c.a)(Object(c.a)({},n),{},{error:!0});default:return n}},w=Object(d.combineReducers)({weatherData:g}),b=t(534),v=t(535),y=Object(d.createStore)(w,Object(b.composeWithDevTools)(Object(d.applyMiddleware)(v.a))),S=(t(612),t(613),t(614),t(86)),x=t(5),j=t.n(x),E=t(1099),k=t(1100),L=t(1101),N=t(1102),A=t(1103),_=t(1132),W=t(1133),q=t(1134),z=t(1104),T=t(1105),C=t(1106);var P=function(){var n=i.a.useState(\"navbar-transparent\"),e=Object(S.a)(n,2),t=e[0],r=e[1],a=i.a.useState(!1),o=Object(S.a)(a,2),s=o[0],l=o[1];return i.a.useEffect((function(){var n=function(){document.documentElement.scrollTop>299||document.body.scrollTop>299?r(\"\"):(document.documentElement.scrollTop<300||document.body.scrollTop<300)&&r(\"navbar-transparent\")};return window.addEventListener(\"scroll\",n),function(){window.removeEventListener(\"scroll\",n)}})),i.a.createElement(E.a,{className:j()(\"fixed-top\",t),expand:\"lg\"},i.a.createElement(k.a,null,i.a.createElement(\"div\",{className:\"navbar-translate\"},i.a.createElement(L.a,{\"data-placement\":\"bottom\",href:\"/bao.html/#/index\",title:\"Bao\"},\"Bao\"),i.a.createElement(\"button\",{\"aria-expanded\":s,className:j()(\"navbar-toggler navbar-toggler\",{toggled:s}),onClick:function(){l(!s),document.documentElement.classList.toggle(\"nav-open\")}},i.a.createElement(\"span\",{className:\"navbar-toggler-bar bar1\"}),i.a.createElement(\"span\",{className:\"navbar-toggler-bar bar2\"}),i.a.createElement(\"span\",{className:\"navbar-toggler-bar bar3\"}))),i.a.createElement(N.a,{className:\"justify-content-end\",navbar:!0,isOpen:s},i.a.createElement(A.a,{navbar:!0},i.a.createElement(_.a,{nav:!0,inNavbar:!0},i.a.createElement(W.a,{\"aria-expanded\":!1,\"aria-haspopup\":!0,caret:!0,color:\"default\",\"data-toggle\":\"dropdown\",href:\"#\",id:\"dropdownMenuButton\",nav:!0,onClick:function(n){return n.preventDefault()},role:\"button\"},\"React\"),i.a.createElement(q.a,{\"aria-labelledby\":\"dropdownMenuButton\",className:\"dropdown-info\"},i.a.createElement(z.a,{href:\"/bao.html/#/react-ticket\"},\"Ticket\"),i.a.createElement(z.a,{href:\"/bao.html/#/react-todolist\"},\"Todolist\"),i.a.createElement(z.a,{href:\"/bao.html/#/react-weatherApp\"},\"Weather APP\"),i.a.createElement(z.a,{href:\"/bao.html/#/react-redditBrowserApp\"},\"Reddit Browser APP\"))),i.a.createElement(_.a,{nav:!0,inNavbar:!0},i.a.createElement(W.a,{\"aria-expanded\":!1,\"aria-haspopup\":!0,caret:!0,color:\"default\",\"data-toggle\":\"dropdown\",href:\"#pablo\",id:\"dropdownMenuButton\",nav:!0,onClick:function(n){return n.preventDefault()},role:\"button\"},\"BI\"),i.a.createElement(q.a,{\"aria-labelledby\":\"dropdownMenuButton\",className:\"dropdown-info\"},i.a.createElement(z.a,{divider:!0}),i.a.createElement(z.a,{href:\"/bao.html/#/#\",onClick:function(n){return n.preventDefault()}},\"Coming soon...\"))),i.a.createElement(_.a,{nav:!0,inNavbar:!0},i.a.createElement(W.a,{\"aria-expanded\":!1,\"aria-haspopup\":!0,caret:!0,color:\"default\",\"data-toggle\":\"dropdown\",href:\"#pablo\",id:\"dropdownMenuButton\",nav:!0,onClick:function(n){return n.preventDefault()},role:\"button\"},\"AI\"),i.a.createElement(q.a,{\"aria-labelledby\":\"dropdownMenuButton\",className:\"dropdown-info\"},i.a.createElement(z.a,{href:\"/bao.html/#/ai-tensorflow\"},\"TensorFlow.js\"))),i.a.createElement(_.a,{nav:!0,inNavbar:!0},i.a.createElement(W.a,{\"aria-expanded\":!1,\"aria-haspopup\":!0,caret:!0,color:\"default\",\"data-toggle\":\"dropdown\",href:\"#pablo\",id:\"dropdownMenuButton\",nav:!0,onClick:function(n){return n.preventDefault()},role:\"button\"},\"Basic\"),i.a.createElement(q.a,{\"aria-labelledby\":\"dropdownMenuButton\",className:\"dropdown-info\"},i.a.createElement(z.a,{href:\"/bao.html/#/js\"},\"JS coding\"),i.a.createElement(z.a,{divider:!0}),i.a.createElement(z.a,{href:\"/bao.html/#/#\",onClick:function(n){return n.preventDefault()}},\"Coming soon...\"))),i.a.createElement(_.a,{nav:!0,inNavbar:!0},i.a.createElement(W.a,{\"aria-expanded\":!1,\"aria-haspopup\":!0,caret:!0,color:\"default\",\"data-toggle\":\"dropdown\",href:\"#pablo\",id:\"dropdownMenuButton\",nav:!0,onClick:function(n){return n.preventDefault()},role:\"button\"},\"Demo\"),i.a.createElement(q.a,{\"aria-labelledby\":\"dropdownMenuButton\",className:\"dropdown-info\"},i.a.createElement(z.a,{href:\"/hepB.html\",target:\"_blank\"},\"HepB Project\"),i.a.createElement(z.a,{divider:!0}),i.a.createElement(z.a,{href:\"/bao.html/#/#\",onClick:function(n){return n.preventDefault()}},\"Coming soon...\"))),i.a.createElement(T.a,{disabled:!0},i.a.createElement(C.a,{to:\"/js\",target:\"_blank\"},i.a.createElement(\"i\",{className:\"nc-icon nc-book-bookmark\"}),\" JS\")),i.a.createElement(T.a,null,i.a.createElement(C.a,{\"data-placement\":\"bottom\",href:\"https://github.com/yabao1991/bao\",target:\"_blank\",title:\"Yabao_Github\"},i.a.createElement(\"i\",{className:\"fa fa-github\"}),i.a.createElement(\"p\",{className:\"d-lg-none\"},\"GitHub\")))))))};var D=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(\"div\",{className:\"page-header section-dark\",style:{backgroundImage:\"url(\"+t(634)+\")\"}},i.a.createElement(\"div\",{className:\"filter\"}),i.a.createElement(\"div\",{className:\"content-center\"},i.a.createElement(k.a,null,i.a.createElement(\"div\",{className:\"title-brand\"},i.a.createElement(\"h1\",{className:\"presentation-title\"},\"Hello, world from JS\"),i.a.createElement(\"div\",{className:\"fog-low\"},i.a.createElement(\"img\",{alt:\"...\",src:t(635)}))),i.a.createElement(\"br\",null),i.a.createElement(\"h2\",{className:\"presentation-subtitle text-center\"},\"Enjoy life, enjoy code.\"))),i.a.createElement(\"div\",{className:\"moving-clouds\",style:{backgroundImage:\"url(\"+t(636)+\")\"}}),i.a.createElement(\"div\",{className:\"category category-absolute credits ml-auto\"},i.a.createElement(\"span\",{className:\"copyright\"},(new Date).getFullYear(),i.a.createElement(\"i\",{className:\"fa fa-heart heart\"}),\"\\xa9 Lin\"))))},O=(t(637),t(1107));var G=function(){return i.a.createElement(\"footer\",{className:\"footer footer-black footer-white\"},i.a.createElement(k.a,null,i.a.createElement(O.a,null,i.a.createElement(\"div\",{className:\"credits ml-auto\"},i.a.createElement(\"span\",{className:\"copyright\"},i.a.createElement(\"i\",{className:\"fa fa-heart heart\"}),\" \",(new Date).getFullYear(),\" \",\"\\xa9 Lin\")))))},B=t(1108);var M=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(\"div\",{className:\"section section-dark\"},i.a.createElement(k.a,null,i.a.createElement(O.a,null,i.a.createElement(B.a,{className:\"ml-auto mr-auto text-center\",md:\"8\"},i.a.createElement(\"h2\",{className:\"title\"},\"Examples\"))))))},I=t(536);t(638);var F=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(\"div\",{className:\"section section-dark section-samples\"},i.a.createElement(k.a,null,i.a.createElement(O.a,{className:\"example-page\"},i.a.createElement(B.a,{className:\"text-center\",md:\"6\"},i.a.createElement(\"div\",{className:\"info\"},i.a.createElement(\"div\",{className:\"icon icon-info\"},i.a.createElement(\"i\",{className:\"nc-icon nc-bulb-63\"})),i.a.createElement(\"div\",{className:\"description\"},i.a.createElement(\"h4\",{className:\"info-title\"},\"AI\"),i.a.createElement(\"p\",null,\"\\u4e00\\u4e9bJS\\u4eba\\u5de5\\u667a\\u80fd\\u793a\\u4f8b - Some AI demo via JS\"),i.a.createElement(I.a,{className:\"btn-outline-neutral btn-round\",href:\"/landing-page\",target:\"_blank\",disabled:!0},\"Coming soon...\")))),i.a.createElement(B.a,{className:\"text-center\",md:\"6\"},i.a.createElement(\"div\",{className:\"info\"},i.a.createElement(\"div\",{className:\"icon icon-info\"},i.a.createElement(\"i\",{className:\"nc-icon nc-sun-fog-29\"})),i.a.createElement(\"div\",{className:\"description\"},i.a.createElement(\"h4\",{className:\"info-title\"},\"JS Library\"),i.a.createElement(\"p\",null,\"Some unique js examples\"),i.a.createElement(I.a,{className:\"btn-outline-neutral btn-round\",href:\"/index\",disabled:!0},\"Landing Page\"))))))),\" \")};var R=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(D,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(M,null),i.a.createElement(F,null),i.a.createElement(G,null)))};var H=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(\"div\",null,\"Home Page\"))};var U=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(H,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))};var V=Date.now();function Q(n){return function(e,t){setTimeout((function(){t().todos.find((function(e){return e.text===n}))||e({type:\"add\",payload:{id:++V,text:n,complete:!1}})}),500)}}function J(n){return{type:\"remove\",payload:n}}function K(n){return{type:\"toggle\",payload:n}}var Y=t(569);var X,Z=(X={todos:function(n,e){var t=e.type,r=e.payload;switch(t){case\"set\":return r;case\"add\":return[].concat(Object(Y.a)(n),[r]);case\"remove\":return n.filter((function(n){return n.id!==r}));case\"toggle\":return n.map((function(n){return n.id===r?Object(c.a)(Object(c.a)({},n),{},{complete:!n.complete}):n}));default:return n}},incrementCount:function(n,e){switch(e.type){case\"set\":case\"add\":return n+1;default:return n}}},function(n,e){var t={};for(var r in X)t[r]=X[r](n[r],e);return Object(c.a)(Object(c.a)({},n),t)});t(639);function $(n,e){var t={},r=function(r){t[r]=function(){var t=n[r],i=t.apply(void 0,arguments);e(i)}};for(var i in n)r(i);return t}var nn=Object(r.memo)((function(n){var e=n.addTodo,t=Object(r.useRef)();return i.a.createElement(\"div\",{className:\"control\"},i.a.createElement(\"h1\",null,\"TODOS\"),i.a.createElement(\"form\",{onSubmit:function(n){n.preventDefault();var r=t.current.value.trim();0!==r.length&&(e(r),t.current.value=\"\")}},i.a.createElement(\"input\",{ref:t,type:\"text\",className:\"new-todo\",placeholder:\"What needs to be done?\"})))})),en=Object(r.memo)((function(n){var e=n.todo,t=e.id,r=e.text,a=e.complete,o=n.removeTodo,s=n.toggleTodo;return i.a.createElement(\"li\",{className:\"todo-item\"},i.a.createElement(\"input\",{type:\"checkbox\",onChange:function(){s(t)},checked:a}),i.a.createElement(\"label\",{className:a?\"complete\":\"\"},r),i.a.createElement(\"button\",{onClick:function(){o(t)}},\"\\xd7\"))}));function tn(n){var e=n.todos,t=n.removeTodo,r=n.toggleTodo;return i.a.createElement(\"ul\",null,e.map((function(n){return i.a.createElement(en,{key:n.id,todo:n,removeTodo:t,toggleTodo:r})})))}var rn={todos:[],incrementCount:0};var an=function(){var n=Object(r.useState)([]),e=Object(S.a)(n,2),t=e[0],a=e[1],o=Object(r.useState)(0),s=Object(S.a)(o,2),l=s[0],u=s[1],d=function n(e){var t={todos:a,incrementCount:u};if(\"function\"!==typeof e){var r=Z(rn,e);for(var i in r)t[i](r[i])}else e(n,(function(){return rn}))};return Object(r.useEffect)((function(){Object.assign(rn,{todos:t,incrementCount:l})}),[t,l]),Object(r.useEffect)((function(){var n=JSON.parse(localStorage.getItem(\"_TODOS_\")||\"[]\");d({type:\"set\",payload:n})}),[]),Object(r.useEffect)((function(){localStorage.setItem(\"_TODOS_\",JSON.stringify(t))}),[t]),i.a.createElement(\"div\",{className:\"todo-list\"},i.a.createElement(nn,$({addTodo:Q},d)),i.a.createElement(tn,Object.assign({todos:t},$({removeTodo:J,toggleTodo:K},d))))};var on=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(an,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))},sn=t(169),ln=t(170),un=t(311),dn=t(306),cn=t(386),mn=t.n(cn),hn=t(538),pn=t(117),fn=t.n(pn),gn=\"https://api.openweathermap.org/data/2.5/weather?appid=\".concat(\"732a978b857035c0d8c91408309a32e1\"),wn=t(277),bn=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"San Jose\";return function(){var e=Object(hn.a)(mn.a.mark((function e(t){return mn.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t({type:m}),fn.a.get(gn,{params:{q:n,units:\"imperial\",lang:\"zh_cn\"}}).then((function(n){return t({type:h,payload:n.data})})).catch((function(n){console.log(n.response,n),wn.b.error(n.response.data.message,{position:\"bottom-center\",autoClose:3e3,hideProgressBar:!1,closeOnClick:!0,pauseOnHover:!1,draggable:!1}),t({type:p,payload:n.response})}));case 2:case\"end\":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()},vn=(t(657),t(658),t(539)),yn=t.n(vn),Sn=function(n){Object(un.a)(t,n);var e=Object(dn.a)(t);function t(n){var r;return Object(sn.a)(this,t),(r=e.call(this,n)).handleSubmit=function(n){n.preventDefault();var e=r.state.searchInput,t=r.props.action.GetWeatherDetails;e&&t(r.state.searchInput),r.setState({searchInput:\"\"})},r.handleOnChange=function(n){r.setState({searchInput:n.target.value})},r.state={searchInput:\"\"},r}return Object(ln.a)(t,[{key:\"componentDidMount\",value:function(){(0,this.props.action.GetWeatherDetails)()}},{key:\"render\",value:function(){var n=this,e=this.props.weatherData,t=e.data,r=e.success,a=t.weather,o=t.sys,s=t.name,l=t.main,u=this.state.searchInput;return i.a.createElement(\"div\",{className:\"containerWrap\"},i.a.createElement(\"div\",{className:\"container\"},i.a.createElement(\"div\",{className:\"heading\"},\"Weather APP\"),i.a.createElement(\"form\",{className:\"search-form\",onSubmit:this.handleSubmit},i.a.createElement(\"input\",{type:\"text\",placeholder:\"Search Weather by City\",value:u,onChange:function(e){return n.handleOnChange(e)}}),i.a.createElement(\"button\",null,\"Find\")),i.a.createElement(\"div\",{className:\"helper-text\"},\"Type City Name and Hit Enter\"),i.a.createElement(\"div\",{className:\"info\"},i.a.createElement(\"div\",{className:\"sub-heading\"},\"Weather Forecast \",i.a.createElement(\"div\",null,\"on\")),i.a.createElement(\"small\",{className:\"date\"},r?yn()().format(\"MMM DD YYYY\"):null),i.a.createElement(\"div\",{className:\"location\"},r?s:null,i.a.createElement(\"small\",null,\"(\",r?o.country:null,\")\")),i.a.createElement(\"div\",{className:\"forecast-info\"},i.a.createElement(\"div\",{className:\"forecast-icon\"},r?i.a.createElement(\"img\",{src:\"http://openweathermap.org/img/wn/\".concat(a[0].icon,\"@2x.png\"),alt:\"\"}):null),i.a.createElement(\"div\",{className:\"forecast-value\"},i.a.createElement(\"div\",{className:\"degrees\"},i.a.createElement(\"span\",{className:\"degrees-count\"},r?l.temp:null),\"F\"),i.a.createElement(\"span\",{className:\"weather-condition\"},r?a[0].main:null))),i.a.createElement(\"div\",{className:\"additional-info\"},i.a.createElement(\"ul\",{className:\"list\"},i.a.createElement(\"li\",null,i.a.createElement(\"b\",null,\"Min Temp\"),\" \",r?l.temp_min:null),i.a.createElement(\"li\",null,i.a.createElement(\"b\",null,\"Max Temp\"),\" \",r?l.temp_max:null))))),i.a.createElement(wn.a,null))}}]),t}(i.a.Component),xn=Object(u.b)((function(n){return{weatherData:n.weatherData}}),(function(n){return{action:Object(d.bindActionCreators)({GetWeatherDetails:bn},n)}}))(Sn);var jn=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(xn,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))},En=(t(659),t(274)),kn=function(){function n(){Object(sn.a)(this,n)}return Object(ln.a)(n,null,[{key:\"GET\",value:function(n){return new Promise((function(e,t){fn()({url:n.url,method:\"get\",baseURL:\"https://www.reddit.com/\",timeout:5e3,params:n.data&&n.data.params||\"\"}).then((function(n){200===n.status?e(n.data.data.children):t(n.data.data.children)}))}))}}]),n}(),Ln=t(1111),Nn=t(1128),An=t(107),_n=t(190),Wn=t(97),qn=t(540),zn=t(1135),Tn=t(1126),Cn=[{title:\"Author\",dataIndex:\"author\"}],Pn=function(n){var e=n.data,t=n.url,r=n.selectedRowKeys,a=(n.handleUpdateRowKeys,n.handleGetColumnSearchProps),o=[Object(c.a)({title:\"Title\",dataIndex:\"title\"},a(\"title\"))],s=r.length>0;return i.a.createElement(\"div\",null,i.a.createElement(\"div\",{className:\"tableHeader\"},i.a.createElement(zn.a,{color:\"#108ee9\"},\"Step 1: Select a subreddit\"),s?i.a.createElement(\"p\",null,\"Selected url: \".concat(t,\" \")):i.a.createElement(\"p\",null,\"Selected url: (No selection)\")),i.a.createElement(Tn.a,{onRow:function(e,t){return{onClick:function(){var r,i;r=e,i=t,(0,n.handleUpdateUrl)(r.url,i)}}},rowSelection:void 0,columns:o,dataSource:e,expandable:{expandedRowRender:function(n){return i.a.createElement(\"div\",null,i.a.createElement(\"p\",{style:{margin:10}},\"Api url:\"),i.a.createElement(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://www.reddit.com\".concat(n.url,\"hot.json\"),style:{margin:5}},\"https://www.reddit.com\",n.url,\"hot.json\"))},rowExpandable:function(n){return\"Not Expandable\"!==n.name}},pagination:{defaultCurrent:1,defaultPageSize:27},scroll:{y:350}}),i.a.createElement(\"p\",null,\"default data from: \",\"https://www.reddit.com/subreddits/popular.json\"))},Dn=function(n){var e=n.data,t=n.selectedRowKeys,r=n.author,a=(n.handleUpdateRowKeys,t.length>0);return i.a.createElement(\"div\",null,i.a.createElement(\"div\",{className:\"tableHeader\"},i.a.createElement(zn.a,{color:\"#87d068\"},\"Step 2: Select a post\"),a?i.a.createElement(\"p\",null,\"Selected author: \".concat(r,\" \")):i.a.createElement(\"p\",null,\"Selected author: (No selection)\")),i.a.createElement(Tn.a,{onRow:function(e,t){return{onClick:function(){var r,i;r=e,i=t,(0,n.handleUpdatePostData)(r,i)}}},rowSelection:void 0,columns:Cn,dataSource:e,pagination:{defaultCurrent:1,defaultPageSize:12},scroll:{y:350}}),i.a.createElement(\"p\",null,\"default data from: \",\"https://www.reddit.com/r/PublicFreakout/hot.json\"))},On=t(1127),Gn=t(1109),Bn=t(1110),Mn=t(1136),In=t(1138),Fn=t(1139),Rn=(t(805),function(n){for(var e=n.data,t=n.userPostData,r=e.title,a=e.author,o=e.url,s=e.selftext,l=e.preview,u=e.thumbnail,d=l?l.images[0].source.url:\"\",c=\"https://www.reddit.com/user/\".concat(a,\".json\"),m=[],h=0;h<t.length;h++)m.push({href:t[h].url||t[h].link_permalink,title:t[h].title||t[h].link_title,avatar:\"\",link_url:t[h].link_url});return i.a.createElement(On.a,{cover:i.a.createElement(Gn.a,{effect:\"fade\"},i.a.createElement(\"img\",{alt:\"thumbnail\",src:u||\"https://servicechannel.com/wp-content/uploads/2020/01/2020-home-hero-image-rev.png\"}),d&&i.a.createElement(\"img\",{alt:\"preImg Forbidden 403\",src:d}))},!a&&i.a.createElement(\"div\",null,\"Please go through step 1 _> step 2,  then you'll see the post info here\"),a&&i.a.createElement(i.a.Fragment,null,i.a.createElement(\"p\",{className:\"postTitle\"},r),i.a.createElement(Bn.a,{author:i.a.createElement(zn.a,{color:\"success\"},\"Author: \",a),avatar:i.a.createElement(In.a,null),content:i.a.createElement(i.a.Fragment,null,i.a.createElement(Fn.a,null),\"Current Link:\",i.a.createElement(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:o},o),i.a.createElement(\"p\",null,s||\"(NO text)\"))}),i.a.createElement(\"h5\",null,\"Author posts list:(\",i.a.createElement(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:c},c),\")\"),i.a.createElement(Mn.b,{itemLayout:\"vertical\",size:\"large\",pagination:{onChange:function(n){console.log(n)},pageSize:6},dataSource:m,renderItem:function(n,e){return i.a.createElement(Mn.b.Item,{key:n.title},i.a.createElement(Mn.b.Item.Meta,{title:i.a.createElement(\"a\",{target:\"_blank\",rel:\"noopener noreferrer\",href:n.href},n.title)}))}})))}),Hn=(t(817),Ln.a.Header),Un=Ln.a.Footer,Vn=function(n){Object(un.a)(t,n);var e=Object(dn.a)(t);function t(){var n;Object(sn.a)(this,t);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return(n=e.call.apply(e,[this].concat(a))).state={subredditListData:[],subredditListSelectedRowKeys:[],postListData:[],postListSelectedRowKeys:[],postDetailData:{},url:\"\",selectedPostAuthor:\"\",userPostData:[],searchText:\"\",searchedColumn:\"\"},n.updateUrl=function(e,t){n.setState({subredditListSelectedRowKeys:[t],postListSelectedRowKeys:[]}),e&&kn.GET({url:\"\".concat(e,\"hot.json\")}).then((function(t){var r=t.map((function(n,e){return Object(c.a)(Object(c.a)({},n.data),{},{key:e})}));n.setState({url:e,postListData:r})}))},n.updatePostData=function(e,t){kn.GET({url:\"user/\".concat(e.author,\".json\")}).then((function(r){var i=r.map((function(n,e){return Object(c.a)(Object(c.a)({},n.data),{},{key:e})}));n.setState({postDetailData:e,postListSelectedRowKeys:[t],selectedPostAuthor:e.author,userPostData:i})}))},n.updateRowKeys=function(e,t){n.setState(Object(En.a)({},t,e))},n.handleSearch=function(e,t,r){t(),n.setState({searchText:e[0]})},n.getColumnSearchProps=function(e){return{filterDropdown:function(t){var r=t.setSelectedKeys,a=t.selectedKeys,o=t.confirm,s=t.clearFilters;return i.a.createElement(\"div\",{style:{padding:8}},i.a.createElement(Nn.a,{ref:function(e){n.searchInput=e},placeholder:\"Search \".concat(e),value:a[0],onChange:function(n){return r(n.target.value?[n.target.value]:[])},onPressEnter:function(){return n.handleSearch(a,o,e)},style:{width:188,marginBottom:8,display:\"block\"}}),i.a.createElement(An.a,{type:\"primary\",onClick:function(){return n.handleSearch(a,o,e)},size:\"small\",style:{width:90,marginRight:8}},\"Search\"),i.a.createElement(An.a,{onClick:function(){return n.handleReset(s)},size:\"small\",style:{width:90}},\"Reset\"))},onFilter:function(n,t){return t[e].toString().toLowerCase().includes(n.toLowerCase())},onFilterDropdownVisibleChange:function(e){e&&setTimeout((function(){return n.searchInput.select()}))},render:function(t){return n.state.searchedColumn===e?i.a.createElement(qn.Highlighter,{highlightStyle:{backgroundColor:\"#ffc069\",padding:0},searchWords:[n.state.searchText],autoEscape:!0,textToHighlight:t.toString()}):t}}},n.handleReset=function(e){e(),n.setState({searchText:\"\"})},n}return Object(ln.a)(t,[{key:\"componentDidMount\",value:function(){var n=this,e=fn.a.get(\"https://www.reddit.com/subreddits/popular.json\"),t=fn.a.get(\"https://www.reddit.com/r/PublicFreakout/hot.json\");fn.a.all([e,t]).then(fn.a.spread((function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=t[0].data.data.children.map((function(n,e){return Object(c.a)(Object(c.a)({},n.data),{},{key:e})})),a=t[1].data.data.children.map((function(n,e){return Object(c.a)(Object(c.a)({},n.data),{},{key:e})}));n.setState({subredditListData:i,postListData:a})}))).catch((function(n){console.error(\"Failed on \".concat(n))}))}},{key:\"render\",value:function(){var n=this.state,e=n.subredditListData,t=n.subredditListSelectedRowKeys,r=n.postListData,a=n.postListSelectedRowKeys,o=n.selectedPostAuthor,s=n.postDetailData,l=n.url,u=n.userPostData,d={handleUpdateRowKeys:this.updateRowKeys,url:l},m=Object(c.a)(Object(c.a)({},d),{},{handleUpdateUrl:this.updateUrl,data:e,selectedRowKeys:t,handleGetColumnSearchProps:this.getColumnSearchProps}),h=Object(c.a)(Object(c.a)({},d),{},{handleUpdatePostData:this.updatePostData,data:r,author:o,selectedRowKeys:a});return i.a.createElement(Ln.a,null,i.a.createElement(Hn,null,\" RedditBrowser \"),i.a.createElement(_n.a,{className:\"contenWrap\"},i.a.createElement(Wn.a,{xs:24,sm:24,md:11,lg:6,xl:6,className:\"subredditList\"},i.a.createElement(Pn,m)),i.a.createElement(Wn.a,{xs:24,sm:24,md:11,lg:6,xl:6,className:\"postList\"},i.a.createElement(Dn,h)),i.a.createElement(Wn.a,{xs:24,sm:24,md:24,lg:10,xl:10,className:\"postDetails\"},i.a.createElement(Rn,{data:s,userPostData:u}))),i.a.createElement(Un,null,\"RedditBrowser for Service Channel @ Lin Zhang\"))}}]),t}(i.a.Component),Qn=function(){return i.a.createElement(Vn,null)};var Jn=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(Qn,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))},Kn=t(500),Yn=t(562),Xn=t.n(Yn),Zn=t(120),$n=t(1130),ne=t(1125),ee=t(1119),te=t(1122),re=t(1123),ie=t(1124),ae=t(1129),oe=[{id:\"0002\",name:\"Tic_Tac_Toe\",refLink:[],level:\"Easy\",tag:[],notes:\"\",jsSolution:'\\n        function calculateWinner(squares) {\\n            const lines = [\\n            [0, 1, 2],\\n            [3, 4, 5],\\n            [6, 7, 8],\\n            [0, 3, 6],\\n            [1, 4, 7],\\n            [2, 5, 8],\\n            [0, 4, 8],\\n            [2, 4, 6]\\n            ];\\n            for (let i = 0; i < lines.length; i++) {\\n            const [a, b, c] = lines[i];\\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n                return lines[i];\\n            }\\n            }\\n            return null;\\n        }\\n        \\n        class Game extends React.Component {\\n            constructor(props) {\\n            super(props);\\n            this.state = {\\n                history: [\\n                {\\n                    squares: Array(9).fill(null)\\n                }\\n                ],\\n                stepNumber: 0,\\n                xIsNext: true\\n            };\\n            }\\n        \\n            handleClick(i) {\\n            const history = this.state.history.slice(0, this.state.stepNumber + 1);\\n            console.log(history.length);\\n            const current = history[history.length - 1];\\n            const squares = current.squares.slice();\\n            if (calculateWinner(squares) || squares[i]) {\\n                return;\\n            }\\n        \\n            squares[i] = this.state.xIsNext ? \"X\" : \"O\";\\n            this.setState({\\n                history: history.concat([\\n                {\\n                    squares: squares\\n                }\\n                ]),\\n                stepNumber: history.length,\\n                xIsNext: !this.state.xIsNext\\n            });\\n            }\\n        \\n            jumpTo(step) {\\n            this.setState({\\n                stepNumber: step,\\n                xIsNext: step % 2 === 0\\n            });\\n            }\\n        \\n            render() {\\n            const history = this.state.history;\\n            const current = history[this.state.stepNumber];\\n            const winnerLines = calculateWinner(current.squares);\\n            const winner = winnerLines ? current.squares[winnerLines[0]] : null;\\n            const moves = history.map((step, move) => {\\n                const desc = move ? \"Go to move #\" + move : \"Go to game start\";\\n                return (\\n                <li key={move}>\\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\\n                </li>\\n                );\\n            });\\n            const status = winner\\n                ? \"Winner: winner winnerLines\"\\n                : \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\\n        \\n            return (\\n                <div className=\"game\">\\n                <div className=\"game-board\">\\n                    <Board\\n                    squares={current.squares}\\n                    highlight={winner ? winnerLines : []}\\n                    onClick={i => this.handleClick(i)}\\n                    />\\n                </div>\\n                <div className=\"game-info\">\\n                    <div>{status}</div>\\n                    <ol>{moves}</ol>\\n                </div>\\n                </div>\\n            );\\n            }\\n        }\\n    '},{id:\"0003\",name:\"isValidParentheses\",refLink:[\"https://www.lintcode.com/problem/valid-parentheses/description\",\"https://www.jiuzhang.com/solution/valid-parentheses/\",\"https://leetcode-cn.com/problems/valid-parentheses/solution/javascript-you-xiao-de-gua-hao-by-rhinoc/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:'\\n        // Given a string containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', \\n        // determine if the input string is valid.\\n\\n        // The brackets must close in the correct order, \"()\" \\n        // and \"()[]{}\" are all valid but \"(]\" and \"([)]\" are not.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/valid-parentheses/\\n\\n        var isValid = function(s) {\\n            let stack = [];\\n            var obj = {\\n                \"]\": \"[\",\\n                \"}\": \"{\",\\n                \")\": \"(\",\\n            };\\n        \\n            for(var i = 0; i < s.length; i++) {\\n                if(s[i] === \"[\" || s[i] === \"{\" || s[i] === \"(\") {\\n                    stack.push(s[i]);\\n                } else {\\n                    var key = stack.pop();\\n                    if(obj[key] !== s[i]) {\\n                        return false;\\n                    }\\n                }\\n            }\\n            if(!stack.length) {\\n                return true;\\n            }\\n            return false;\\n        };\\n\\n        var isValid = function(s) {\\n            var stack = [];\\n            var map = new Map();\\n            map.set(\"(\",\")\");\\n            map.set(\"{\",\"}\");\\n            map.set(\"[\",\"]\");\\n            for(var i = 0;i < s.length;i++){\\n                if(!map.get(s[i])){\\n                    if(stack.length == 0){\\n                        return false;\\n                    }\\n                    var topEle = stack.pop();\\n                    if(map.get(topEle) != s[i]){\\n                        return false;\\n                    }\\n                }else{\\n                    stack.push(s[i]);\\n                }\\n            }\\n            return stack.length == 0;\\n        };\\n    '},{id:\"0004\",name:\"Classical Binary Search\",refLink:[\"https://www.lintcode.com/problem/classical-binary-search/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // Binary search is a famous question in algorithm.\\n\\n        // For a given sorted array (ascending order) and a target number, \\n        // find the first index of this number in O(log n) time complexity.\\n        \\n        // If the target number does not exist in the array, return -1.\\n        \\n        // Example\\n        // If the array is [1, 2, 3, 3, 4, 5, 10], for given target 3, return 2.\\n\\n        function findPosition(nums, target) {\\n            if(!nums || !nums.length) return -1\\n            let start = 0\\n            let end = nums.length - 1\\n\\n            // while loop to only reduce the range, \\n            // check the value outside the while loop later\\n\\n            while(start + 1 < end){\\n                let mid = Math.floor((start + end)/2)\\n                if(nums[mid] === target){\\n                    return mid\\n                } else if (nums[mid] < target){\\n                    start = mid + 1\\n                } else if (nums[mid] > target){\\n                    end = mid - 1\\n                }\\n          \\n            }\\n          \\n            if(nums[start] === target){\\n              return start\\n            }\\n            if(nums[end] === target){\\n              return end\\n            }\\n            return -1\\n        }\\n    \"},{id:\"0009\",name:\"First_Position_Of_Target\",refLink:[\"https://www.lintcode.com/problem/first-position-of-target/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // For a given sorted array (ascending order) and a target number, \\n        // find the first index of this number in O(log n) time complexity.\\n\\n        // If the target number does not exist in the array, return -1.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/first-position-of-target/\\n\\n        /**\\n         * @param nums: The integer array.\\n         * @param target: Target to find.\\n         * @return: The first position of target. Position starts from 0.\\n         */\\n        const binarySearch = function (nums, target) {\\n            var left, right, mid, res;\\n            res = 0;\\n            left = 0;\\n            right = nums.length - 1;\\n            while (left <= right) {\\n                mid = Math.floor((left + right) / 2);\\n                if (nums[mid] === target) {\\n                    res = mid;\\n                }\\n                if (nums[mid] >= target) {\\n                    right = mid - 1;\\n                } else {\\n                    left = mid + 1;\\n                }\\n            }\\n            if (nums[res] != target) {\\n                return -1;\\n            }\\n            return res;\\n        }\\n    \"},{id:\"0005\",name:\"find_first_and_last_position_of_element_in_sorted_array\",refLink:[\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/javascriptzui-qing-xi-de-er-fen-cha-zhao-fu-shuo-m/\",\"https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/solution\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // Given an array of integers nums sorted in ascending order, \\n        // find the starting and ending position of a given target value.\\n\\n        // Your algorithm's runtime complexity must be in the order of O(log n).\\n        \\n        // If the target is not found in the array, return [-1, -1].\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/find-first-and-last-position-of-element-in-sorted-array/\\n\\n        /**\\n         * @param {number[]} nums\\n         * @param {number} target\\n         * @return {number[]}\\n         */\\n        var searchRange = function (nums, target) {\\n            let low = 0;\\n            let high = nums.length\\n            while (low < high) {\\n                let mid = low + Math.floor((high - low) / 2)\\n                if (nums[mid] >= target) {\\n                    high=mid\\n                }\\n                else {\\n                    low=mid+1\\n                }\\n            } \\n            \\n            //\\u5982\\u679c\\u6ca1\\u6709\\u627e\\u5230\\u6700\\u5de6\\u7d22\\u5f15\\uff0c\\u8bf4\\u660e\\u503c\\u4e0d\\u5728\\u6570\\u7ec4\\u4e2d\\uff0c\\u76f4\\u63a5\\u8fd4\\u56de [-1,-1]\\n            if (nums[low] !== target) return [-1, -1]\\n            let resut = [low]\\n            high = nums.length\\n            low=0\\n            while (low < high) {\\n                let mid = low + Math.floor((high - low) / 2)\\n                if (nums[mid] > target) {\\n                    high = mid\\n                } else {\\n                    low = mid + 1\\n                }\\n            }\\n            //\\u6700\\u53f3\\u7d22\\u5f15\\u662f low-1\\n            resut[1] = low - 1\\n            return resut\\n        };\\n    \"},{id:\"0010\",name:\"last_position_of_target\",refLink:[\"https://www.lintcode.com/problem/last-position-of-target/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\\u53ef\\u63d0\\u4ea4\\uff0c\\u4e0d\\u80fd\\u8fc7\\u6240\\u6709test\",jsSolution:\"\\n        // Find the last position of a target number in a sorted array. Return -1 if target does not exist.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/last-position-of-target/\\n\\n        /**\\n         * @param nums: An integer array sorted in ascending order\\n         * @param target: An integer\\n         * @return: An integer\\n         */\\n        const lastPosition = function (nums, target) {\\n            \\n            // write your code here\\n            let left = 0;\\n            let right = nums.length;\\n            while(left < right){\\n                let mid = (left + right) >> 1;\\n                if(nums[mid] == target){\\n                    left = mid + 1; \\n                }else if(nums[mid] < target){\\n                    left = mid + 1;\\n                }else if(nums[mid] > target){\\n                    right = mid;\\n                }\\n            }\\n            left = left - 1\\n            return left\\n        }\\n    \"},{id:\"0008\",name:\"First_Bad_Version\",refLink:[\"https://www.jiuzhang.com/solution/first-bad-version/\",\"https://www.jiuzhang.com/solutions/first-bad-version/\",\"https://leetcode-cn.com/problems/first-bad-version/solution/er-fen-cha-zhao-by-cctt-2/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // The code base version is an integer start from 1 to n. One day, \\n        // someone committed a bad version in the code case, \\n        // so it caused this version and the following versions are all failed in the unit tests. Find the first bad version.\\n\\n        // You can call isBadVersion to help you determine which version is the first bad one. \\n        // The details interface can be found in the code's annotation part.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/first-bad-version/\\n\\n        /**\\n         * @param n: An integer\\n         * @return: An integer which is the first bad version.\\n         */\\n        const findFirstBadVersion = function (n) {\\n            // write your code here\\n            var left = 1;\\n            var right = n;\\n            while(left<right){\\n                mid = left+Math.floor((right-left)/2);\\n                if(isBadVersion(mid)){\\n                    right = mid;\\n                }else{\\n                    left=mid+1;\\n                }\\n            }\\n            return left;\\n        }\\n    \"},{id:\"0012\",name:\"Search_in_a_Big_Sorted_Array\",refLink:[\"https://www.lintcode.com/problem/search-in-a-big-sorted-array/\",\"https://www.lintcode.com/problem/search-in-a-big-sorted-array/description\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"JAVA\",jsSolution:\"\\n        // Given a big sorted array with non-negative integers sorted by non-decreasing order. \\n        // The array is so big so that you can not get the length of the whole array directly, \\n        // and you can only access the kth number by ArrayReader.get(k) (or ArrayReader->get(k) for C++).\\n\\n        // Find the first index of a target number. \\n        // Your algorithm should be in O(log k), where k is the first index of the target number.\\n        \\n        // Return -1, if the number doesn't exist in the array.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/search-in-a-big-sorted-array/\\n\\n        public class Solution {\\n            /*\\n             * @param reader: An instance of ArrayReader.\\n             * @param target: An integer\\n             * @return: An integer which is the first index of target.\\n             */\\n            public int searchBigSortedArray(ArrayReader reader, int target) {\\n                int firstElement = reader.get(0);\\n                if (firstElement == target) \\n                    return 0;\\n                else if (firstElement > target)\\n                    return -1;\\n                \\n                int idx = 0, jump = 1;\\n                while (jump != 0) {\\n                    while (jump != 0 && reader.get(idx + jump) >= target)   // \\u8d8a\\u754c\\u65f6\\u8fd4\\u56deINT_MAX, \\u5fc5\\u7136\\u4e0d\\u5c0f\\u4e8etarget\\n                        jump >>= 1;\\n                    idx += jump;\\n                    jump <<= 1;     // \\u5f53jump\\u4e3a0\\u65f6, \\u5de6\\u79fb\\u4e00\\u4f4d\\u4e0d\\u5f71\\u54cd\\u5b83\\u7684\\u503c, \\u4e0d\\u5f71\\u54cd\\u5faa\\u73af\\u7ed3\\u675f\\n                }\\n                \\n                if (reader.get(idx + 1) == target)\\n                    return idx + 1;\\n                else\\n                    return -1;\\n            }\\n        }\\n        \\n        /////////////// \\u65b9\\u6cd52 \\u4e8c\\u5206\\n        \\n        /**\\n         * Definition of ArrayReader:\\n         * \\n         * public class ArrayReader {\\n         * public int get(int index) {\\n         *          // return the number on given index, \\n         *          // return 2147483647 if the index is invalid.\\n         *     }\\n         * };\\n         */\\n        public class Solution {\\n            /*\\n             * @param reader: An instance of ArrayReader.\\n             * @param target: An integer\\n             * @return: An integer which is the first index of target.\\n             */\\n            public int searchBigSortedArray(ArrayReader reader, int target) {\\n                int l = 0, r = 1, mid;\\n                while (reader.get(r) < target)     // \\u8d8a\\u754c\\u8fd4\\u56deINT_MAX, \\u5fc5\\u7136\\u5927\\u4e8etarget, \\u6240\\u4ee5\\u6ca1\\u6709\\u5173\\u7cfb\\n                    r <<= 1;\\n                \\n                while (l < r) {\\n                    mid = (l + r) >> 1;\\n                    if (reader.get(mid) >= target)\\n                        r = mid;\\n                    else\\n                        l = mid + 1;\\n                }\\n                \\n                if (reader.get(l) == target)\\n                    return l;\\n                else\\n                    return -1;\\n            }\\n        }\\n    \"},{id:\"0006\",name:\"Find_Minimum_in_Rotated_Sorted_Array\",refLink:[\"https://www.jiuzhang.com/solution/find-minimum-in-rotated-sorted-array/\",\"https://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/description\",\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/js-er-fen-cha-zhao-by-ignore_express/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // Suppose a sorted array in ascending order is rotated at some pivot unknown to you beforehand.\\n\\n        // (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\\n        \\n        // Find the minimum element.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/\\n\\n        /**\\n         * @param nums: a rotated sorted array\\n         * @return: the minimum number in the array\\n         */\\n        const findMin = function (nums) {\\n            let low = 0,\\n            high = nums.length - 1,\\n            ans = Infinity;\\n        \\n            while (low <= high) {\\n                let mid = low + Math.floor((high - low) / 2);\\n                if (nums[low] <= nums[mid]) {\\n                    ans = Math.min(ans, nums[low]);\\n                    low = mid + 1;\\n                } else {\\n                    ans = Math.min(ans, nums[mid]);\\n                    high = mid - 1;\\n                }\\n            }\\n            return ans;\\n        }\\n    \"},{id:\"0011\",name:\"maximum_number_in_mountain_sequence\",refLink:[\"https://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description\",\"https://www.jiuzhang.com/solution/maximum-number-in-mountain-sequence/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"JAVA, js doesn't work\",jsSolution:\"\\n        // Given a mountain sequence of n integers which increase firstly and then decrease, find the mountain top.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/maximum-number-in-mountain-sequence/\\n\\n        // version 1\\uff1a\\u4e8c\\u5206\\u6cd5\\n        public class Solution {\\n            /**\\n             * @param nums a mountain sequence which increase firstly and then decrease\\n             * @return then mountain top\\n             */\\n            public int mountainSequence(int[] nums) {\\n                // Write your code here\\n                if (nums == null || nums.length == 0) {\\n                    return 0;\\n                }\\n                int start = 0;\\n                int end = nums.length - 1;\\n                while (start + 1 < end) {\\n                    int mid = start + (end - start) / 2;\\n                    if (nums[mid] > nums[mid + 1]) {\\n                        end = mid;\\n                    } else {\\n                        start = mid;\\n                    }\\n                }\\n                return Math.max(nums[start], nums[end]);\\n            }\\n        }\\n    \"},{id:\"0007\",name:\"find_peak_element\",refLink:[\"https://www.lintcode.com/problem/find-peak-element/\",\"https://www.lintcode.com/problem/find-peak-element/description\",\"https://leetcode-cn.com/problems/find-peak-element/solution/\"],level:\"Easy\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // There is an integer array which has the following features:\\n\\n        // The numbers in adjacent positions are different.\\n        // A[0] < A[1] && A[A.length - 2] > A[A.length - 1].\\n        // We define a position P is a peak if:\\n        \\n        // A[P] > A[P-1] && A[P] > A[P+1]\\n        // Find a peak element in this array. Return the index of the peak.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/find-peak-element/\\n\\n        /**\\n         * @param {number[]} nums\\n         * @return {number}\\n         */\\n        var findPeakElement = function(nums = []) {\\n            const length = nums.length;\\n            let index = length - 1;\\n            \\n            for(let i = 0; i < length - 1; i++) {\\n                const item = nums[i];\\n                const after = nums[i + 1];\\n\\n                if(item > after) {\\n                    return i;\\n                }\\n            }\\n\\n            return index;\\n        };\\n    \"},{id:\"0013\",name:\"search_in_rotated_sorted_array\",refLink:[\"https://www.lintcode.com/problem/search-in-rotated-sorted-array/description\",\"https://www.jiuzhang.com/solution/search-in-rotated-sorted-array/#tag-highlight-lang-javascript\",\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/\"],level:\"Medium\",tag:[\"Binary Search\"],notes:\"\",jsSolution:\"\\n        // Suppose a sorted array is rotated at some pivot unknown to you beforehand.\\n\\n        // (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\\n        \\n        // You are given a target value to search. If found in the array return its index, otherwise return -1.\\n        \\n        // You may assume no duplicate exists in the array.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/search-in-rotated-sorted-array/\\n\\n        /**\\n         * @param A: an integer rotated sorted array\\n         * @param target: an integer to be searched\\n         * @return: an integer\\n         */\\n\\n        const search = function (A, target) {\\n            if (A === null || A.length === 0) {\\n                return -1;\\n            }\\n            var start = 0;\\n            var end = A.length - 1;\\n            var mid;\\n            while (start + 1 < end) {\\n                mid = start + Math.floor((end - start) / 2);\\n                if (A[mid] === target) {\\n                    return mid;\\n                }\\n                if (A[start] < A[mid]) {\\n                    if (A[start] <= target && target <= A[mid]) {\\n                        end = mid;\\n                    } else {\\n                        start = mid;\\n                    }\\n                } else {\\n                    if (A[mid] <= target && target <= A[end]) {\\n                        start = mid;\\n                    } else {\\n                        end = mid;\\n                    }\\n                }\\n            }\\n            if (A[start] === target) {\\n                return start;\\n            }\\n            if (A[end] === target) {\\n                return end;\\n            }\\n            return -1;\\n        }\\n    \"},{id:\"0014\",name:\"Binary_Tree_Preorder_Traversal\",refLink:[\"https://www.lintcode.com/problem/binary-tree-preorder-traversal/description\",\"https://www.jiuzhang.com/solution/binary-tree-preorder-traversal/\",\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/jsde-you-ya-shi-xian-by-ba-qian-niao-2/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, return the preorder traversal of its nodes' values.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/binary-tree-preorder-traversal/\\n\\n\\n        const preorderTraversal = function(root) {\\n            return root ? [root.val, ...preorderTraversal(root.left), ...preorderTraversal(root.right)] : []\\n        };\\n\\n        const preorderTraversal = function(root) {\\n            let arr = [], res = []\\n            root && arr.push(root)\\n        \\n            while(arr.length > 0) {\\n                let cur = arr.pop()\\n                res.push(cur.val)\\n        \\n                cur.right && arr.push(cur.right)\\n                cur.left && arr.push(cur.left)\\n            }\\n            return res\\n        };\\n    \"},{id:\"0015\",name:\"Binary_Tree_Inorder_Traversal\",refLink:[\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/jszhong-xu-bian-li-by-gaoyibo/\",\"https://www.lintcode.com/problem/binary-tree-inorder-traversal/description\",\"https://www.jiuzhang.com/solution/binary-tree-inorder-traversal/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, return the inorder traversal of its nodes' values.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/binary-tree-inorder-traversal/\\n\\n\\n        /**\\n         * @param root: A Tree\\n         * @return: Inorder in ArrayList which contains node values.\\n         */\\n        const inorderTraversal = function (root) {\\n            // write your code here\\n            let result = []\\n            \\n            if (root === null) {\\n                return []\\n            }\\n            \\n            let left = inorderTraversal(root.left)\\n            let right = inorderTraversal(root.right)\\n            \\n            result.push.apply(result, left)\\n            result.push(root.val)\\n            result.push.apply(result, right)\\n            \\n            // traverse(root, result)\\n            return result\\n        }\\n\\n        // function traverse (root, result) {\\n        //     if (root === null) {\\n        //         return []\\n        //     }\\n            \\n        //     traverse(root.left, result)\\n        //     result.push(root.val)\\n        //     traverse(root.right, result)\\n        // }\\n\\n        // const inorderTraversal = function(root) {\\n        //     let arr = []\\n        //     let stackArr = []\\n        //     while(root!=null || stackArr.length!=0){\\n\\n        //         while(root!=null){\\n        //             stackArr.push(root)\\n        //             root = root.left\\n        //         }\\n        //         root = stackArr.pop()\\n        //         arr.push(root.val)\\n        //         root = root.right\\n        //     }\\n        //     return arr\\n        // };\\n    \"},{id:\"0016\",name:\"Binary_Tree_Postorder_Traversal \",refLink:[\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/145er-cha-shu-de-hou-xu-bian-li-javascript-ti-jie-/\",\"https://www.jiuzhang.com/solution/binary-tree-postorder-traversal/\",\"https://www.lintcode.com/problem/binary-tree-postorder-traversal/description\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, return the postorder traversal of its nodes' values.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/binary-tree-postorder-traversal/\\n\\n\\n        // let preNode = function (root,arr){\\n        //     if(!root) return [];\\n        //     preNode(root.left,arr);\\n        //     preNode(root.right,arr);\\n        //     arr.push(root.val);\\n        // }\\n\\n        // const postorderTraversal = function(root) {\\n        //     if(!root) return [];\\n        //     let arr =[];\\n        //     preNode(root,arr);\\n        //     return arr\\n        // };\\n\\n        const postorderTraversal = root => {\\n        let res = [], stack = []\\n        while (root || stack.length) {\\n            res.unshift(root.val)\\n            if (root.left) stack.push(root.left)\\n            if (root.right) stack.push(root.right)\\n            root = stack.pop()\\n        }\\n        return res\\n        }\\n    \"},{id:\"0017\",name:\"Maximum_Depth_of_Binary_Tree\",refLink:[\"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/104-er-cha-shu-de-zui-da-shen-du-by-alexer-660/\",\"https://www.lintcode.com/problem/maximum-depth-of-binary-tree/description\",\"https://www.jiuzhang.com/solution/maximum-depth-of-binary-tree/#tag-other\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:'\\n        // Given a binary tree, find its maximum depth.\\n\\n        // The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/maximum-depth-of-binary-tree/\\n\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u9012\\u5f52 DFS\\n        \\u8282\\u70b9\\u7684\\u9ad8\\u5ea6 = Max(\\u5de6\\u5b50\\u6811\\u7684\\u9ad8\\u5ea6\\uff0c\\u53f3\\u5b50\\u6811\\u7684\\u9ad8\\u5ea6) + 1\\n        \\u4ee5\\u6b64\\u7c7b\\u63a8\\uff0c\\u6700\\u540e\\u4e00\\u4e2a\\u5de6\\u6216\\u53f3\\u8282\\u70b9\\u9ad8\\u5ea6\\u4e3a0 \\u518d\\u53cd\\u8fc7\\u6765\\u76f8\\u52a0\\u56de\\u53bb\\u5373\\u53ef\\n        \\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(n)\\n        \\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\n        \\u6700\\u574f\\u60c5\\u51b5\\u4e0b O(n) \\u9000\\u5316\\u4e3a\\u5355\\u94fe\\u8868\\n        \\u6700\\u597d\\u60c5\\u51b5\\u4e0b O(logn) \\u4e3a\\u5e73\\u8861\\u4e8c\\u53c9\\u6811\\u4e14\\u9ad8\\u5ea6\\u4e3alogn\\n        /**\\n         * Definition for a binary tree node.\\n         * function TreeNode(val) {\\n         *     this.val = val;\\n         *     this.left = this.right = null;\\n         * }\\n         */\\n        /**\\n         * @param {TreeNode} root\\n         * @return {number}\\n         */\\n        var maxDepth = function(root) {\\n            function getDepth(root,leftSubtreeDepth,rightSubtreeDepth){\\n                if(root != null){\\n                    leftSubtreeDepth = getDepth(root.left);\\n                    rightSubtreeDepth = getDepth(root.right);\\n                    return Math.max(leftSubtreeDepth,rightSubtreeDepth) + 1;   \\n                }else{\\n                    return 0;\\n                }\\n            }\\n            return getDepth(root);\\n        };\\n\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u961f\\u5217 BFS\\n        \\u5e7f\\u5ea6\\u4f18\\u5148\\u904d\\u5386 BFS\\n        \\u6b64\\u5904\\u5373\\u4e8c\\u53c9\\u6811\\u7684\\u5c42\\u6b21(\\u5e8f)\\u904d\\u5386\\n        \\u6c42\\u6700\\u5927\\u6df1\\u5ea6 \\u4ea6\\u5373 \\u6c42\\u4e8c\\u53c9\\u6811\\u6709\\u51e0\\u5c42\\n        \\u5e7f\\u5ea6\\u4f18\\u5148\\u4ee3\\u7801\\n        \\u7279\\u70b9\\uff1a\"\\u4ece\\u5de6\\u5230\\u53f3\\uff0c\\u4ece\\u4e0a\\u5230\\u4e0b\"\\n        \\u961f\\u5217\\n        \\u7279\\u70b9\\uff1a\"\\u5148\\u8fdb\\u5148\\u51fa\"\\n        \\u961f\\u5217\\u5b9e\\u73b0\\u5e7f\\u5ea6\\u4f18\\u5148\\n        \\u904d\\u5386\\u4e8c\\u53c9\\u6811\\u8282\\u70b9\\uff0c\\u4f9d\\u6b21\\u5c06\\u5f53\\u524d\\u8282\\u70b9 \\u548c\\u5b83\\u7684\\u5de6\\u53f3\\u5b50\\u8282\\u70b9\\u5165\\u961f\\uff0c\\u5e76\\u518d\\u4e00\\u4e00\\u51fa\\u961f\\n        \\u9488\\u5bf9\\u5b50\\u8282\\u70b9\\u7684\\u8282\\u70b9\\u91cd\\u590d\\u4e0a\\u4e00\\u6b65\\u64cd\\u4f5c\\n        \\u521a\\u597d\\u7b26\\u5408\"\\u5148\\u8fdb\\u5148\\u51fa\" => \"\\u5148\\u5165\\u961f\\u518d\\u51fa\\u961f\"\\n        \\u6570\\u7ec4\\uff1apush -> shift\\n        \\u6240\\u4ee5\\u4e8c\\u53c9\\u6811\\u7684\\u5e7f\\u5ea6\\u4f18\\u5148\\u5373\\u5c42\\u5e8f\\u904d\\u5386\\u7528\\u961f\\u5217\\u5b9e\\u73b0\\u4e3a\\n        /**\\n         * Definition for a binary tree node.\\n         * function TreeNode(val) {\\n         *     this.val = val;\\n         *     this.left = this.right = null;\\n         * }\\n         */\\n        /**\\n         * @param {TreeNode} root\\n         * @return {number}\\n         */\\n        var maxDepth = function(root) {\\n            if(root == null){\\n                return 0;\\n            }\\n            var tmpQueue = [root];\\n            var result = [];\\n            var currNode = null;\\n            while(tmpQueue.length != 0){ --------------------------(1)\\n                currNode = tmpQueue.shift();\\n                result.push(currNode);\\n                if(node.left != null){\\n                    tmpQueue.push(node.left);\\n                }\\n                if(node.right != null){\\n                    tmpQueue.push(node.right);\\n                }\\n            }\\n            return result;\\n        };\\n    '},{id:\"0018\",name:\"Binary_Tree_Paths\",refLink:[\"https://leetcode-cn.com/problems/binary-tree-paths/solution/binary-tree-paths-di-gui-by-cnabbott/\",\"https://www.lintcode.com/problem/binary-tree-paths/description\",\"https://www.jiuzhang.com/solution/binary-tree-paths/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, return all root-to-leaf paths.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/binary-tree-paths/\\n\\n\\n        var binaryTreePaths = function(root) {\\n            if (!root) return []\\n            if (root.left === null && root.right === null) return [root.val.toString()]\\n            let left = binaryTreePaths(root.left)\\n            let right = binaryTreePaths(root.right)\\n            return left.concat(right).map(item => root.val + '->' + item)\\n        }\\n\\n        //\\n        // \\u9012\\u5f52\\u7684\\u7248\\u672c\\n        var binaryTreePaths = function(root) {\\n            const res = [];\\n            function findNext(root, route) {\\n                if(!root) return;\\n                if(!root.left && !root.right) res.push(route);\\n                findNext(root.left, root.left ? route + '->' + root.left.val : route);\\n                findNext(root.right, root.right ? route + '->' + root.right.val : route);\\n            }\\n            findNext(root, (root && root.val) + '');\\n            return res;\\n        }\\n\\n        // \\u975e\\u9012\\u5f52\\u7684\\u7248\\u672c\\n        var binaryTreePaths = function(root) {\\n            if(!root) return [];\\n            const stack = [root];\\n            let i = 1;\\n            const route = [root.val + ''];\\n            const res = [];\\n            while(i) {\\n                while(i--) {\\n                    const front = stack.pop();\\n                    if(!front) continue;\\n                    stack.push(front.left);\\n                    stack.push(front.right);\\n                    const resFront = route.pop();\\n                    if(!front.left && !front.right) {\\n                        res.push(resFront);\\n                        continue;\\n                    }\\n                    front.left && route.push(resFront + '->' + front.left.val);\\n                    front.right && route.push(resFront + '->' + front.right.val);\\n                }\\n                i = stack.length;\\n            }\\n            return res;\\n        };\\n    \"},{id:\"0019\",name:\"Minimum_Subtree\",refLink:[\"https://www.lintcode.com/problem/minimum-subtree/description\",\"https://www.jiuzhang.com/solution/minimum-subtree/#tag-highlight\"],level:\"Easy\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/minimum-subtree/\\n\\n        // version 1 : traverse + divide conquer\\n        public class Solution {\\n            private TreeNode subtree = null;\\n            private int subtreeSum = Integer.MAX_VALUE;\\n            /**\\n             * @param root the root of binary tree\\n             * @return the root of the minimum subtree\\n             */\\n            public TreeNode findSubtree(TreeNode root) {\\n                helper(root);\\n                return subtree;\\n            }\\n            \\n            private int helper(TreeNode root) {\\n                if (root == null) {\\n                    return 0;\\n                }\\n                \\n                int sum = helper(root.left) + helper(root.right) + root.val;\\n                if (sum <= subtreeSum) {\\n                    subtreeSum = sum;\\n                    subtree = root;\\n                }\\n                return sum;\\n            }\\n        }\\n    \"},{id:\"0020\",name:\"Balanced_Binary_Tree\",refLink:[\"https://leetcode-cn.com/problems/balanced-binary-tree/solution/di-gui-pan-duan-ping-heng-er-cha-shu-by-zhu-zhu-xi/\",\"https://www.lintcode.com/problem/balanced-binary-tree/description\",\"https://www.jiuzhang.com/solution/balanced-binary-tree/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, determine if it is height-balanced.\\n\\n        // For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/balanced-binary-tree/\\n\\n        /**\\n         * @param {TreeNode} root\\n         * @return {boolean}\\n         */\\n        var isBalanced = function(root) {\\n            // \\u904d\\u5386\\u5230\\u5e95\\u8fd8\\u6ca1\\u6709\\u53d1\\u73b0\\u9ad8\\u5ea6\\u5dee\\u8d85\\u8fc7 1 \\u7684\\u5de6\\u53f3\\u5b50\\u6811\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e2a\\u5b50\\u6811\\u80af\\u5b9a\\u7b26\\u5408\\u5e73\\u8861\\u4e8c\\u53c9\\u6811\\u7684\\u89c4\\u8303\\n            if (!root) {\\n                return true\\n            }\\n            // \\u5224\\u65ad\\u5de6\\u53f3\\u5b50\\u6811\\u7684\\u9ad8\\u5ea6\\u5dee\\uff0c\\u5982\\u679c\\u8d85\\u8fc7 1 \\u90a3\\u4e48\\u7acb\\u5373\\u8fd4\\u56de false\\n            if (Math.abs(getHeight(root.left) - getHeight(root.right)) > 1) {\\n                return false\\n            }\\n            // \\u5206\\u522b\\u9012\\u5f52\\u5de6\\u53f3\\u5b50\\u6811\\n            return isBalanced(root.left) && isBalanced(root.right)\\n            // \\u83b7\\u53d6\\u67d0\\u4e2a\\u5b50\\u6811\\u7684\\u9ad8\\u5ea6\\n            function getHeight (root) {\\n                if (!root) {\\n                    return 0\\n                }\\n                return Math.max(getHeight(root.left), getHeight(root.right)) + 1\\n            }\\n        };\\n    \"},{id:\"0021\",name:\"Subtree_with_Maximum_Average\",refLink:[\"https://www.lintcode.com/problem/subtree-with-maximum-average/description\",\"https://www.jiuzhang.com/solution/subtree-with-maximum-average/\"],level:\"Easy\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given a binary tree, find the subtree with maximum average. Return the root of the subtree.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/subtree-with-maximum-average/\\n\\n        // version 1: Traverse + Divide Conquer\\n        public class Solution {\\n            private class ResultType {\\n                public int sum, size;\\n                public ResultType(int sum, int size) {\\n                    this.sum = sum;\\n                    this.size = size;\\n                }\\n            }\\n            \\n            private TreeNode subtree = null;\\n            private ResultType subtreeResult = null;\\n            \\n            /**\\n             * @param root the root of binary tree\\n             * @return the root of the maximum average of subtree\\n             */\\n            public TreeNode findSubtree2(TreeNode root) {\\n                helper(root);\\n                return subtree;\\n            }\\n            \\n            private ResultType helper(TreeNode root) {\\n                if (root == null) {\\n                    return new ResultType(0, 0);\\n                }\\n                // \\u5206\\u6cbb\\u6cd5\\u8ba1\\u7b97\\u5de6\\u53f3\\u5b50\\u6811\\u7684\\u5e73\\u5747\\u503c\\n                ResultType left = helper(root.left);\\n                ResultType right = helper(root.right);\\n                // \\u5f53\\u524dsubtree\\u7684\\u7ed3\\u679c\\u662f\\u5de6\\u53f3\\u4e24\\u9897\\u5b50\\u6811\\u7684\\u548c\\u7684\\u5e73\\u5747\\u503c\\u52a0\\u4e0a\\u81ea\\u8eab\\n                ResultType result = new ResultType(\\n                    left.sum + right.sum + root.val,\\n                    left.size + right.size + 1\\n                );\\n                // \\u6253\\u64c2\\u53f0\\u6bd4\\u8f83\\u5f97\\u5230\\u6700\\u5927\\u5e73\\u5747\\u503c\\u7684\\u5b50\\u6811\\n                if (subtree == null ||\\n                    subtreeResult.sum * result.size < result.sum * subtreeResult.size\\n                ) {\\n                    subtree = root;\\n                    subtreeResult = result;\\n                }\\n                return result;\\n            }\\n        }\\n    \"},{id:\"0022\",name:\"Lowest_Common_Ancestor_of_a_Binary_Tree\",refLink:[\"https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/solution/chao-jian-dan-di-gui-pythonjavascript-by-azl397985/\",\"https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description\",\"https://www.lintcode.com/problem/lowest-common-ancestor-of-a-binary-tree/description\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, find the subtree with maximum average. Return the root of the subtree.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/subtree-with-maximum-average/\\n\\n        // \\u590d\\u6742\\u5ea6\\u5206\\u6790\\n\\n        // \\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(N)O(N)\\n        // \\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(N)O(N)\\n\\n        var lowestCommonAncestor = function(root, p, q) {\\n            if (!root || root === p || root === q) return root;\\n            const left = lowestCommonAncestor(root.left, p, q);\\n            const right = lowestCommonAncestor(root.right, p, q);\\n            if (!left) return right; // \\u5de6\\u5b50\\u6811\\u627e\\u4e0d\\u5230\\uff0c\\u8fd4\\u56de\\u53f3\\u5b50\\u6811\\n            if (!right) return left; // \\u53f3\\u5b50\\u6811\\u627e\\u4e0d\\u5230\\uff0c\\u8fd4\\u56de\\u5de6\\u5b50\\u6811\\n            return root;\\n        };\\n    \"},{id:\"0023\",name:\"Validate_Binary_Search_Tree\",refLink:[\"https://leetcode-cn.com/problems/validate-binary-search-tree/solution/js-di-gui-san-xing-dai-ma-by-jsyt/\",\"https://blog.csdn.net/qq_34629352/article/details/102938948\",\"https://www.lintcode.com/problem/validate-binary-search-tree/description\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a binary tree, determine if it is a valid binary search tree (BST).\\n\\n        // Assume a BST is defined as follows:\\n        \\n        // The left subtree of a node contains only nodes with keys less than the node's key.\\n        // The right subtree of a node contains only nodes with keys greater than the node's key.\\n        // Both the left and right subtrees must also be binary search trees.\\n        // A single node tree is a BST\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/validate-binary-search-tree/\\n\\n        var isValidBST = function(root, min = -Infinity, max = Infinity) {\\n            if (!root) return true;\\n            if (root.val <= min || root.val >= max) return false;\\n            return isValidBST(root.left, min, root.val) && isValidBST(root.right, root.val, max);\\n        };\\n    \"},{id:\"0024\",name:\"convert_binary_search_tree_to_doubly_linked_list\",refLink:[\"https://blog.csdn.net/MeiLuan_yahoho/article/details/88920640\",\"https://www.jiuzhang.com/solutions/convert-binary-search-tree-to-doubly-linked-list/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Convert a binary search tree to doubly linked list with in-order traversal.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: http://www.lintcode.com/problem/convert-binary-search-tree-to-doubly-linked-list/\\n\\n        function Convert(node)\\n        {  \\n            var stack = [];\\n            var prev ;\\n            var root ;\\n            // write code here\\n            while(node!= null||stack.length!=0){\\n                while(node!=null){\\n                    stack.push(node);\\n                    node = node.left;\\n                } \\n                node = stack.pop();\\n                if(!prev){\\n                    root = node;\\n                    node.left = null;\\n                }else{\\n                    prev.right = node;\\n                    node.left = prev;\\n                }\\n                prev = node;\\n                    node = node.right;\\n            }\\n            return root;\\n        }\\n    \"},{id:\"0025\",name:\"Flatten_Binary_Tree_to_Linked_List\",refLink:[\"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/die-dai-javascript-by-a-si-shua-ma-tong/\",\"https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/description\",\"https://www.jiuzhang.com/solution/flatten-binary-tree-to-linked-list/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:'\\n        // Flatten a binary tree to a fake \"linked list\" in pre-order traversal.\\n\\n        // Here we use the right pointer in TreeNode as the next pointer in ListNode.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/flatten-binary-tree-to-linked-list/\\n\\n        /**\\n         * @param root: a TreeNode, the root of the binary tree\\n         * @return: \\n         */\\n\\n        const flatten = function(root) {\\n            if(!root) return null\\n            const stack = []\\n            while(root.left || root.right || stack.length>0){\\n                if(root.right) stack.push(root.right)\\n                if(root.left){\\n                    root.right = root.left\\n                    root.left = null\\n                    \\n                }else{\\n                    root.right = stack.pop()\\n                }\\n                root = root.right\\n            }\\n        };\\n    '},{id:\"0026\",name:\"Binary_Tree_Level_Order_Traversal\",refLink:[\"https://www.lintcode.com/problem/binary-tree-level-order-traversal/description\",\"https://www.jiuzhang.com/solution/binary-tree-level-order-traversal/#tag-highlight\",\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/102er-cha-shu-de-ceng-ci-bian-li-javascript-ti-jie/\"],level:\"Medium\",tag:[\"\"],notes:\"\",jsSolution:\"\\n        // Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/binary-tree-level-order-traversal/\\n\\n\\n        const levelOrder = root => {\\n            if (!root) return []\\n            let res = [], queue = [root]\\n            while (queue.length) {\\n              let arr = [], temp = []\\n              while (queue.length) {\\n                let curr = queue.shift()\\n                arr.push(curr.val)\\n                if (curr.left) temp.push(curr.left)\\n                if (curr.right) temp.push(curr.right)\\n              }\\n              queue = temp\\n              res.push(arr)\\n            }\\n            return res\\n        }\\n    \"},{id:\"0027\",name:\"Serialize_and_Deserialize_Binary_Tree\",refLink:[\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/solution/javascriptceng-xu-bian-li-si-lu-he-shi-xian-by-xin/\"],level:\"Medium\",tag:[\"\"],notes:\"\",jsSolution:'\\n        // \\u5e8f\\u5217\\u5316\\u662f\\u5c06\\u4e00\\u4e2a\\u6570\\u636e\\u7ed3\\u6784\\u6216\\u8005\\u5bf9\\u8c61\\u8f6c\\u6362\\u4e3a\\u8fde\\u7eed\\u7684\\u6bd4\\u7279\\u4f4d\\u7684\\u64cd\\u4f5c\\uff0c\\u8fdb\\u800c\\u53ef\\u4ee5\\u5c06\\u8f6c\\u6362\\u540e\\u7684\\u6570\\u636e\\u5b58\\u50a8\\u5728\\u4e00\\u4e2a\\u6587\\u4ef6\\u6216\\u8005\\u5185\\u5b58\\u4e2d\\uff0c\\u540c\\u65f6\\u4e5f\\u53ef\\u4ee5\\u901a\\u8fc7\\u7f51\\u7edc\\u4f20\\u8f93\\u5230\\u53e6\\u4e00\\u4e2a\\u8ba1\\u7b97\\u673a\\u73af\\u5883\\uff0c\\u91c7\\u53d6\\u76f8\\u53cd\\u65b9\\u5f0f\\u91cd\\u6784\\u5f97\\u5230\\u539f\\u6570\\u636e\\u3002\\n\\n        // \\u8bf7\\u8bbe\\u8ba1\\u4e00\\u4e2a\\u7b97\\u6cd5\\u6765\\u5b9e\\u73b0\\u4e8c\\u53c9\\u6811\\u7684\\u5e8f\\u5217\\u5316\\u4e0e\\u53cd\\u5e8f\\u5217\\u5316\\u3002\\u8fd9\\u91cc\\u4e0d\\u9650\\u5b9a\\u4f60\\u7684\\u5e8f\\u5217 / \\u53cd\\u5e8f\\u5217\\u5316\\u7b97\\u6cd5\\u6267\\u884c\\u903b\\u8f91\\uff0c\\u4f60\\u53ea\\u9700\\u8981\\u4fdd\\u8bc1\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\u53ef\\u4ee5\\u88ab\\u5e8f\\u5217\\u5316\\u4e3a\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u5e76\\u4e14\\u5c06\\u8fd9\\u4e2a\\u5b57\\u7b26\\u4e32\\u53cd\\u5e8f\\u5217\\u5316\\u4e3a\\u539f\\u59cb\\u7684\\u6811\\u7ed3\\u6784\\u3002\\n        \\n        // \\u793a\\u4f8b: \\n        \\n        // \\u4f60\\u53ef\\u4ee5\\u5c06\\u4ee5\\u4e0b\\u4e8c\\u53c9\\u6811\\uff1a\\n        \\n        // \\u5e8f\\u5217\\u5316\\u4e3a \"[1,2,3,null,null,4,5]\"\\n        // \\u63d0\\u793a: \\u8fd9\\u4e0e LeetCode \\u76ee\\u524d\\u4f7f\\u7528\\u7684\\u65b9\\u5f0f\\u4e00\\u81f4\\uff0c\\u8be6\\u60c5\\u8bf7\\u53c2\\u9605 LeetCode \\u5e8f\\u5217\\u5316\\u4e8c\\u53c9\\u6811\\u7684\\u683c\\u5f0f\\u3002\\u4f60\\u5e76\\u975e\\u5fc5\\u987b\\u91c7\\u53d6\\u8fd9\\u79cd\\u65b9\\u5f0f\\uff0c\\u4f60\\u4e5f\\u53ef\\u4ee5\\u91c7\\u7528\\u5176\\u4ed6\\u7684\\u65b9\\u6cd5\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\u3002\\n        \\n        // \\u8bf4\\u660e: \\u4e0d\\u8981\\u4f7f\\u7528\\u7c7b\\u7684\\u6210\\u5458 / \\u5168\\u5c40 / \\u9759\\u6001\\u53d8\\u91cf\\u6765\\u5b58\\u50a8\\u72b6\\u6001\\uff0c\\u4f60\\u7684\\u5e8f\\u5217\\u5316\\u548c\\u53cd\\u5e8f\\u5217\\u5316\\u7b97\\u6cd5\\u5e94\\u8be5\\u662f\\u65e0\\u72b6\\u6001\\u7684\\u3002\\n\\n\\n        \\u5e8f\\u5217\\u5316\\u4e8c\\u53c9\\u6811\\u601d\\u8def\\n        \\u4f7f\\u7528\\u5e7f\\u5ea6\\u4f18\\u5148\\uff08BFS\\uff09\\u904d\\u5386\\u6240\\u6709\\u8282\\u70b9\\uff08\\u5305\\u62ec\\u7a7a\\u8282\\u70b9\\uff09\\uff0c\\u6574\\u4f53\\u6d41\\u7a0b\\u5982\\u4e0b\\uff1a\\n\\n        \\u521d\\u59cb\\u5316\\u5b57\\u7b26\\u4e32 res\\n        \\u521d\\u59cb\\u5316\\u961f\\u5217 queue\\uff0c\\u5c06 root \\u653e\\u5165\\u961f\\u5217\\n        \\u68c0\\u67e5\\u961f\\u5217\\u662f\\u5426\\u4e3a\\u7a7a\\uff1a\\n        \\u961f\\u5217\\u4e0d\\u4e3a\\u7a7a\\uff1a\\u53d6\\u51fa\\u961f\\u9996\\u8282\\u70b9\\uff0c\\u5982\\u679c\\u8282\\u70b9\\u4e3a null\\uff0c\\u90a3\\u4e48 res \\u66f4\\u65b0\\u4e3a res + \\'#,\\'\\uff1b\\u5982\\u679c\\u8282\\u70b9\\u4e0d\\u662f null\\uff0c\\u90a3\\u4e48 res \\u66f4\\u65b0\\u4e3a res + val\\uff0c\\u5e76\\u4e14\\u5c06\\u8282\\u70b9\\u7684\\u5de6\\u53f3\\u8282\\u70b9\\u4f9d\\u6b21\\u52a0\\u5165 queue\\u3002\\u7ee7\\u7eed\\u5faa\\u73af\\u3002\\n        \\u961f\\u5217\\u4e3a\\u7a7a\\uff1a\\u7ed3\\u675f\\u5faa\\u73af\\n        \\u8fd4\\u56de\"[\" + res + \"]\"\\n        \\n        \\u4ee5\\u4e0a\\u9762\\u8fd9\\u68f5\\u4e8c\\u53c9\\u6811\\u4e3a\\u4f8b\\uff0c\\u5b83\\u7684\\u5e8f\\u5217\\u5316\\u7ed3\\u679c\\u662f\"[1,2,3,#,#,4,5,#,#,#,#]\"\\n\\n        \\u5e8f\\u5217\\u5316\\u7684\\u4ee3\\u7801\\u5b9e\\u73b0\\u5982\\u4e0b\\uff1a\\n\\n        // ac\\u5730\\u5740\\uff1ahttps://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\\n        // \\u539f\\u6587\\u5730\\u5740\\uff1ahttps://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\\n\\n        /**\\n         * Encodes a tree to a single string.\\n         *\\n         * @param {TreeNode} root\\n         * @return {string}\\n         */\\n        var serialize = function(root) {\\n            if (!root) {\\n                return \"[]\";\\n            }\\n\\n            let res = \"\";\\n            let node = root;\\n            const queue = [node];\\n            while (queue.length) {\\n                const front = queue.shift();\\n                if (front) {\\n                    res += `${front.val},`;\\n                    queue.push(front.left);\\n                    queue.push(front.right);\\n                } else {\\n                    res += \"#,\";\\n                }\\n            }\\n\\n            res = res.substring(0, res.length - 1); // \\u53bb\\u6389\\u6700\\u540e\\u4e00\\u4e2a\\u9017\\u53f7\\n\\n            return `[${res}]`;\\n        };\\n        \\u53cd\\u5e8f\\u5217\\u5316\\u4e8c\\u53c9\\u6811\\u601d\\u8def\\n        \\u4ee5\\u524d\\u9762\\u7684\\u4e8c\\u53c9\\u6811\\u4e3a\\u4f8b\\uff0c\\u53cd\\u5e8f\\u5217\\u8bdd\\u5c31\\u662f\\u5c06\\u5b57\\u7b26\\u4e32\"[1,2,3,#,#,4,5,#,#,#,#]\"\\u91cd\\u65b0\\u8fd8\\u539f\\u6210\\u539f\\u6765\\u7684\\u4e8c\\u53c9\\u6811\\u3002\\n\\n        \\u53cd\\u5e8f\\u5217\\u5316\\u6d41\\u7a0b\\u5982\\u4e0b\\uff1a\\n\\n        \\u53bb\\u6389\\u5b57\\u7b26\\u4e32 res \\u524d\\u540e\\u7684[\\u548c]\\uff0c\\u5e76\\u5c06\\u5176\\u6309\\u7167,\\u9017\\u53f7\\u5207\\u5206\\u5f97\\u5230\\u6570\\u7ec4 nodes\\n        \\u521d\\u59cb\\u5316\\u961f\\u5217 queue\\uff0c\\u653e\\u5165 nodes \\u7684\\u7b2c\\u4e00\\u4e2a\\u503c\\u5bf9\\u5e94\\u7684\\u8282\\u70b9\\uff0cnodes \\u5f39\\u51fa\\u7b2c\\u4e00\\u4e2a\\u503c\\n        \\u68c0\\u67e5\\u961f\\u5217\\u662f\\u5426\\u4e3a\\u7a7a\\uff1a\\n        \\u961f\\u5217\\u4e0d\\u4e3a\\u7a7a\\u3002\\u4ece queue \\u53d6\\u51fa\\u961f\\u9996\\u5143\\u7d20\\u3002\\u4ece nodes \\u4e2d\\u53d6\\u51fa\\u7b2c\\u4e00\\u4e2a\\u503c\\u548c\\u7b2c\\u4e8c\\u503c\\uff0c\\u4f9d\\u6b21\\u5904\\u7406\\u3002\\u7ee7\\u7eed\\u5faa\\u73af\\u3002\\n        \\u961f\\u5217\\u4e3a\\u7a7a\\u3002\\u7ed3\\u675f\\u5faa\\u73af\\u3002\\n        \\u8fd4\\u56de\\u6839\\u8282\\u70b9\\u3002\\n        \\u53cd\\u5e8f\\u5217\\u5316\\u51fd\\u6570\\u7684\\u8bbe\\u8ba1\\u5173\\u952e\\u662f\\uff1a\\u6570\\u7ec4 nodes \\u53d6\\u51fa\\u5143\\u7d20\\u7684\\u987a\\u5e8f\\u548c\\u539f\\u4e8c\\u53c9\\u6811\\u5c42\\u5e8f\\u904d\\u5386\\u7684\\u987a\\u5e8f\\u662f\\u5bf9\\u5e94\\u7684\\u3002\\n\\n        \\u53cd\\u5e8f\\u5217\\u7684\\u51fd\\u6570\\u5b9e\\u73b0\\u5982\\u4e0b\\uff1a\\n\\n        // ac\\u5730\\u5740\\uff1ahttps://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/\\n        // \\u539f\\u6587\\u5730\\u5740\\uff1ahttps://xxoo521.com/2020-02-13-serialize-and-deserialize-btree/\\n\\n        /**\\n         * Decodes your encoded data to tree.\\n         *\\n         * @param {string} data\\n         * @return {TreeNode}\\n         */\\n        var deserialize = function(data) {\\n            if (data.length <= 2) {\\n                return null;\\n            }\\n\\n            const nodes = data.substring(1, data.length - 1).split(\",\");\\n            const root = new TreeNode(parseInt(nodes[0]));\\n            nodes.shift();\\n\\n            const queue = [root];\\n            while (queue.length) {\\n                const node = queue.shift();\\n                // \\u7b2c\\u4e00\\u4e2a\\u662f\\u5de6\\u8282\\u70b9\\uff0c\\u8282\\u70b9\\u4e3a\\u7a7a\\uff0c\\u76f4\\u63a5\\u8df3\\u8fc7\\n                const leftVal = nodes.shift();\\n                if (leftVal !== \"#\") {\\n                    node.left = new TreeNode(leftVal);\\n                    queue.push(node.left);\\n                }\\n                // \\u7b2c\\u4e8c\\u4e2a\\u662f\\u53f3\\u8282\\u70b9\\uff0c\\u8282\\u70b9\\u4e3a\\u7a7a\\uff0c\\u76f4\\u63a5\\u8df3\\u8fc7\\n                const rightVal = nodes.shift();\\n                if (rightVal !== \"#\") {\\n                    node.right = new TreeNode(rightVal);\\n                    queue.push(node.right);\\n                }\\n            }\\n\\n            return root;\\n        };\\n    '},{id:\"0028\",name:\"Graph_Valid_Tree\",refLink:[\"https://www.jiuzhang.com/solution/graph-valid-tree/#tag-highlight\"],level:\"Medium\",tag:[\"\"],notes:\"JAVA only\",jsSolution:\"\\n        // Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/graph-valid-tree/\\n\\n        // version 1: BFS\\n        public class Solution {\\n            /**\\n             * @param n an integer\\n             * @param edges a list of undirected edges\\n             * @return true if it's a valid tree, or false\\n             */\\n            public boolean validTree(int n, int[][] edges) {\\n                if (n == 0) {\\n                    return false;\\n                }\\n                \\n                if (edges.length != n - 1) {\\n                    return false;\\n                }\\n                \\n                Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);\\n                \\n                // bfs\\n                Queue<Integer> queue = new LinkedList<>();\\n                Set<Integer> hash = new HashSet<>();\\n                \\n                queue.offer(0);\\n                hash.add(0);\\n                while (!queue.isEmpty()) {\\n                    int node = queue.poll();\\n                    for (Integer neighbor : graph.get(node)) {\\n                        if (hash.contains(neighbor)) {\\n                            continue;\\n                        }\\n                        hash.add(neighbor);\\n                        queue.offer(neighbor);\\n                    }\\n                }\\n                \\n                return (hash.size() == n);\\n            }\\n            \\n            private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges) {\\n                Map<Integer, Set<Integer>> graph = new HashMap<>();\\n                for (int i = 0; i < n; i++) {\\n                    graph.put(i, new HashSet<Integer>());\\n                }\\n                \\n                for (int i = 0; i < edges.length; i++) {\\n                    int u = edges[i][0];\\n                    int v = edges[i][1];\\n                    graph.get(u).add(v);\\n                    graph.get(v).add(u);\\n                }\\n                \\n                return graph;\\n            }\\n        }\\n\\n\\n        // version 2: Union Find\\n        public class Solution {\\n            class UnionFind{\\n                HashMap<Integer, Integer> father = new HashMap<Integer, Integer>();\\n                UnionFind(int n){\\n                    for(int i = 0 ; i < n; i++) {\\n                        father.put(i, i); \\n                    }\\n                }\\n                int compressed_find(int x){\\n                    int parent =  father.get(x);\\n                    while(parent!=father.get(parent)) {\\n                        parent = father.get(parent);\\n                    }\\n                    int temp = -1;\\n                    int fa = father.get(x);\\n                    while(fa!=father.get(fa)) {\\n                        temp = father.get(fa);\\n                        father.put(fa, parent) ;\\n                        fa = temp;\\n                    }\\n                    return parent;\\n                        \\n                }\\n                \\n                void union(int x, int y){\\n                    int fa_x = compressed_find(x);\\n                    int fa_y = compressed_find(y);\\n                    if(fa_x != fa_y)\\n                        father.put(fa_x, fa_y);\\n                }\\n            }\\n            /**\\n             * @param n an integer\\n             * @param edges a list of undirected edges\\n             * @return true if it's a valid tree, or false\\n             */\\n            public boolean validTree(int n, int[][] edges) {\\n                // tree should have n nodes with n-1 edges\\n                if (n - 1 != edges.length) {\\n                    return false;\\n                }\\n                \\n                UnionFind uf = new UnionFind(n);\\n                \\n                for (int i = 0; i < edges.length; i++) {\\n                    if (uf.compressed_find(edges[i][0]) == uf.compressed_find(edges[i][1])) {\\n                        return false;\\n                    }\\n                    uf.union(edges[i][0], edges[i][1]);\\n                }\\n                return true;\\n            }\\n        }\\n    \"},{id:\"0029\",name:\"Clone_Graph\",refLink:[\"https://www.lintcode.com/problem/clone-graph/description\",\"https://www.jiuzhang.com/solution/clone-graph/\",\"https://leetcode-cn.com/problems/clone-graph/solution/jsshen-du-bian-li-jian-ji-ban-ben-by-armin/\"],level:\"Medium\",tag:[\"\"],notes:\"JAVA only\",jsSolution:\"\\n        // Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors. Nodes are labeled uniquely.\\n\\n        // You need to return a deep copied graph, which has the same structure as the original graph, and any changes to the new graph will not have any effect on the original graph.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/clone-graph/\\n\\n\\n        \\u4ece\\u539f\\u56fe\\u7ed9\\u5b9a\\u7684\\u70b9\\u627e\\u5230\\u6240\\u6709\\u70b9\\n        \\u590d\\u5236\\u6240\\u6709\\u7684\\u70b9\\n        \\u590d\\u5236\\u6240\\u6709\\u7684\\u8fb9\\n        /**\\n        * \\u672c\\u53c2\\u8003\\u7a0b\\u5e8f\\u6765\\u81ea\\u4e5d\\u7ae0\\u7b97\\u6cd5\\uff0c\\u7531 @ \\u63d0\\u4f9b\\u3002\\u7248\\u6743\\u6240\\u6709\\uff0c\\u8f6c\\u53d1\\u8bf7\\u6ce8\\u660e\\u51fa\\u5904\\u3002\\n        * - \\u4e5d\\u7ae0\\u7b97\\u6cd5\\u81f4\\u529b\\u4e8e\\u5e2e\\u52a9\\u66f4\\u591a\\u4e2d\\u56fd\\u4eba\\u627e\\u5230\\u597d\\u7684\\u5de5\\u4f5c\\uff0c\\u6559\\u5e08\\u56e2\\u961f\\u5747\\u6765\\u81ea\\u7845\\u8c37\\u548c\\u56fd\\u5185\\u7684\\u4e00\\u7ebf\\u5927\\u516c\\u53f8\\u5728\\u804c\\u5de5\\u7a0b\\u5e08\\u3002\\n        * - \\u73b0\\u6709\\u7684\\u9762\\u8bd5\\u57f9\\u8bad\\u8bfe\\u7a0b\\u5305\\u62ec\\uff1a\\u4e5d\\u7ae0\\u7b97\\u6cd5\\u73ed\\uff0c\\u7cfb\\u7edf\\u8bbe\\u8ba1\\u73ed\\uff0c\\u7b97\\u6cd5\\u5f3a\\u5316\\u73ed\\uff0cJava\\u5165\\u95e8\\u4e0e\\u57fa\\u7840\\u7b97\\u6cd5\\u73ed\\uff0cAndroid \\u9879\\u76ee\\u5b9e\\u6218\\u73ed\\uff0c\\n        * - Big Data \\u9879\\u76ee\\u5b9e\\u6218\\u73ed\\uff0c\\u7b97\\u6cd5\\u9762\\u8bd5\\u9ad8\\u9891\\u9898\\u73ed, \\u52a8\\u6001\\u89c4\\u5212\\u4e13\\u9898\\u73ed\\n        * - \\u66f4\\u591a\\u8be6\\u60c5\\u8bf7\\u89c1\\u5b98\\u65b9\\u7f51\\u7ad9\\uff1ahttp://www.jiuzhang.com/?source=code\\n        */ \\n\\n        /**\\n         * Definition for undirected graph.\\n         * class UndirectedGraphNode {\\n         *     int label;\\n         *     ArrayList<UndirectedGraphNode> neighbors;\\n         *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\\n         * };\\n         */\\n        public class Solution {\\n            /**\\n             * @param node: A undirected graph node\\n             * @return: A undirected graph node\\n             */\\n            public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\\n                if (node == null) {\\n                    return node;\\n                }\\n\\n                // use bfs algorithm to traverse the graph and get all nodes.\\n                ArrayList<UndirectedGraphNode> nodes = getNodes(node);\\n\\n                // copy nodes, store the old->new mapping information in a hash map\\n                HashMap<UndirectedGraphNode, UndirectedGraphNode> mapping = new HashMap<>();\\n                for (UndirectedGraphNode n : nodes) {\\n                    mapping.put(n, new UndirectedGraphNode(n.label));\\n                }\\n\\n                // copy neighbors(edges)\\n                for (UndirectedGraphNode n : nodes) {\\n                    UndirectedGraphNode newNode = mapping.get(n);\\n                    for (UndirectedGraphNode neighbor : n.neighbors) {\\n                        UndirectedGraphNode newNeighbor = mapping.get(neighbor);\\n                        newNode.neighbors.add(newNeighbor);\\n                    }\\n                }\\n\\n                return mapping.get(node);\\n            }\\n\\n            private ArrayList<UndirectedGraphNode> getNodes(UndirectedGraphNode node) {\\n                Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();\\n                HashSet<UndirectedGraphNode> set = new HashSet<>();\\n\\n                queue.offer(node);\\n                set.add(node);\\n                while (!queue.isEmpty()) {\\n                    UndirectedGraphNode head = queue.poll();\\n                    for (UndirectedGraphNode neighbor : head.neighbors) {\\n                        if (!set.contains(neighbor)) {\\n                            set.add(neighbor);\\n                            queue.offer(neighbor);\\n                        }\\n                    }\\n                }\\n\\n                return new ArrayList<UndirectedGraphNode>(set);\\n            }\\n        }\\n    \"},{id:\"0030\",name:\"Search_Graph_Nodes\",refLink:[\"https://www.lintcode.com/problem/search-graph-nodes/description\",\"https://www.jiuzhang.com/solution/search-graph-nodes/\"],level:\"Medium\",tag:[\"\"],notes:\"JAVA only\",jsSolution:\"\\n        // Given a undirected graph, a node and a target, return the nearest node to given node which value of it is target, return NULL if you can't find.\\n\\n        // There is a mapping store the nodes' values in the given parameters.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/search-graph-nodes/\\n\\n        /**\\n         * Definition for graph node.\\n         * class GraphNode {\\n         *     int label;\\n         *     ArrayList<UndirectedGraphNode> neighbors;\\n         *     UndirectedGraphNode(int x) { \\n         *         label = x; neighbors = new ArrayList<UndirectedGraphNode>(); \\n         *     }\\n         * };\\n         */\\n        public class Solution {\\n            /**\\n             * @param graph a list of Undirected graph node\\n             * @param values a hash mapping, <UndirectedGraphNode, (int)value>\\n             * @param node an Undirected graph node\\n             * @param target an integer\\n             * @return the a node\\n             */\\n            public UndirectedGraphNode searchNode(ArrayList<UndirectedGraphNode> graph,\\n                                                Map<UndirectedGraphNode, Integer> values,\\n                                                UndirectedGraphNode node,\\n                                                int target) {\\n                // Write your code here\\n                Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();\\n                Set<UndirectedGraphNode> hash = new HashSet<UndirectedGraphNode>();\\n\\n                queue.offer(node);\\n                hash.add(node);\\n\\n                while (!queue.isEmpty()) {\\n                    UndirectedGraphNode head = queue.poll();\\n                    if (values.get(head) == target) {\\n                        return head;\\n                    }\\n                    for (UndirectedGraphNode nei : head.neighbors) {\\n                        if (!hash.contains(nei)){\\n                            queue.offer(nei);\\n                            hash.add(nei);\\n                        }\\n                    }\\n                }\\n                return null;\\n            }\\n        }\\n    \"},{id:\"0031\",name:\"Topological_Sorting\",refLink:[\"https://www.jiuzhang.com/solution/topological-sorting/#tag-highlight\",\"https://www.lintcode.com/problem/topological-sorting/description\"],level:\"Medium\",tag:[\"JAVA\"],notes:\"JAVA only\",jsSolution:\"\\n        // Given an directed graph, a topological order of the graph nodes is defined as follow:\\n\\n        // For each directed edge A -> B in graph, A must before B in the order list.\\n        // The first node in the order can be any node in the graph with no nodes direct to it.\\n        // Find any topological order for the given graph.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/topological-sorting/\\n\\n\\n        public class Solution {\\n            /**\\n             * @param graph: A list of Directed graph node\\n             * @return: Any topological order for the given graph.\\n             */    \\n            public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {\\n                // write your code here\\n                ArrayList<DirectedGraphNode> result = new ArrayList<DirectedGraphNode>();\\n                HashMap<DirectedGraphNode, Integer> map = new HashMap();\\n                for (DirectedGraphNode node : graph) {\\n                    for (DirectedGraphNode neighbor : node.neighbors) {\\n                        if (map.containsKey(neighbor)) {\\n                            map.put(neighbor, map.get(neighbor) + 1);\\n                        } else {\\n                            map.put(neighbor, 1); \\n                        }\\n                    }\\n                }\\n                Queue<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();\\n                for (DirectedGraphNode node : graph) {\\n                    if (!map.containsKey(node)) {\\n                        q.offer(node);\\n                        result.add(node);\\n                    }\\n                }\\n                while (!q.isEmpty()) {\\n                    DirectedGraphNode node = q.poll();\\n                    for (DirectedGraphNode n : node.neighbors) {\\n                        map.put(n, map.get(n) - 1);\\n                        if (map.get(n) == 0) {\\n                            result.add(n);\\n                            q.offer(n);\\n                        }\\n                    }\\n                }\\n                return result;\\n            }\\n        }\\n    \"},{id:\"0032\",name:\"Number_of_Islands\",refLink:[\"https://leetcode-cn.com/problems/number-of-islands/solution/200-dao-yu-shu-liang-by-alexer-660/\",\"https://www.lintcode.com/problem/number-of-islands/description\",\"https://www.jiuzhang.com/solution/number-of-islands/#tag-other\"],level:\"Medium\",tag:[\"\"],notes:\"\",jsSolution:\"\\n        // Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.\\n\\n        // Find the number of islands.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/number-of-islands/\\n\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1aDFS\\n        /**\\n         * @param {character[][]} grid\\n         * @return {number}\\n         */\\n        var numIslands = function(grid) {\\n            if(!grid || grid.length == 0){\\n                return 0;\\n            }\\n            var len = grid.length;\\n            var size = grid[0].length;\\n            var island = 0;\\n            function sink(i,j){\\n                // terminator\\n                if(grid[i][j] == '0'){\\n                    return 0;\\n                }\\n                // process\\n                grid[i][j] = '0';\\n                // drill down\\n                if(i+1<len && grid[i+1][j] == '1'){\\n                    sink(i+1,j);\\n                } \\n                if(i-1 >= 0 && grid[i-1][j] == '1'){\\n                    sink(i-1,j);\\n                } \\n                if(j+1 < size && grid[i][j+1] == '1'){\\n                    sink(i,j+1);\\n                } \\n                if(j-1 >= 0 && grid[i][j-1] == '1'){\\n                    sink(i,j-1);\\n                }\\n                return 1;\\n            }\\n            for(var i = 0;i<len;i++){\\n                for(var r = 0;r<grid[i].length;r++){\\n                    if(grid[i][r] == '1'){\\n                        island += sink(i,r);\\n                    }\\n                }\\n            }\\n            return island;\\n        };\\n        \\u4f18\\u5316\\u7248\\n        \\u5224\\u65ad\\u5e76\\u63a8\\u5e73\\u5c9b\\u5c7f\\u51fd\\u6570\\u65f6 \\u7528\\u65b9\\u5411\\u5411\\u91cf\\u66ff\\u4ee3x+1,x-1,y+1,y-1\\u56db\\u79cd\\u60c5\\u51b5\\n        /**\\n         * @param {character[][]} grid\\n         * @return {number}\\n         */\\n        var numIslands = function(grid) {\\n            if(!grid || grid.length == 0){\\n                return 0;\\n            }\\n            var len = grid.length;\\n            var size = grid[0].length;\\n            var island = 0;\\n            // \\u65b9\\u5411\\u5411\\u91cf\\n            var dx = [-1,1,0,0];\\n            var dy = [0,0,-1,1];\\n            // dfs \\u63a8\\u5e73\\n            function sink(i,j){\\n                // terminator\\n                if(grid[i][j] == '0'){\\n                    return 0;\\n                }\\n                // process\\n                grid[i][j] = '0';\\n                // drill down\\n                for(var k = 0;k< dx.length;k++){\\n                    var x = i + dx[k];\\n                    var y = j + dy[k];\\n                    if(x >= 0 && x < grid.length && y >=0 && y<grid[i].length){\\n                        if(grid[x][y] == '1'){\\n                            sink(x,y)\\n                        }\\n                    }\\n                }\\n                return 1;\\n            }\\n            for(var i = 0;i<len;i++){\\n                for(var r = 0;r<grid[i].length;r++){\\n                    if(grid[i][r] == 1){\\n                        island += sink(i,r);\\n                    }\\n                }\\n            }\\n            return island;\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1aBFS\\n        /**\\n         * @param {character[][]} grid\\n         * @return {number}\\n         */\\n        var numIslands = function(grid) {\\n            if(!grid || grid.length == 0){\\n                return 0;\\n            }\\n            var len = grid.length;\\n            var size = grid[0].length;\\n            var island = 0;\\n            // \\u4ece\\u53f3\\u5230\\u5de6 \\u961f\\u5217\\n            var queue = [];\\n            // \\u65b9\\u5411\\u5411\\u91cf\\n            var dx = [-1,1,0,0];\\n            var dy = [0,0,-1,1];\\n            // dfs \\u63a8\\u5e73\\n            function sink(i,j){\\n                // terminator\\n                if(grid[i][j] == '0'){\\n                    return 0;\\n                }\\n                // process\\n                grid[i][j] = '0';\\n                // drill down\\n                for(var k = 0;k< dx.length;k++){\\n                    var x = i + dx[k];\\n                    var y = j + dy[k];\\n                    if(x >= 0 && x < grid.length && y >=0 && y<grid[i].length){\\n                        if(grid[x][y] == '1'){\\n                            queue.push([x,y]);\\n                        }\\n                    }\\n                }\\n                return 1;\\n            }\\n            for(var i = 0;i<len;i++){\\n                for(var r = 0;r<grid[i].length;r++){\\n                    if(grid[i][r] == 1){\\n                        island++;\\n                        queue.push([i,r])\\n                        while(queue.length>0){\\n                            var tmpIsland = queue.shift();\\n                            sink(tmpIsland[0],tmpIsland[1]);\\n                        }\\n                    }\\n                }\\n            }\\n            return island;\\n        };\\n        \\u89e3\\u6cd5\\u4e09\\uff1a\\u5e76\\u67e5\\u96c6\\n        \\u7c7b\\u4f3c\\u9898\\u578b\\n        547. \\u670b\\u53cb\\u5708\\n        \\u533a\\u522b\\n        \\u6b64\\u9898\\u662fm * n\\u7684\\u77e9\\u9635\\uff0c\\u4e0d\\u662fn * n\\u7684\\u77e9\\u9635\\n        parent\\u548crank\\u6570\\u7ec4\\u5143\\u7d20\\u547d\\u540d\\u8981\\u5c06i\\u548cj\\u8054\\u7cfb\\u8d77\\u6765\\n        union\\u67e5\\u627e\\u5408\\u5e76\\u7684\\u65f6\\u5019\\uff0c\\u4e5f\\u8981\\u628a\\u4e24\\u4e2a\\u662f\\u9646\\u5730\\u7684\\u5143\\u7d20\\u4f20\\u8fdb\\u53bb\\n        /**\\n         * @param {character[][]} grid\\n         * @return {number}\\n         */\\n        var numIslands = function(grid) {\\n            let m = grid.length;\\n            if(m == 0){\\n                return 0;\\n            }\\n            let n = grid[0].length;\\n            let count = 0;\\n            let parent = [];\\n            let rank = [];\\n\\n\\n            let find = (p) => {\\n                while(p != parent[p]){\\n                    parent[p] = parent[parent[p]];\\n                    p = parent[p];\\n                }\\n                return p;\\n            }\\n            let union = (p,q) => {\\n                let rootP = find(p);\\n                let rootQ = find(q);\\n                if(rootP == rootQ){\\n                    return;\\n                }\\n                if(rank[rootP] > rank[rootQ]){\\n                    parent[rootQ] = rootP;\\n                }else if(rank[rootP] < rank[rootQ]){\\n                    parent[rootP] = rootQ;\\n                }else{\\n                    parent[rootP] = rootQ;\\n                    rank[rootQ]++;\\n                }\\n                count--;\\n            }\\n\\n            for(let i = 0;i < m;i++){\\n                for(let j = 0;j < n;j++){\\n                    if(grid[i][j] == 1){\\n                        parent[i * n + j] = i * n + j;\\n                        count++;\\n                    }\\n                    rank[i * n + j] = 0;\\n                }\\n            }\\n\\n            for(var i = 0;i<m;i++){\\n                for(var j = 0;j<n;j++){\\n                    if(grid[i][j] == 1){\\n                        grid[i][j] = 0;\\n                        i-1>=0 && grid[i-1][j] == 1 && union(i*n + j,(i-1)*n + j);\\n                        j-1>=0 && grid[i][j-1] == 1 && union(i*n + j,i*n + j-1);\\n                        i+1<m && grid[i+1][j] == 1 && union(i*n + j,(i+1)*n + j);\\n                        j+1<n && grid[i][j+1] == 1 && union(i*n + j,i*n + j+1);\\n                    }\\n                }\\n            }\\n            return count;\\n        };\\n    \"},{id:\"0033\",name:\"Zombie_in_Matrix\",refLink:[\"https://www.lintcode.com/problem/zombie-in-matrix/description\",\"https://www.jiuzhang.com/solution/zombie-in-matrix/#tag-highlight\"],level:\"Medium\",tag:[\"\"],notes:\"JAVA only\",jsSolution:\"\\n        // Given a 2D grid, each cell is either a wall 2, a zombie 1 or people 0 (the number zero, one, two).Zombies can turn the nearest people(up/down/left/right) into zombies every day, but can not through wall. How long will it take to turn all people into zombies? Return -1 if can not turn all people into zombies.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/zombie-in-matrix/\\n\\n\\n        class Coordinate {\\n            int x, y;\\n            public Coordinate(int x, int y) {\\n                this.x = x;\\n                this.y = y;\\n            }\\n        }\\n        \\n        public class Solution {\\n            public int PEOPLE = 0;\\n            public int ZOMBIE = 1;\\n            public int WALL = 2;\\n            \\n            public int[] deltaX = {1, 0, 0, -1};\\n            public int[] deltaY = {0, 1, -1, 0};\\n             \\n            /**\\n             * @param grid a 2D integer grid\\n             * @return an integer\\n             */\\n            public int zombie(int[][] grid) {\\n                if (grid == null || grid.length == 0 || grid[0].length == 0) {\\n                    return 0;\\n                }\\n                \\n                int n = grid.length;\\n                int m = grid[0].length;\\n                \\n                // initialize the queue & count people\\n                int people = 0;\\n                Queue<Coordinate> queue = new LinkedList<>();\\n                for (int i = 0; i < n; i++) {\\n                    for (int j = 0; j < m; j++) {\\n                        if (grid[i][j] == PEOPLE) {\\n                            people++;\\n                        } else if (grid[i][j] == ZOMBIE) {\\n                            queue.offer(new Coordinate(i, j));\\n                        }\\n                    }\\n                }\\n                \\n                // corner case\\n                if (people == 0) {\\n                    return 0;\\n                }\\n                \\n                // bfs\\n                int days = 0;\\n                while (!queue.isEmpty()) {\\n                    days++;\\n                    int size = queue.size();\\n                    for (int i = 0; i < size; i++) {\\n                        Coordinate zb = queue.poll();\\n                        for (int direction = 0; direction < 4; direction++) {\\n                            Coordinate adj = new Coordinate(\\n                                zb.x + deltaX[direction],\\n                                zb.y + deltaY[direction]\\n                            );\\n                            \\n                            if (!isPeople(adj, grid)) {\\n                                continue;\\n                            }\\n                            \\n                            grid[adj.x][adj.y] = ZOMBIE;\\n                            people--;\\n                            if (people == 0) {\\n                                return days;\\n                            }\\n                            queue.offer(adj);\\n                        }\\n                    }\\n                }\\n                \\n                return -1;\\n            }\\n            \\n            private boolean isPeople(Coordinate coor, int[][] grid) {\\n                int n = grid.length;\\n                int m = grid[0].length;\\n                \\n                if (coor.x < 0 || coor.x >= n) {\\n                    return false;\\n                }\\n                if (coor.y < 0 || coor.y >= m) {\\n                    return false;\\n                }\\n                return (grid[coor.x][coor.y] == PEOPLE);\\n            }\\n        }\\n        \\n        //version \\u7845\\u8c37\\u7b97\\u6cd5\\u73ed\\n        public class Solution {\\n            /**\\n             * @param grid: a 2D integer grid\\n             * @return: an integer\\n             */\\n            public int zombie(int[][] grid) {\\n                // write your code here\\n                if (grid == null || grid.length == 0 || grid[0].length == 0) {\\n                    return 0;\\n                }\\n                Queue<Integer> qx = new LinkedList<>();\\n                Queue<Integer> qy = new LinkedList<>();\\n                boolean[][] v = new boolean[grid.length][grid[0].length];\\n        \\n                for (int i = 0; i < grid.length; i++) {\\n                    for (int j = 0; j < grid[0].length; j++) {\\n                        if (grid[i][j] == 1) {\\n                            qx.offer(i);\\n                            qy.offer(j);\\n                            v[i][j] = true;\\n                        }\\n                    }\\n                }\\n        \\n                int[] dx = {1, -1, 0, 0};\\n                int[] dy = {0, 0, 1, -1};\\n        \\n                int dist = 0;\\n                while (!qx.isEmpty()) {\\n                    dist++;\\n                    int size = qx.size();\\n                    for (int i = 0; i < size; i++) {\\n                        int cx = qx.poll();\\n                        int cy = qy.poll();\\n                        for (int k = 0; k < 4; k++) {\\n                            int nx = cx + dx[k];\\n                            int ny = cy + dy[k];\\n                            if (0 <= nx && nx < grid.length && 0 <= ny && ny < grid[0].length && grid[nx][ny] == 0 && !v[nx][ny]) {\\n                                qx.offer(nx);\\n                                qy.offer(ny);\\n                                v[nx][ny] = true;\\n                            }\\n                        }\\n                    }\\n                }\\n                dist--;\\n        \\n                for (int i = 0; i < grid.length; i++) {\\n                    for (int j = 0; j < grid[0].length; j++) {\\n                        if (grid[i][j] == 0 && !v[i][j]) {\\n                            return -1;\\n                        }\\n                    }\\n                }\\n        \\n                return dist;\\n            }\\n        }\\n    \"},{id:\"0034\",name:\"Knight_Shortest_Path\",refLink:[\"https://www.lintcode.com/problem/knight-shortest-path/description\",\"https://www.jiuzhang.com/solution/knight-shortest-path/\"],level:\"Medium\",tag:[\"\"],notes:\"\",jsSolution:\"\\n        // Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the shortest path to a destination position, return the length of the route.\\n        // Return -1 if destination cannot be reached.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/knight-shortest-path/\\n\\n\\n        public class Solution {\\n            int n, m; // size of the chessboard\\n            int[] deltaX = {1, 1, 2, 2, -1, -1, -2, -2};\\n            int[] deltaY = {2, -2, 1, -1, 2, -2, 1, -1};\\n            /**\\n             * @param grid a chessboard included 0 (false) and 1 (true)\\n             * @param source, destination a point\\n             * @return the shortest path \\n             */\\n            public int shortestPath(boolean[][] grid, Point source, Point destination) {\\n                if (grid == null || grid.length == 0 || grid[0].length == 0) {\\n                    return -1;\\n                }\\n                \\n                n = grid.length;\\n                m = grid[0].length;\\n                \\n                Queue<Point> queue = new LinkedList<>();\\n                queue.offer(source);\\n                \\n                int steps = 0;\\n                while (!queue.isEmpty()) {\\n                    int size = queue.size();\\n                    for (int i = 0; i < size; i++) {\\n                        Point point = queue.poll();\\n                        if (point.x == destination.x && point.y == destination.y) {\\n                            return steps;\\n                        }\\n                        \\n                        for (int direction = 0; direction < 8; direction++) {\\n                            Point nextPoint = new Point(\\n                                point.x + deltaX[direction],\\n                                point.y + deltaY[direction]\\n                            );\\n                            \\n                            if (!inBound(nextPoint, grid)) {\\n                                continue;\\n                            }\\n                            \\n                            queue.offer(nextPoint);\\n                            // mark the point not accessible\\n                            grid[nextPoint.x][nextPoint.y] = true;\\n                        }\\n                    }\\n                    steps++;\\n                }\\n                \\n                return -1;\\n            }\\n            \\n            private boolean inBound(Point point, boolean[][] grid) {\\n                if (point.x < 0 || point.x >= n) {\\n                    return false;\\n                }\\n                if (point.y < 0 || point.y >= m) {\\n                    return false;\\n                }\\n                return (grid[point.x][point.y] == false);\\n            }\\n        }\\n        \\n        //version \\u7845\\u8c37\\u7b97\\u6cd5\\u73ed\\n        public class Solution {\\n            /**\\n             * @param grid: a chessboard included 0 (false) and 1 (true)\\n             * @param source: a point\\n             * @param destination: a point\\n             * @return: the shortest path\\n             */\\n            public int shortestPath(boolean[][] grid, Point source, Point destination) {\\n                // write your code here\\n                if (grid == null || grid.length == 0 || grid[0].length == 0) {\\n                    return -1;\\n                }\\n        \\n                int[] dx = {1, 1, -1, -1, 2, 2, -2, -2};\\n                int[] dy = {2, -2, 2, -2, 1, -1, 1, -1};\\n        \\n                Queue<Point> q = new LinkedList<>();\\n                boolean[][] v = new boolean[grid.length][grid[0].length];  //Set<Point> v will TLE\\n        \\n                q.offer(source);\\n                v[source.x][source.y] = true;\\n        \\n                if (source.x == destination.x && source.y == destination.y) {\\n                    return 0;\\n                }\\n        \\n                int dist = 0;\\n        \\n                while (!q.isEmpty()) {\\n                    dist++;\\n                    int size = q.size();\\n                    for (int i = 0; i < size; i++) {\\n                        Point cur = q.poll();\\n                        for (int k = 0; k < 8; k++) {\\n                            int nx = cur.x + dx[k];\\n                            int ny = cur.y + dy[k];\\n                            if (0 <= nx && nx < grid.length && 0 <= ny && ny < grid[0].length && !grid[nx][ny] && !v[nx][ny]) {\\n                                if (nx == destination.x && ny == destination.y) {\\n                                    return dist;\\n                                }\\n                                q.offer(new Point(nx, ny));\\n                                v[nx][ny] = true;\\n                            }\\n                        }\\n                    }\\n        \\n                }\\n                return -1;\\n            }\\n        }\\n    \"},{id:\"0035\",name:\"Combination_Sum\",refLink:[\"https://leetcode-cn.com/problems/combination-sum/solution/39-zu-he-zong-he-by-alexer-660/\",\"https://www.lintcode.com/problem/combination-sum/description\",\"https://www.jiuzhang.com/solution/combination-sum/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a set of candidtate numbers candidates and a target number target. Find all unique combinations in candidates where the numbers sums to target.\\n\\n        // The same repeated number may be chosen from candidates unlimited number of times.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/combination-sum/\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u9012\\u5f52\\u56de\\u6eaf\\n        \\u7c7b\\u4f3c\\u9898\\u578b\\n        46. \\u5168\\u6392\\u5217\\n        \\u9012\\u5f52\\u4ee3\\u7801\\u6a21\\u677f\\n        \\u53c2\\u770b\\u5404\\u7c7b\\u7b97\\u6cd5\\u6a21\\u677f - \\u9012\\u5f52\\u4e00\\u8282 - Python&Java\\u7248\\n        \\u601d\\u8def\\n        \\u7531\\u9898\\u53ef\\u77e5\\uff0c\\u539f\\u6570\\u7ec4\\n        \\u5143\\u7d20\\u4e0d\\u91cd\\u590d\\n        \\u5bfb\\u627e\\u4e00\\u4e2a\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u7ec4\\u5408\\n        \\u4e14\\u539f\\u6570\\u7ec4\\u7684\\u5355\\u4e2a\\u5143\\u7d20\\u53ef\\u4ee5\\u91cd\\u590d\\u4f7f\\u7528\\n        \\u53ea\\u8981\\u7ed3\\u679c\\u4e2d\\u7684\\u5b50\\u7ec4\\u5408\\u4e92\\u4e0d\\u76f8\\u540c\\u5373\\u53ef\\n        \\u6c42\\u89e3\\n        \\u4e14\\u539f\\u6570\\u7ec4\\u7684\\u5355\\u4e2a\\u5143\\u7d20\\u53ef\\u4ee5\\u91cd\\u590d\\u4f7f\\u7528\\n        \\u610f\\u5473\\u7740\\u4e0b\\u4e00\\u4e2afor\\u5faa\\u73af\\u4e2d\\u7684\\u5143\\u7d20\\u9009\\u53d6\\uff0c\\u8981\\u4ece\\u524d\\u4e00\\u4e2a\\u5143\\u7d20\\u5f00\\u59cb\\uff0c\\u56e0\\u4e3a\\u53ef\\u4ee5\\u91cd\\u590d\\u4f7f\\u7528\\uff0c\\u4e0d\\u7136\\u5982\\u679c\\u8ddf\\u7740for\\u7684\\u81ea\\u589e\\u53d8\\u91cfi\\u8d70\\uff0c\\u4f1a\\u6f0f\\u6389\\u53ef\\u80fd\\u89e3\\n        \\u5c06\\u81ea\\u589e\\u53d8\\u91cfi\\u4f20\\u9012\\u4e0b\\u53bb\\n        \\u7ec8\\u6b62\\u6761\\u4ef6\\n        target \\u4e00\\u4e00\\u51cf\\u53bb\\u7b26\\u5408\\u7ec4\\u5408\\u7684\\u5143\\u7d20\\uff0c\\u6700\\u7ec8\\u4e3a 0 \\uff0c\\u624d\\u662f\\u4e00\\u4e2a\\u7b26\\u5408\\u9898\\u610f\\u7684\\u7ec4\\u5408\\n        /**\\n         * @param {number[]} candidates\\n         * @param {number} target\\n         * @return {number[][]}\\n         */\\n        var combinationSum = function(candidates, target) {\\n            let n = candidates.length;\\n            let res = [];\\n            let tmpPath = [];\\n            let backtrack = (tmpPath,target,start) => {\\n                if(target < 0){\\n                    return;\\n                }\\n                if(target == 0){\\n                    res.push(tmpPath);\\n                    return;\\n                }\\n                for(let i = start;i < n;i++){\\n                    tmpPath.push(candidates[i]);\\n                    backtrack(tmpPath.slice(),target - candidates[i],i);\\n                    tmpPath.pop();\\n                }\\n            }\\n            backtrack(tmpPath,target,0);\\n            return res;\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u9012\\u5f52\\u56de\\u6eaf + \\u51cf\\u679d\\n        \\u7c7b\\u4f3c\\u9898\\u578b\\n        47. \\u5168\\u6392\\u5217 II - \\u89e3\\u6cd5\\u4e8c\\n        \\u91cd\\u590d\\u95ee\\u9898\\n        [1,3,5,6] target = 8\\n        \\u5f53tmpPath = [1,3]\\u65f6\\n        target = 8 - 1 - 3 = 4\\n        \\u6b64\\u65f6 4 < 5\\n        \\u56e0\\u6b64\\u4e4b\\u540e\\u6bd45\\u66f4\\u5927\\u7684\\u5143\\u7d20\\u4e5f\\u662f\\u4e0d\\u5408\\u9898\\u610f\\u7684\\uff0c\\u5bf9\\u4e8e\\u6240\\u6709\\u7ec4\\u5408\\u4e2d\\u4ee5[1,3]\\u4e3a\\u9996\\u7684\\u7ec4\\u5408\\u65e0\\u9700\\u518d\\u8fdb\\u884c\\u4e0b\\u4e00\\u6b65\\u7ec4\\u5408\\uff0c\\u76f4\\u63a5\\u8fdb\\u884c\\u4e0b\\u4e00\\u8f6e\\u7ec4\\u5408\\n        \\u5f53\\u4ee5[1,3]\\u4e24\\u4e2a\\u5143\\u7d20\\u4e3a\\u5c3e\\u90e8\\u6216\\u4e2d\\u95f4\\u90e8\\u5206\\u7684\\u53ef\\u80fd\\u7ec4\\u5408\\u5c31\\u6709\\u53ef\\u80fd\\u662f\\u6b63\\u786e\\u7684\\n        \\u7ed3\\u679c\\n        [[1,1,1,1,1,1,1,1],[1,1,1,1,1,3],[1,1,1,5],[1,1,3,3],[1,1,6],[3,5]]\\n        \\u526a\\u679d\\n        \\u6392\\u5e8f\\u539f\\u6570\\u7ec4\\n        \\u5982\\u91cd\\u590d\\u95ee\\u9898\\u793a\\u4f8b\\u64cd\\u4f5c\\uff0c\\u7ffb\\u8bd1\\u6210\\u4ee3\\u7801\\u5373\\u53ef\\n        \\u4e5f\\u8bf4\\u660e\\u4e86\\u6392\\u5e8f\\u7684\\u610f\\u4e49\\u6240\\u5728\\n        /**\\n         * @param {number[]} candidates\\n         * @param {number} target\\n         * @return {number[][]}\\n         */\\n        var combinationSum = function(candidates, target) {\\n            let n = candidates.length;\\n            let res = [];\\n            let tmpPath = [];\\n            candidates = candidates.sort((a,b) => {return a - b})\\n            let backtrack = (tmpPath,target,start) => {\\n                if(target == 0){\\n                    res.push(tmpPath);\\n                    return;\\n                }\\n                for(let i = start;i < n;i++){\\n                    if(target < candidates[i]) break;\\n                    tmpPath.push(candidates[i]);\\n                    backtrack(tmpPath.slice(),target - candidates[i],i);\\n                    tmpPath.pop();\\n                }\\n            }\\n            backtrack(tmpPath,target,0);\\n            return res;\\n        };\\n    \"},{id:\"0036\",name:\"Combination_Sum_II\",refLink:[\"https://www.lintcode.com/problem/combination-sum-ii/description\",\"https://leetcode-cn.com/problems/combination-sum-ii/solution/40-zu-he-zong-he-ii-by-alexer-660/\",\"https://www.jiuzhang.com/solution/combination-sum-ii/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array num and a number target. Find all unique combinations in num where the numbers sum to target.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/combination-sum-ii/\\n\\n        const combinationSum2 = function(num, target) {\\n            let n = num.length;\\n            let res = [];\\n            let tmpPath = [];\\n            num = num.sort((a,b) => {return a - b})\\n            let backtrack = (tmpPath,target,start) => {\\n                if(target == 0){\\n                    res.push(tmpPath);\\n                    return;\\n                }\\n                for(let i = start;i < n;i++){\\n                    if(target < num[i]) break;\\n                    if(i > start && num[i-1] == num[i]) continue;\\n                    tmpPath.push(num[i]);\\n                    backtrack(tmpPath.slice(),target - num[i],i + 1);\\n                    tmpPath.pop();\\n                }\\n            }\\n            backtrack(tmpPath,target,0);\\n            return res;\\n        };\\n    \"},{id:\"0037\",name:\"Palindrome_Partitioning\",refLink:[\"https://leetcode-cn.com/problems/palindrome-partitioning/solution/jschao-guo-90dong-tai-gui-hua-shen-du-you-xian-sou/\",\"https://www.lintcode.com/problem/palindrome-partitioning/description\",\"https://www.jiuzhang.com/solution/palindrome-partitioning/\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a string s. Partition s such that every substring in the partition is a palindrome.\\n\\n        // Return all possible palindrome partitioning of s.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/palindrome-partitioning/\\n\\n        function isPalindrome(s) {\\n            let dp = new Array(s.length)\\n            for (let i = 0; i < dp.length; i++) {\\n                dp[i] = new Array(s.length).fill(false)\\n            }\\n            for (let l = 1; l <= s.length; l++) {\\n                for (let i = 0; i <= s.length - l; i++) {\\n                    let j = i + l - 1\\n                    dp[i][j] = s[i] == s[j] && (l < 3 || dp[i + 1][j - 1])\\n                }\\n            }\\n            return dp\\n        }\\n        \\n        var partition = function (s) {\\n            let dp = isPalindrome(s)\\n            let ans = []\\n        \\n            function dfs(router) {\\n                if (router.length > 0 && router[router.length - 1][1] == s.length - 1) {\\n                    ans.push(router)\\n                    return\\n                }\\n                let row = router[router.length - 1]\\n                for (let j = row[1] + 1; j < s.length; j++) {\\n                    if (dp[row[1] + 1][j]) {\\n                        dfs([...router].concat([[row[1] + 1, j]]))\\n                    }\\n                }\\n            }\\n        \\n            for (let j = 0; j < s.length; j++) {\\n                if (dp[0][j]) dfs([[0, j]])\\n            }\\n            \\n            return ans.map((item) => {\\n                return item.reduce((pre, k) => {\\n                   return pre.concat([s.substr(k[0], k[1] - k[0] + 1)])\\n                }, [])\\n            })\\n        };\\n    \"},{id:\"0038\",name:\"Permutations_II\",refLink:[\"https://www.lintcode.com/problem/permutations-ii/description\",\"https://www.jiuzhang.com/solution/permutations-ii/\"],level:\"Medium\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given a list of numbers with duplicate number in it. Find all unique permutations.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/permutations-ii/\\n\\n        public class Solution {\\n            /*\\n             * @param :  A list of integers\\n             * @return: A list of unique permutations\\n             */\\n            public List<List<Integer>> permuteUnique(int[] nums) {\\n                List<List<Integer>> results = new ArrayList<>();\\n                if (nums == null) {\\n                    return results;\\n                }\\n                \\n                Arrays.sort(nums);\\n                dfs(nums, new boolean[nums.length], new ArrayList<Integer>(), results);\\n                \\n                return results;\\n            }\\n            \\n            private void dfs(int[] nums,\\n                             boolean[] visited,\\n                             List<Integer> permutation,\\n                             List<List<Integer>> results) {\\n                if (nums.length == permutation.size()) {\\n                    results.add(new ArrayList<Integer>(permutation));\\n                    return;\\n                }\\n                \\n                for (int i = 0; i < nums.length; i++) {\\n                    if (visited[i]) {\\n                        continue;\\n                    }\\n                    if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {\\n                        continue;\\n                    }\\n                    \\n                    permutation.add(nums[i]);\\n                    visited[i] = true;\\n                    dfs(nums, visited, permutation, results);\\n                    visited[i] = false;\\n                    permutation.remove(permutation.size() - 1);\\n                }\\n            }\\n         };\\n    \"},{id:\"0039\",name:\"N_Queens\",refLink:[\"https://www.lintcode.com/problem/n-queens/description\",\"https://www.jiuzhang.com/solution/n-queens/\",\"https://leetcode-cn.com/problems/n-queens/solution/jian-ji-de-javascript-dfs-ti-jie-dai-zhu-shi-by-_t/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // The n-queens puzzle is the problem of placing n queens on an n\\xd7n chessboard such that no two queens attack each other(Any two queens can't be in the same row, column, diagonal line).\\n\\n        // Given an integer n, return all distinct solutions to the n-queens puzzle.\\n        \\n        // Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' each indicate a queen and an empty space respectively.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/n-queens/\\n\\n        var solveNQueens = function(n) {\\n            let res = []\\n            dfs(n, [], res)\\n            return res\\n          }\\n          \\n          /**\\n           * \\u9012\\u5f52\\u8ba1\\u7b97 N \\u7687\\u540e\\u7684\\u89e3\\n           * @param {number} n\\n           * @param {number[]} tmp \\u957f\\u5ea6\\u4e3a n \\u7684\\u6570\\u7ec4\\uff0ctmp[i] \\u4ee3\\u8868\\u7b2c i \\u884c\\u7684\\u7687\\u540e\\u653e\\u7f6e\\u7684\\u4f4d\\u7f6e\\n           * @param {string[]} res\\n           */\\n          function dfs(n, tmp, res) {\\n            // \\u5982\\u679c tmp \\u957f\\u5ea6\\u4e3a n\\uff0c\\u4ee3\\u8868\\u6240\\u6709\\u7687\\u540e\\u653e\\u7f6e\\u5b8c\\u6bd5\\n            if (tmp.length === n) {\\n              // \\u628a\\u8fd9\\u79cd\\u89e3\\u8bb0\\u5f55\\u4e0b\\u6765\\n              res.push(\\n                tmp.map(i => {\\n                  let strArr = Array(n).fill('.')\\n                  strArr.splice(i, 1, 'Q')\\n                  return strArr.join('')\\n                })\\n              )\\n              return\\n            }\\n            // \\u6bcf\\u6b21\\u6709 n \\u4e2a\\u9009\\u62e9\\uff0c\\u8be5\\u6b21\\u653e\\u7f6e\\u5728\\u7b2c\\u51e0\\u5217\\n            for (let j = 0; j < n; j++) {\\n              // \\u5982\\u679c\\u5f53\\u524d\\u5217\\u6ee1\\u8db3\\u6761\\u4ef6\\n              if (isValid(tmp, j)) {\\n                // \\u8bb0\\u5f55\\u5f53\\u524d\\u9009\\u62e9\\n                tmp.push(j)\\n                // \\u7ee7\\u7eed\\u4e0b\\u4e00\\u6b21\\u7684\\u9012\\u5f52\\n                dfs(n, tmp, res)\\n                // \\u64a4\\u9500\\u5f53\\u524d\\u9009\\u62e9\\n                tmp.pop()\\n              }\\n            }\\n          }\\n          \\n          function isValid(tmp, j) {\\n            let i = tmp.length\\n            for (let x = 0; x < i; x++) {\\n              let y = tmp[x]\\n              if (y === j || x - y === i - j || x + y === i + j) {\\n                return false\\n              }\\n            }\\n            return true\\n          }\\n    \"},{id:\"0040\",name:\"Word_Ladder\",refLink:[\"https://www.jiuzhang.com/solution/word-ladder/#tag-other-lang-javascript\",\"https://www.lintcode.com/problem/word-ladder/description\",\"https://leetcode-cn.com/problems/word-ladder/solution/127-dan-ci-jie-long-by-alexer-660/\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:'\\n        // Given two words (start and end), and a dictionary, find the shortest transformation sequence from start to end, output the length of the sequence.\\n        // Transformation rule such that:\\n        \\n        // Only one letter can be changed at a time\\n        // Each intermediate word must exist in the dictionary. (Start and end words do not need to appear in the dictionary )\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/word-ladder/\\n\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            let queue = [beginWord];\\n            let visitedMap  = {};\\n            let count = 0;\\n            while(queue.length != 0){\\n                count ++;\\n                const length = queue.length;\\n                for(let i = 0; i < length; i ++){\\n                    let node = queue.pop();\\n                    if(node == endWord){\\n                        return count;\\n                    }\\n                    const nextList = findNext(node, wordList, visitedMap);\\n                    for(let j = 0; j < nextList.length; j ++){\\n                        if(nextList[j] == endWord){\\n                            return count + 1;\\n                        }\\n                        visitedMap[nextList[j]] = true;\\n                        queue.unshift(nextList[j]);\\n                    }\\n                }\\n            }\\n            return 0;\\n        };\\n        function findNext(word, arr, visitedMap){\\n            let result = [];\\n            for(let i = 0;i < arr.length; i ++){\\n                let ele = arr[i];\\n                if(visitedMap[ele]){\\n                    continue;\\n                }\\n                let diff = 0;\\n                for(let j = 0;j < word.length; j ++){\\n                    if(word.charAt(j) != ele.charAt(j)){\\n                        diff ++;\\n                    }\\n                }\\n                if(diff == 1){\\n                    result.push(ele);\\n                }\\n            }\\n            return result;\\n        }\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1aBFS\\n        \\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(M * N) ,M\\u4e3a\\u5355\\u8bcd\\u957f\\u5ea6\\uff0c,N\\u4e3a\\u5355\\u8bcd\\u5217\\u8868\\u957f\\u5ea6\\n        \\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(M * N) ,M\\u957f\\u5ea6\\u7684\\u5355\\u8bcd\\u5316\\u4e3a\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u65f6\\u9700\\u8981M\\uff0cN\\u540c\\u4e0a\\n        \\u7528\\u5e7f\\u5ea6\\u4f18\\u5148\\u641c\\u7d22\\u641c\\u7d22\\u4ecebeginWord\\u5230endWord\\u7684\\u6700\\u77ed\\u8def\\u5f84\\u95ee\\u9898\\n        \\u601d\\u8def\\u5206\\u6790\\n        \\u4e00\\u4e2a\\u6700\\u77ed\\u8f6c\\u6362\\u5e8f\\u5217\\u662f \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\\n\\n        \\u4ece\\u8d77\\u70b9\"hit\"\\u53d8\\u6362\\u5230\\u7ec8\\u70b9\"cog\"\\n        \\u6bcf\\u6b21\\u53d8\\u6362\\n        \\u53ea\\u80fd\\u53d8\\u52a8\\u5176\\u4e2d\\u4e00\\u4e2a\\u5355\\u8bcd\\n        \\u4e14\\u5fc5\\u987b\\u5728\\u5b57\\u5178\\u4e2d\\n        \\u56e0\\u6b64\\u6bcf\\u6b21\\u53d8\\u6362\\uff0c\\u5176\\u5b9e\\u5c31\\u662f\\u8d70\\u4e86\\u4e00\\u6b65\\n        \\u6bcf\\u6b21\\u53d8\\u6362\\u524d\\u540e\\u7684\\u5355\\u8bcd\\u5dee\\u5f02\\u53ea\\u6709\\u5176\\u4e2d\\u4e00\\u4e2a\\u5b57\\u7b26\\n        \\u8bbe\\u552f\\u4e00\\u4e0d\\u540c\\u7684\\u5b57\\u7b26\\u4e3a*\\n        \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\\n\\n        hit ----\\x3e h*t <-----hot\\n        dot ----\\x3e *ot <-----hot\\n        dot ----\\x3e do* <-----dog\\n        dog ----\\x3e *og <-----cog\\n        \\u6211\\u4eec\\u628a\\u76f8\\u5dee\\u552f\\u4e00\\u4e00\\u4e2a\\u5b57\\u7b26\\u7684\\u4e24\\u4e2a\\u5355\\u8bcd\\u79f0\\u4e3a\\u90bb\\u63a5\\u5355\\u8bcd\\n        \\u56e0\\u6b64 \\u5355\\u8bcd\\'xyz\\'\\u7684\\u6240\\u6709\\u90bb\\u63a5\\u5355\\u8bcd\\u4e3a\\n        \\'*yz\\'\\n        \\'x*z\\'\\n        \\'xy*\\'\\n        \\u56e0\\u4e3a\\u5355\\u8bcd\\u7684\\u4e0b\\u4e00\\u4e2a\\u53d8\\u6362\\u5355\\u8bcd\\u5373\\u662f\\u90bb\\u63a5\\u5355\\u8bcd\\n        \\u4f8b\\u5982\\u6211\\u4eec\\u8981\\u4ece\\'hit\\'\\u53d8\\u6362\\u5230\\'hot\\'\\n        hit\\u7684\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u6709\\n        *it\\n        h*t\\n        hi*\\n        hot\\u7684\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u6709\\n        *ot\\n        h*t\\n        ho*\\n        \\u6211\\u4eec\\u5bfb\\u627e\\u4ed6\\u4eec\\u76f8\\u540c\\u7684\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\n        \\u4e3ah*t\\n        \\u53cd\\u8fc7\\u6765\\n        \\u7b26\\u5408h*t\\u5f62\\u5f0f\\u7684\\u5355\\u8bcd\\u6709\\n        hit\\n        hot\\n        \\u56e0\\u6b64\\u5728\\u4ee3\\u7801\\u4e2d\\uff0c\\u6b64\\u5904\\u4fbf\\u662f\\u5bfb\\u627e\\u4e0b\\u4e00\\u90bb\\u63a5\\u5355\\u8bcd\\u7684\\u5173\\u952e\\u903b\\u8f91\\n        \\u4ee3\\u7801\\u903b\\u8f91\\n        \\u6c42\\u51fawordList\\u4e2d\\u7684\\u6240\\u6709\\u5355\\u8bcd\\u7684\\u6240\\u6709\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\n        \\u5c06\\u5177\\u6709\\u76f8\\u540c\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u7684\\u5355\\u8bcd\\u653e\\u5728\\u4e00\\u4e2a\\u96c6\\u5408\\u91cc\\n        \\u5f62\\u5982 hash[\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f] = [\\u5355\\u8bcd1,\\u5355\\u8bcd2,...,\\u5355\\u8bcdn]\\n        \\u5f53\\u6211\\u4eec\\u5728\\u5bfb\\u627e\\u4e0b\\u4e00\\u4e2a\\u90bb\\u63a5\\u5355\\u8bcd\\u662f\\u8c01\\u65f6\\uff0c\\u6211\\u4eec\\u901a\\u8fc7\\u6c42\\u5f53\\u524d\\u5355\\u8bcd\\u7684\\u90bb\\u63a5\\u5355\\u8bcd\\u7684\\u5f62\\u5f0f\\uff0c\\u53bb\\u679a\\u4e3e\\u4e0a\\u4e00\\u6b65\\u7684\\u6240\\u6709\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u7684\\u96c6\\u5408\\n        \\u5b58\\u5728\\u5219\\u5728\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u5bf9\\u5e94\\u7684\\u5355\\u8bcd\\u96c6\\u5408\\u91cc\\uff0c\\u904d\\u5386\\u5bfb\\u627e\\u7b26\\u5408\\u7684\\u76ee\\u6807\\u5355\\u8bcd\\n        \\u627e\\u5230\\uff0c\\u5219\\u8fd4\\u56de\\n        \\u6ca1\\u627e\\u5230\\uff0c\\u5f53\\u524d\\u5bfb\\u5740\\u6b65\\u6570++\\uff0c\\u7ee7\\u7eed\\u5bfb\\u5740\\n        \\u6211\\u4eec\\u5c06\\u4ece\\u8d77\\u70b9 beginWord --\\x3e endWord \\u7684\\u5bfb\\u5740\\u8def\\u7ebf\\uff0c\\u62bd\\u8c61\\u4e3a\\u961f\\u5217\\n        \\u521d\\u59cb\\u503c\\u662f\\u8d77\\u70b9\\uff0c\\u5165\\u961f\\n        \\u51fa\\u961f\\uff0c\\u901a\\u8fc7\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u53d8\\u6362\\u5bfb\\u5740\\uff0c\\u903b\\u8f91\\u5982\\u4e0a\\n        \\u6838\\u5fc3\\u903b\\u8f91\\u5728\\u7b2c\\u4e00\\u6b65\\n        \\u89e3\\u9898\\u6280\\u5de7\\n        \\u6bcf\\u4e2a\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u5bf9\\u5e94\\u7684\\u5355\\u8bcd\\u65e2\\u6709\\u53ef\\u80fd\\u76f8\\u540c\\uff0c\\u4f1a\\u51fa\\u73b0\\u5faa\\u73af\\u5bfb\\u5740\\u5373\\u73af\\u7684\\u5f62\\u5f0f\\n        \\u4f8b\\u5982 h*t -> hot\\u3001*ot -> hot\\n        \\u56e0\\u6b64\\u7ef4\\u62a4\\u4e00\\u4e2a\\u8bbf\\u95ee\\u8bb0\\u5f55\\u6570\\u7ec4\\uff0c\\u8bbf\\u95ee\\u6bd4\\u8f83\\u8fc7\\u7684\\u5355\\u8bcd\\uff0c\\u4e0b\\u6b21\\u4e0d\\u518d\\u8bbf\\u95ee\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            if(!endWord || wordList.indexOf(endWord) == -1){\\n                return 0;\\n            }\\n            // \\u5404\\u4e2a\\u901a\\u7528\\u72b6\\u6001\\u5bf9\\u5e94\\u6240\\u6709\\u5355\\u8bcd\\n            var comboDicts = {};\\n            var len = beginWord.length;\\n            for(var i = 0;i<wordList.length;i++){\\n                for(var r = 0;r<len;r++){\\n                    var newWord = wordList[i].substring(0,r)+\\'*\\'+wordList[i].substring(r+1,len);\\n                    (!comboDicts[newWord]) && (comboDicts[newWord] = []);\\n                    comboDicts[newWord].push(wordList[i]);\\n                }\\n            }\\n            // Queue for BFS\\n            var queue = [[beginWord,1]];\\n            // visited\\n            var visited = {beginWord:true};\\n            while(queue.length > 0){\\n                var currNode = queue.shift();\\n                var currWord = currNode[0];\\n                var currLevel = currNode[1];\\n                for(var i = 0;i < len;i++){\\n                    // \\u901a\\u7528\\u72b6\\u6001\\n                    var newWord = currWord.substring(0,i)+\\'*\\'+currWord.substring(i+1,len);\\n                    if(newWord in comboDicts){\\n                        var tmpWords = comboDicts[newWord];\\n                        for(var z = 0;z<tmpWords.length;z++){\\n                            if(tmpWords[z] == endWord){\\n                                return currLevel + 1;\\n                            }\\n                            if(!visited[tmpWords[z]]){\\n                                visited[tmpWords[z]] = true;\\n                                queue.push([tmpWords[z],currLevel+1]);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            return 0;\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1aDFS\\n        \\u601d\\u8def\\u540c433. \\u6700\\u5c0f\\u57fa\\u56e0\\u53d8\\u5316-\\u89e3\\u6cd5\\u4e09\\n        \\u8fd9\\u4e2a\\u65b9\\u6cd5\\u4f1a\\u8d85\\u65f6\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            if(!endWord || wordList.indexOf(endWord) == -1){\\n                return 0;\\n            }\\n            var visited = {};\\n            var minLevel = Number.MAX_SAFE_INTEGER;\\n            var level = 1;\\n            function recurse(beginWord,level){\\n                if(beginWord == endWord){\\n                    minLevel = Math.min(minLevel,level);\\n                }\\n                for(var i = 0;i<wordList.length;i++){\\n                    var tmpWord = wordList[i];\\n                    var diff = 0;\\n                    for(var r = 0;r<tmpWord.length;r++){\\n                        if(beginWord[r] != tmpWord[r]){\\n                            diff++;\\n                            if(diff > 1){\\n                                break;\\n                            }\\n                        }\\n                    }\\n                    if(diff == 1 && !visited[tmpWord]){\\n                        visited[tmpWord] = true;\\n                        recurse(tmpWord,level+1);\\n                        visited[tmpWord] = false;\\n                    }\\n                }\\n            }\\n            recurse(beginWord,level);\\n            return (minLevel ^ Number.MAX_SAFE_INTEGER) == 0 ? 0 : minLevel;\\n        };\\n        \\u89e3\\u6cd5\\u4e09\\uff1a\\u53cc\\u7aefBFS\\n        \\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(M*N)\\n        \\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\uff1aO(M*N)\\n        \\u6838\\u5fc3\\u601d\\u60f3\\u662f\\u89e3\\u6cd5\\u4e00\\n        \\u7c7b\\u4f3c\\u53cc\\u6307\\u9488\\u7684\\u601d\\u60f3\\n        \\u540c\\u65f6\\u4ece\\u5934\\u5c3e\\u4e24\\u4e2a\\u90e8\\u5206\\u641c\\u7d22\\u904d\\u5386\\n        \\u641c\\u7d22\\u7ec8\\u6b62\\u6761\\u4ef6\\u4e3a\\n        \\u4e00\\u4e2a\\u8282\\u70b9\\u88ab\\u4e24\\u4e2a\\u4eba\\u641c\\u7d22\\u8fc7\\n        \\u7c7b\\u4f3c\\u76f8\\u9047\\u95ee\\u9898\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            if(!endWord || wordList.indexOf(endWord) == -1){\\n                return 0;\\n            }\\n            // \\u5404\\u4e2a\\u901a\\u7528\\u72b6\\u6001\\u5bf9\\u5e94\\u6240\\u6709\\u5355\\u8bcd\\n            var comboDicts = {};\\n            var len = beginWord.length;\\n            for(var i = 0;i<wordList.length;i++){\\n                for(var r = 0;r<len;r++){\\n                    var newWord = wordList[i].substring(0,r)+\\'*\\'+wordList[i].substring(r+1,len);\\n                    (!comboDicts[newWord]) && (comboDicts[newWord] = []);\\n                    comboDicts[newWord].push(wordList[i]);\\n                }\\n            }\\n            \\n            function visitWord(currQueue,currVisited,othersVisited){\\n                var currNode = currQueue.shift();\\n                var currWord = currNode[0];\\n                var currLevel = currNode[1];\\n                for(var i = 0;i < len;i++){\\n                    // \\u901a\\u7528\\u72b6\\u6001\\n                    var newWord = currWord.substring(0,i)+\\'*\\'+currWord.substring(i+1,len);\\n                    if(newWord in comboDicts){\\n                        var tmpWords = comboDicts[newWord];\\n                        for(var z = 0;z<tmpWords.length;z++){\\n                            if(othersVisited[tmpWords[z]] != undefined){\\n                                return currLevel + othersVisited[tmpWords[z]];\\n                            }\\n                            if(currVisited[tmpWords[z]] == undefined){\\n                                currVisited[tmpWords[z]] = currLevel + 1;\\n                                currQueue.push([tmpWords[z],currLevel+1]);\\n                            }\\n                        }\\n                    }\\n                }\\n                return -1;\\n            }\\n            \\n            // Queue for BFS from beginWord\\n            var queueBegin = [[beginWord,1]];\\n            // Queue for BFS from endWord\\n            var queueEnd  = [[endWord,1]];\\n            // visited begin and end\\n            var visitedBegin = {};\\n            visitedBegin[beginWord] = 1;\\n            var visitedEnd = {};\\n            visitedEnd[endWord] = 1;\\n            while(queueBegin.length > 0 && queueEnd.length > 0){\\n                // fromBegin\\n                var ans = visitWord(queueBegin,visitedBegin,visitedEnd);\\n                if(ans > -1){\\n                    return ans;\\n                }\\n                // formEnd\\n                ans = visitWord(queueEnd,visitedEnd,visitedBegin);\\n                if(ans > -1){\\n                    return ans;\\n                }\\n            }\\n            return 0;\\n        };\\n        \\u89e3\\u6cd5\\u56db\\uff1aBFS-2\\n        \\u601d\\u8def\\u540c433. \\u6700\\u5c0f\\u57fa\\u56e0\\u53d8\\u5316-\\u89e3\\u6cd5\\u4e00\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            if(!endWord || wordList.indexOf(endWord) == -1){\\n                return 0;\\n            }\\n            var wordListHash = {};\\n            for(var i = 0;i<wordList.length;i++){\\n                wordListHash[wordList[i]] = true;\\n            }\\n            var genes = \\'abcdefghigklmnopqrstuvwxyz\\';\\n            var level = 0;\\n            var queue = [[beginWord,1]];\\n            while(queue.length != 0){\\n                var curr = queue.pop();\\n                level = curr[1]\\n                if(curr[0] == endWord){\\n                    return level;\\n                }\\n                var arrCurr = curr[0];\\n                for(var i = 0;i<arrCurr.length;i++){\\n                    for(var r = 0;r<genes.length;r++){\\n                        if(genes[r] != arrCurr[i]){\\n                            var strCurr = (arrCurr.slice(0,i))+genes[r]+(arrCurr.slice(i+1));\\n                            if(wordListHash[strCurr]){\\n                                queue.unshift([strCurr,level+1]);\\n                                wordListHash[strCurr] = false;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            return 0;\\n        };\\n        \\u6216\\u8005\\u8fd9\\u6837\\u5199\\u4e5f\\u53ef\\n        /**\\n        * @param {string} beginWord\\n        * @param {string} endWord\\n        * @param {string[]} wordList\\n        * @return {number}\\n        */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            let comboDicts = new Set(wordList);\\n            if(!comboDicts.has(endWord)){\\n                return 0;\\n            }\\n            let level = 0;\\n            let queue = [[beginWord,1]];\\n            while(queue.length != 0){\\n                let currNode = queue.pop();\\n                let currLeter = currNode[0];\\n                level = currNode[1];\\n                if(currNode[0] == endWord){\\n                    return level;\\n                }\\n                for(let i = 0;i < currLeter.length;i++){\\n                    for(r = 0;r < 26;r++){\\n                        let genTmp = String.fromCharCode(97+r);\\n                        if( genTmp != currLeter[i]){\\n                            let str = currLeter.slice(0,i)+genTmp+currLeter.slice(i+1);\\n                            if(comboDicts.has(str)){\\n                                queue.unshift([str,level+1]);\\n                                comboDicts.delete(str);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            return 0;\\n        }; \\n        \\u89e3\\u6cd5\\u4e94\\uff1a\\u53cc\\u7aefBFS\\u5347\\u7ea7\\u7248\\n        \\u6b64\\u89e3\\u6cd5\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u6bd4\\u4ee5\\u4e0a\\u66f4\\u4f4e\\n        \\u89e3\\u6cd5\\u4e00\\u548c\\u89e3\\u6cd5\\u4e8c\\u5171\\u540c\\u7684\\u6838\\u5fc3\\u601d\\u60f3\\n        \\u7528\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u3010yz\\u3001xz\\u3001xy*\\u3011\\u4f5c\\u4e3a\\u952e\\n        \\u7528\\u7b26\\u5408\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u7684\\u5355\\u8bcd\\u4f5c\\u4e3a\\u503c\\n        \\u5bfb\\u5740\\u5171\\u540c\\u7684\\u90bb\\u63a5\\u5355\\u8bcd\\u5f62\\u5f0f\\u4e3a\\u524d\\u63d0\\uff0c\\u904d\\u5386\\u5bf9\\u5e94\\u7684\\u503c\\n        \\u627e\\u5230\\u8fd4\\u56de\\u524d\\u4e00\\u6b65\\u6b65\\u6570\\u52a01\\n        \\u6ca1\\u627e\\u5230\\u7ee7\\u7eed\\u904d\\u5386\\n        \\u6b64\\u89e3\\u6cd5\\u7684\\u6838\\u5fc3\\u601d\\u60f3\\n        \\u501f\\u7528\\u4e86433. \\u6700\\u5c0f\\u57fa\\u56e0\\u53d8\\u5316-\\u89e3\\u6cd5\\u4e00 \\u7684\\u601d\\u8def\\n        \\u901a\\u8fc7\\u76f4\\u63a5\\u91cd\\u65b0\\u7ec4\\u5408\\u4e0a\\u4e00\\u6b65\\u5355\\u8bcd\\n        \\u4e0b\\u4e00\\u6b65\\u53d8\\u6362\\u4e3a\\u53ef\\u80fd\\u4e14\\u7b26\\u5408\\u6761\\u4ef6\\u7684\\u5355\\u8bcd\\uff0c\\u5728\\u5176\\u4e2d\\u904d\\u5386\\u5bfb\\u627e\\n        \\u627e\\u5230\\u8fd4\\u56de...\\n        \\u6ca1\\u627e\\u5230\\u6b65\\u6570++\\uff0c\\u7ee7\\u7eed\\u904d\\u5386\\n        \\u5355\\u7aef\\u4ea6\\u53ef\\u4ee5\\u7528\\u6b64\\u601d\\u8def\\n        \\u53cc\\u7aef\\u5219\\u9700\\u8981\\u52a0\\u4e0a\\u672c\\u9898\\u89e3\\u6cd5\\u4e09\\u7684\\u601d\\u8def\\n        \\u5408\\u5e76\\u4e24\\u9053\\u9898\\u89e3\\u7684\\u601d\\u8def\\u5373\\u4e3a\\u5982\\u4e0b\\u89e3\\u6cd5\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        var ladderLength = function(beginWord, endWord, wordList) {\\n            var comboDicts = new Set(wordList);\\n            if(!comboDicts.has(endWord)){\\n                return 0;\\n            }\\n            var len = beginWord.length;\\n            \\n            function gens(word){\\n                var result = [];\\n                var len = word.length;\\n                for(var i = 0;i<len;i++){\\n                    for(var j = 0;j < 26;j++){\\n                        var newWord = word.substring(0,i)+String.fromCharCode(j+97)+word.substring(i+1);\\n                        if(comboDicts.has(newWord) && newWord != word){\\n                            result.push(newWord);\\n                        }\\n                    }\\n                }\\n                return result;\\n            }\\n            \\n            function visitWord(currQueue,currVisited,othersVisited){\\n                var currNode = currQueue.shift();\\n                var tmpWords = gens(currNode[0]);\\n                var currLevel = currNode[1];\\n                var tmpLen = tmpWords.length;\\n                for(var i = 0;i< tmpLen;i++){\\n                    if(othersVisited[tmpWords[i]] != undefined){\\n                        return currLevel + othersVisited[tmpWords[i]];\\n                    }\\n                    if(currVisited[tmpWords[i]] == undefined){\\n                        currVisited[tmpWords[i]] = currLevel + 1;\\n                        currQueue.push([tmpWords[i],currLevel + 1])\\n                    }\\n                } \\n                return -1;\\n            }\\n            \\n            // Queue for BFS from beginWord\\n            var queueBegin = [[beginWord,1]];\\n            // Queue for BFS from endWord\\n            var queueEnd  = [[endWord,1]];\\n            // visited begin and end\\n            var visitedBegin = {};\\n            visitedBegin[beginWord] = 1;\\n            var visitedEnd = {};\\n            visitedEnd[endWord] = 1;\\n            while(queueBegin.length > 0 && queueEnd.length > 0){\\n                // fromBegin\\n                var ans = visitWord(queueBegin,visitedBegin,visitedEnd);\\n                if(ans > -1){\\n                    return ans;\\n                }\\n                // formEnd\\n                ans = visitWord(queueEnd,visitedEnd,visitedBegin);\\n                if(ans > -1){\\n                    return ans;\\n                }\\n            }\\n            return 0;\\n        };\\n        \\u89e3\\u6cd5\\u516d\\uff1a\\u53cc\\u7aefBFS\\u5f3a\\u5316\\u7248\\n        \\u5176\\u5b9e\\u662f\\u89e3\\u6cd5\\u56db\\uff1aBFS-2 \\u7b2c\\u4e8c\\u79cd\\u5199\\u6cd5\\u7684\\u53e6\\u7c7b\\u7248\\n        \\u5c06queue\\u6362\\u6210set\\n        Set \\u5bf9\\u8c61\\u641c\\u7d22\\u3001\\u5220\\u9664\\u3001\\u63d2\\u5165\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO(1)\\n        beginSet\\u3001endSet\\u5404\\u81ea\\u5411\\u4e00\\u8fb9\\u6269\\u6563\\n        visited\\uff1a\\u8282\\u70b9\\u662f\\u5426\\u5df2\\u7ecf\\u8bbf\\u95ee\\u8fc7\\n        BFS\\n        beginSet\\u3001endSet\\u76f8\\u5f53\\u4e8e\\u4e24\\u4e2aqueue\\n        \\u6269\\u6563\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u4f18\\u5148\\u9009\\u62e9\\u5c0f\\u7684set\\n        \\u4ea4\\u6362set\\n        \\u56e0\\u4e0a\\u9762\\u4f5c\\u4e86\\u4ea4\\u6362\\uff0c\\u6bcf\\u6b21\\u53ea\\u9700\\u4ecebeginSet\\u5f00\\u59cb\\u6269\\u6563\\u5373\\u53ef\\n        \\u5b9a\\u4e49\\u4e00\\u4e2atemp Set\\n        \\u76f8\\u5f53\\u4e8e\\u5411queue\\u4e0d\\u65ad\\u52a0\\u5165\\u6269\\u6563\\u4e2d\\u88ab\\u9009\\u4e2d\\u7684\\u5143\\u7d20\\n        \\u56e0\\u6b64\\u4e00\\u8f6e\\u904d\\u5386\\u5b8c\\uff0c\\u76f4\\u63a5\\u5c06beginSet\\u66ff\\u6362\\u4e3atemp\\u5373\\u53ef\\n        \\u6bcf\\u6b21\\u904d\\u5386\\u5230\\u4e00\\u4e2a\\u5355\\u8bcd\\n        \\u904d\\u5386\\u5355\\u8bcd\\u7684\\u6bcf\\u4e2a\\u5b57\\u7b26\\uff0c\\u5e76\\u5c1d\\u8bd5\\u66ff\\u6362\\u4e3a\\u4e0e\\u5f53\\u524d\\u4e0d\\u76f8\\u540c\\u7684\\u5176\\u4f5925\\u4e2a\\u5b57\\u7b26\\n        \\u5982\\u679c\\u4ece\\u5c3e\\u90e8\\u6269\\u6563\\u51fa\\u7684endSet\\u6709\\u4e86\\u65b0\\u7ec4\\u5408\\u7684\\u5355\\u8bcd\\n        \\u8bf4\\u660e\\u9996\\u5c3e\\u76f8\\u9047\\uff0c\\u76f4\\u63a5\\u8fd4\\u56de\\u5f53\\u524dlevel+1\\u5373\\u53ef\\n        \\u5426\\u5219\\uff0c\\u5982\\u679c\\u65b0\\u7ec4\\u5408\\u5355\\u8bcd\\u672a\\u5728\\u8bbf\\u95ee\\u5907\\u5fd8\\u5f55visited\\u4e2d\\u51fa\\u73b0\\uff0c\\u4e14\\u51fa\\u73b0\\u5728\\u5355\\u8bcd\\u5e93wordList\\u4e2d\\u65f6\\n        \\u52a0\\u5165tempSet\\uff0c\\u7528\\u4e8e\\u4e0b\\u4e00\\u8f6e\\u6269\\u6563\\u5355\\u8bcd\\u904d\\u5386\\u7ec4\\u5408\\u64cd\\u4f5c\\n        \\u5e76\\u4e14\\u52a0\\u5165\\u5907\\u5fd8\\u5f55visited\\n        \\u7ee7\\u7eed\\u4e0b\\u4e00\\u8f6equeue temp set\\u904d\\u5386\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        let ladderLength = function(beginWord, endWord, wordList) {\\n            let wordListSet = new Set(wordList);\\n            if(!wordListSet.has(endWord)){\\n                return 0;\\n            }\\n            let beginSet = new Set();\\n            beginSet.add(beginWord);\\n            let endSet = new Set();\\n            endSet.add(endWord)\\n            let visited = new Set();\\n            let level = 1;\\n            // BFS\\n            while (beginSet.size > 0 && endSet.size > 0) {\\n                if(beginSet.size > endSet.size){\\n                    let tmp = beginSet;\\n                    beginSet = endSet;\\n                    endSet = tmp;\\n                }\\n                let temp = new Set();\\n                for(let key of beginSet){\\n                    for(let i = 0;i < key.length;i++){\\n                        for(let j = 0;j < 26;j++){\\n                        let tmp = key.slice(0,i)+String.fromCharCode(97+j)+key.slice(i+1);\\n                        if(endSet.has(tmp)){\\n                            return level + 1;\\n                        }\\n                        if(!visited.has(tmp) && wordListSet.has(tmp)){\\n                                temp.add(tmp);\\n                                visited.add(tmp);\\n                        }\\n                        }\\n                    }\\n                }\\n                beginSet = temp;\\n                level++;\\n            }\\n            return 0;\\n        }\\n        \\u89e3\\u6cd5\\u4e03\\uff1a\\u53cc\\u7aefBFS\\u7ec8\\u6781\\u7248\\n        \\u5c06\\u89e3\\u6cd5\\u516d\\u7684visited\\u53bb\\u6389\\uff0c\\u76f4\\u63a5\\u64cd\\u4f5c\\u539f\\u6570\\u7ec4\\n        \\u5e76\\u5bf9\\u90e8\\u5206\\u53d8\\u91cf\\u547d\\u540d\\u4f5c\\u4e86\\u8bed\\u4e49\\u5316\\u5904\\u7406\\uff0c\\u66f4\\u5bb9\\u6613\\u7406\\u89e3\\n        \\u6b64\\u89e3\\u6cd5\\u662f\\u6240\\u6709\\u89e3\\u6cd5\\u4e2d\\u6700\\u5feb\\u7684\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        let ladderLength = function(beginWord, endWord, wordList) {\\n            let wordListSet = new Set(wordList);\\n            if(!wordListSet.has(endWord)){\\n                return 0;\\n            }\\n            let beginSet = new Set();\\n            beginSet.add(beginWord);\\n            let endSet = new Set();\\n            endSet.add(endWord)\\n            let level = 1;\\n            // BFS\\n            while (beginSet.size > 0) {\\n                let next_beginSet = new Set();\\n                for(let key of beginSet){\\n                    for(let i = 0;i < key.length;i++){\\n                        for(let j = 0;j < 26;j++){\\n                        let s =  String.fromCharCode(97+j);\\n                        if(s != key[i]){\\n                                let new_word = key.slice(0,i)+s+key.slice(i+1);\\n                                if(endSet.has(new_word)){\\n                                    return level + 1;\\n                                }\\n                                if(wordListSet.has(new_word)){\\n                                    next_beginSet.add(new_word);\\n                                    wordListSet.delete(new_word);\\n                                }\\n                        }\\n                        }\\n                    }\\n                }\\n                beginSet = next_beginSet;\\n                level++;\\n                if(beginSet.size > endSet.size){\\n                    let tmp = beginSet;\\n                    beginSet = endSet;\\n                    endSet = tmp;\\n                }\\n            }\\n            return 0;\\n        }\\n        \\u89e3\\u6cd5\\u516b\\uff1a\\u53cc\\u7aefBFS\\u706d\\u4e16\\u7248\\n        \\u89e3\\u6cd5\\u4e03\\u7684\\u4ea4\\u6362\\u64cd\\u4f5c\\u53bb\\u6389\\u4e2d\\u95f4\\u53d8\\u91cf\\u7f13\\u5b58\\uff0c\\u76f4\\u63a5\\u7528ES6\\u7684\\u4ea4\\u6362\\u8bed\\u6cd5\\u7cd6\\n        \\u6240\\u5e78\\u6027\\u80fd\\u76f4\\u63a5\\u98d9\\u5347\\uff0c\\u51fb\\u8d25\\u767e\\u5206\\u767e\\u3002\\n        \\u622a\\u5c4f2019-11-23\\u4e0b\\u534811.47.38.png\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {number}\\n         */\\n        let ladderLength = function(beginWord, endWord, wordList) {\\n            let wordListSet = new Set(wordList);\\n            if(!wordListSet.has(endWord)){\\n                return 0;\\n            }\\n            let beginSet = new Set();\\n            beginSet.add(beginWord);\\n            let endSet = new Set();\\n            endSet.add(endWord)\\n            let level = 1;\\n            // BFS\\n            while (beginSet.size > 0) {\\n                let next_beginSet = new Set();\\n                for(let key of beginSet){\\n                    for(let i = 0;i < key.length;i++){\\n                        for(let j = 0;j < 26;j++){\\n                        let s =  String.fromCharCode(97+j);\\n                        if(s != key[i]){\\n                                let new_word = key.slice(0,i)+s+key.slice(i+1);\\n                                if(endSet.has(new_word)){\\n                                    return level + 1;\\n                                }\\n                                if(wordListSet.has(new_word)){\\n                                    next_beginSet.add(new_word);\\n                                    wordListSet.delete(new_word);\\n                                }\\n                        }\\n                        }\\n                    }\\n                }\\n                beginSet = next_beginSet;\\n                level++;\\n                if(beginSet.size > endSet.size){\\n                    [beginSet,endSet] = [endSet,beginSet]\\n                }\\n            }\\n            return 0;\\n        }\\n    '},{id:\"0041\",name:\"Word_Ladder_II\",refLink:[\"https://www.lintcode.com/problem/word-ladder-ii/description\",\"https://leetcode-cn.com/problems/word-ladder-ii/solution/javascript-jian-dan-yi-dong-bfs-dfs-by-jsyt/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, output sequence in dictionary order.\\n        // Transformation rule such that:\\n        \\n        // Only one letter can be changed at a time\\n        // Each intermediate word must exist in the dictionary\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/word-ladder-ii/\\n\\n        \\u5148\\u7528 BFS \\u6c42\\u51fa\\u6700\\u77ed\\u8ddd\\u79bb\\n        \\u518d\\u7528 DFS \\u6c42\\u51fa\\u6700\\u77ed\\u8ddd\\u79bb\\u8def\\u5f84\\n\\n        \\u4ee3\\u7801\\n        /**\\n         * @param {string} beginWord\\n         * @param {string} endWord\\n         * @param {string[]} wordList\\n         * @return {string[][]}\\n         */\\n        var findLadders = function(beginWord, endWord, wordList) {\\n            let wordSet = new Set(wordList);\\n            if (!wordSet.has(endWord)) return [];\\n            wordSet.delete(beginWord);\\n            let beginSet = new Set([beginWord]);\\n            let map = new Map();\\n            let distance = 0;\\n            let minDistance = 0;\\n            while(beginSet.size) {\\n                if (beginSet.has(endWord)) break;\\n                let trySet = new Set();\\n                for (let word of beginSet) {\\n                    let mapSet = new Set();\\n                    for (let i = 0; i < word.length; i++) {\\n                        for (let j = 0; j < 26; j++) {\\n                            let tryWord = word.slice(0, i) + String.fromCharCode(97 + j) + word.slice(i + 1);\\n                            if (!minDistance && tryWord === endWord) minDistance = distance + 1;\\n                            if (wordSet.has(tryWord)) {\\n                                trySet.add(tryWord);\\n                                mapSet.add(tryWord);\\n                            }\\n                        }\\n                    }\\n                    map.set(word, mapSet);\\n                }\\n                distance++;\\n                for (let w of trySet) {\\n                    wordSet.delete(w);\\n                }\\n                beginSet = trySet;\\n            }\\n            let ans = [];\\n            let path = [beginWord];\\n            dfs(beginWord, endWord, ans, path, map, minDistance, 0);\\n            return ans;\\n        };\\n\\n        function dfs (beginWord, endWord, ans, path, map, minDistance, distance) {\\n            if (distance > minDistance) return ;\\n            if (beginWord === endWord) {\\n                ans.push(path.slice());\\n            }\\n            let words = map.get(beginWord)\\n            if (words) {\\n                for (let word of words) {\\n                    path.push(word)\\n                    dfs(word, endWord, ans, path, map, minDistance, distance + 1);\\n                    path.pop();\\n                }\\n            }\\n        }\\n    \"},{id:\"0042\",name:\"Reverse_Nodes_in_k_Group\",refLink:[\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/25-k-ge-yi-zu-fan-zhuan-lian-biao-by-alexer-660/\",\"https://www.lintcode.com/problem/reverse-nodes-in-k-group/description\",\"https://www.jiuzhang.com/solution/reverse-nodes-in-k-group/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\\n\\n        // If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.\\n        \\n        // You may not alter the values in the nodes, only nodes itself may be changed.\\n        // Only constant memory is allowed.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/reverse-nodes-in-k-group/\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u8fed\\u4ee3\\n        \\u601d\\u8def\\u540c206. \\u53cd\\u8f6c\\u94fe\\u8868 - \\u89e3\\u6cd5\\u4e00\\n        \\u533a\\u522b\\n        \\u9650\\u5236k\\u4e2a\\n        \\u7528\\u8ba1\\u6570\\u5b9e\\u73b0\\uff0c\\u5b9e\\u65f6\\u66f4\\u65b0\\u94fe\\u8868\\u9700\\u8981\\u53cd\\u8f6c\\u90e8\\u5206\\u7684\\u5934\\u3001\\u5c3e\\u8282\\u70b9\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n        /**\\n         * @param {ListNode} head\\n         * @param {number} k\\n         * @return {ListNode}\\n         */\\n        var reverseKGroup = function(head, k) {\\n            let cur = head;\\n            let count = 0;\\n            // \\u6c42k\\u4e2a\\u5f85\\u53cd\\u8f6c\\u5143\\u7d20\\u7684\\u9996\\u8282\\u70b9\\u548c\\u5c3e\\u8282\\u70b9\\n            while(cur != null && count != k){\\n                cur = cur.next;\\n                count++;\\n            }\\n            // \\u8db3\\u591fk\\u4e2a\\u8282\\u70b9\\uff0c\\u53bb\\u53cd\\u8f6c\\n            if(count == k){\\n                // \\u9012\\u5f52\\u94fe\\u63a5\\u540e\\u7eedk\\u4e2a\\u53cd\\u8f6c\\u7684\\u94fe\\u8868\\u5934\\u8282\\u70b9\\n                cur = reverseKGroup(cur,k);\\n                while(count != 0){\\n                    count--;\\n                    // \\u53cd\\u8f6c\\u94fe\\u8868\\n                    let tmp = head.next;\\n                    head.next = cur;\\n                    cur = head;\\n                    head = tmp;\\n                }\\n                head = cur;\\n            }\\n            return head;\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u9012\\u5f52 II\\n        \\u540c\\u89e3\\u6cd5\\u4e00\\n        \\u533a\\u522b\\n        while\\u6539\\u6210for\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n        /**\\n         * @param {ListNode} head\\n         * @param {number} k\\n         * @return {ListNode}\\n         */\\n        var reverseKGroup = function(head, k) {\\n            if(!head) return null;\\n            // \\u53cd\\u8f6c\\u94fe\\u8868\\n            let reverse = (a,b) => {\\n                let pre;\\n                let cur = a;\\n                let next = b;\\n                while(cur != b){\\n                    next = cur.next;\\n                    cur.next = pre;\\n                    pre = cur;\\n                    cur = next;\\n                }\\n                return pre;\\n            }\\n            // \\u53cd\\u8f6c\\u533a\\u95f4a-b\\u7684k\\u4e2a\\u5f85\\u53cd\\u8f6c\\u7684\\u5143\\u7d20\\n            let a = head;\\n            let b = head;\\n            for(let i = 0;i < k;i++){\\n                // \\u4e0d\\u8db3k\\u4e2a\\uff0c\\u4e0d\\u9700\\u8981\\u53cd\\u8f6c\\n                if(!b) return head;\\n                b = b.next;\\n            }\\n            // \\u53cd\\u8f6c\\u524dk\\u4e2a\\u5143\\u7d20\\n            let newHead = reverse(a,b);\\n            // \\u9012\\u5f52\\u94fe\\u63a5\\u540e\\u7eed\\u53cd\\u8f6c\\u94fe\\u8868\\n            a.next = reverseKGroup(b,k);\\n            return newHead;\\n        };\\n        \\u89e3\\u6cd5\\u4e09\\uff1a\\u6808\\u89e3\\n        \\u601d\\u8def\\u540c206. \\u53cd\\u8f6c\\u94fe\\u8868 - \\u89e3\\u6cd5\\u56db\\n        \\u533a\\u522b\\n        \\u53cd\\u8f6ck\\u4e2a\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n        /**\\n         * @param {ListNode} head\\n         * @param {number} k\\n         * @return {ListNode}\\n         */\\n        var reverseKGroup = function(head, k) {\\n            let stack = [];\\n            let preHead = new ListNode(0);\\n            let pre = preHead;\\n            // \\u5faa\\u73af\\u94fe\\u63a5\\u540e\\u7eed\\u53cd\\u8f6c\\u94fe\\u8868\\n            while(true){\\n                let count = 0;\\n                let tmp = head;\\n                while(tmp && count < k){\\n                    stack.push(tmp);\\n                    tmp = tmp.next;\\n                    count++;\\n                }\\n                // \\u4e0d\\u591fk\\u4e2a\\uff0c\\u76f4\\u63a5\\u94fe\\u63a5\\u5269\\u4e0b\\u94fe\\u8868\\u8fd4\\u56de\\n                if(count != k){\\n                    pre.next = head;\\n                    break;\\n                }\\n                // \\u51fa\\u6808\\u5373\\u662f\\u53cd\\u8f6c\\n                while(stack.length > 0){\\n                    pre.next = stack.pop();\\n                    pre = pre.next;\\n                }\\n                pre.next = tmp;\\n                head = tmp;\\n            }\\n            return preHead.next;\\n        };\\n    \"},{id:\"0043\",name:\"Copy_List_with_Random_Pointer\",refLink:[\"https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/javascript-jie-ti-by-ldq-2/\",\"https://www.lintcode.com/problem/copy-list-with-random-pointer/description\",\"https://www.jiuzhang.com/solution/copy-list-with-random-pointer/#tag-highlight\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:\"\\n        // A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.\\n\\n        // Return a deep copy of the list.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/copy-list-with-random-pointer/\\n\\n        const copyRandomList = head => {\\n            if (!head) return null\\n            let curr = head, node = new Node(), tmp = node, map = new Map()\\n            while (curr) {\\n              tmp.val = curr.val\\n              tmp.next = curr.next ? new Node() : null\\n              map.set(curr, tmp)\\n              tmp = tmp.next\\n              curr = curr.next\\n            }\\n            tmp = node\\n            while (head) {\\n              tmp.random = head.random ? map.get(head.random) : null\\n              head = head.next\\n              tmp = tmp.next\\n            }\\n            return node\\n        }\\n    \"},{id:\"0044\",name:\"Linked_List_Cycle\",refLink:[\"https://leetcode-cn.com/problems/linked-list-cycle/solution/shuang-jie-fa-floydsuan-fa-ha-xi-biao-javascriptsh/\",\"https://www.lintcode.com/problem/linked-list-cycle/desciption\",\"https://www.jiuzhang.com/solution/linked-list-cycle/#tag-highlight\"],level:\"Medium\",tag:[],notes:\"TEST with issue\",jsSolution:\"\\n        // Given a linked list, determine if it has a cycle in it.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/linked-list-cycle/\\n\\n        \\u89e3\\u6cd5 1\\uff1aFloyd \\u5224\\u5708\\u7b97\\u6cd5\\n        Floyd \\u5224\\u5708\\u7b97\\u6cd5\\u7c7b\\u4f3c\\u9f9f\\u5154\\u8d5b\\u8dd1\\uff0c\\u9700\\u8981\\u7528\\u5230\\u5feb\\u6307\\u9488 fast \\u548c\\u6162\\u6307\\u9488 slow\\u3002\\u7b97\\u6cd5\\u6d41\\u7a0b\\u662f\\uff1a\\n\\n        slow \\u6bcf\\u6b21\\u79fb\\u52a8 1 \\u4e0d\\uff0cfast \\u79fb\\u52a8 2 \\u6b65\\n        \\u4e00\\u76f4\\u79fb\\u52a8\\u4e0b\\u53bb\\uff0c\\u82e5 slow\\u3001fast \\u76f8\\u9047\\uff0c\\u90a3\\u4e48\\u5fc5\\u6709\\u73af\\uff1b\\u82e5 slow \\u6216 fast \\u62b5\\u8fbe\\u8fb9\\u754c\\uff0c\\u90a3\\u4e48\\u4e0d\\u5b58\\u5728\\u73af\\u3002\\n        \\u4ee3\\u7801\\u5b9e\\u73b0\\u5982\\u4e0b\\uff1a\\n\\n        // ac\\u5730\\u5740\\uff1ahttps://leetcode-cn.com/problems/linked-list-cycle/\\n        // \\u539f\\u6587\\u5730\\u5740\\uff1ahttps://xxoo521.com/2020-03-03-linked-list-cycle/\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {boolean}\\n         */\\n        var hasCycle = function(head) {\\n            let slow = head;\\n            let fast = head;\\n\\n            while (slow && fast && fast.next) {\\n                slow = slow.next;\\n                fast = fast.next.next;\\n                if (slow === fast) return true;\\n            }\\n            return false;\\n        };\\n        \\u89e3\\u6cd5 2: \\u54c8\\u5e0c\\u8868\\n        \\u8fd9\\u79cd\\u89e3\\u6cd5\\u6bd4\\u8f83\\u5bb9\\u6613\\u60f3\\u5230\\uff0c\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u6765\\u8bb0\\u5f55\\u8282\\u70b9\\u662f\\u5426\\u51fa\\u73b0\\u8fc7\\u3002\\u82e5\\u5b58\\u5728\\u73af\\uff0c\\u90a3\\u4e48\\u4e00\\u76f4\\u5411\\u4e0b\\u8bbf\\u95ee\\uff0c\\u4e00\\u5b9a\\u4f1a\\u56de\\u5230\\u73af\\u7684\\u5165\\u53e3\\u5904\\u3002\\n\\n        \\u4ee3\\u7801\\u5b9e\\u73b0\\u5982\\u4e0b\\uff1a\\n\\n        // ac\\u5730\\u5740\\uff1ahttps://leetcode-cn.com/problems/linked-list-cycle/\\n        // \\u539f\\u6587\\u5730\\u5740\\uff1ahttps://xxoo521.com/2020-03-03-linked-list-cycle/\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {boolean}\\n         */\\n        var hasCycle = function(head) {\\n            if (!head) return false;\\n\\n            const map = new Map();\\n            let node = head;\\n            map.set(node, true);\\n\\n            while (node.next) {\\n                if (map.get(node.next)) {\\n                    // map.clear() // \\u8282\\u7701\\u65f6\\u95f4\\u53ef\\u4ee5\\u53bb\\u6389\\n                    return true;\\n                }\\n                map.set(node.next, true);\\n                node = node.next;\\n            }\\n            // map.clear()\\n            return false;\\n        };\\n    \"},{id:\"0045\",name:\"Linked_List_Cycle_II\",refLink:[\"https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/142-huan-xing-lian-biao-ii-by-alexer-660/\",\"https://www.lintcode.com/problem/linked-list-cycle-ii/description\",\"https://www.jiuzhang.com/solution/linked-list-cycle-ii/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given a linked list, return the node where the cycle begins.\\n\\n        // If there is no cycle, return null.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/linked-list-cycle-ii/\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u6807\\u8bb0\\u6cd5\\n        \\u601d\\u8def\\u540c-141. \\u73af\\u5f62\\u94fe\\u8868-\\u89e3\\u6cd5\\u4e8c\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {ListNode}\\n         */\\n        var detectCycle = function(head) {\\n            while(head && head.next){\\n                if(head.flag){\\n                    return head;\\n                }else{\\n                    head.flag = 1;\\n                    head = head.next;\\n                }\\n            }\\n            return null;\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u6570\\u7ec4\\u5224\\u91cd\\n        \\u601d\\u8def\\u540c-141. \\u73af\\u5f62\\u94fe\\u8868-\\u89e3\\u6cd5\\u4e00\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {ListNode}\\n         */\\n        var detectCycle = function(head) {\\n            let res = [];\\n            while(head != null){\\n                if(res.includes(head)){\\n                    return head;\\n                }else{\\n                    res.push(head);\\n                }\\n                head = head.next;\\n            }\\n            return null;\\n        };\\n        \\u89e3\\u6cd5\\u4e09\\uff1a\\u53cc\\u6307\\u9488\\n        \\u601d\\u8def\\n        \\u56fe\\u89e3\\n        \\u622a\\u5c4f2020-01-05\\u4e0b\\u53483.33.09.png\\n        \\u516c\\u5f0f\\n        S\\uff1a\\u521d\\u59cb\\u70b9\\u5230\\u73af\\u7684\\u5165\\u53e3\\u70b9A\\u7684\\u8ddd\\u79bb\\n        m\\uff1a\\u73af\\u7684\\u5165\\u53e3\\u70b9\\u5230\\u5feb\\u6162\\u53cc\\u6307\\u9488\\u5728\\u73af\\u5185\\u7684\\u76f8\\u9047\\u70b9B\\u7684\\u8ddd\\u79bb\\n        L\\uff1a\\u73af\\u7684\\u5468\\u957f\\n        \\u5982\\u679c S == L - m\\n        \\u90a3\\u4e48\\u53ef\\u4ee5\\u8bbe\\u7f6e\\u4e24\\u4e2a\\u6b65\\u6570\\u76f8\\u540c\\u7684\\u6307\\u9488\\u5206\\u522b\\u4ece\\uff0c\\u94fe\\u8868\\u5165\\u53e3\\u8282\\u70b9\\u548c\\u5feb\\u6162\\u53cc\\u6307\\u9488\\u76f8\\u9047\\u8282\\u70b9\\u540c\\u65f6\\u51fa\\u53d1\\n        \\u5f53\\u4ed6\\u4eec\\u7b2c\\u4e00\\u6b21\\u76f8\\u9047\\u65f6\\uff0c\\u5373\\u662f\\u73af\\u7684\\u5165\\u53e3\\u8282\\u70b9A\\u6240\\u5728\\n        \\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u8bc1\\u660e S == L - m\\n        \\u5df2\\u77e5\\u5feb\\u6307\\u9488\\u7684\\u884c\\u8d70\\u8ddd\\u79bb\\u662f\\u6162\\u6307\\u9488\\u884c\\u8d70\\u8ddd\\u79bb\\u7684\\u4e24\\u500d\\n        \\u90a3\\u4e48\\u4ed6\\u4eec\\u5728\\u73af\\u5185\\u7b2c\\u4e00\\u6b21\\u76f8\\u9047\\u65f6\\n        \\u6162\\u6307\\u9488\\u8d70\\u8fc7\\u4e86\\uff1aS + xL\\n        \\u5feb\\u6307\\u9488\\u8d70\\u8fc7\\u4e86\\uff1aS + yL\\n        \\u90a3\\u4e48\\uff0c\\u8bbeC\\u4e3a\\u6307\\u9488\\u8d70\\u8fc7\\u7684\\u8ddd\\u79bb\\n        C(\\u5feb) - C(\\u6162) = (y-x)L = nL\\n        C(\\u6162) = S + m\\n        \\u56e0\\u4e3aC(\\u5feb) == 2C(\\u6162)\\n        \\u6240\\u4ee5C(\\u5feb) - C(\\u6162) == C(\\u6162)\\n        S + m = nL\\n        S = nL - m\\n        \\u800cL\\u4e3a\\u73af\\u7684\\u5468\\u957f \\uff0cn\\u4e3a\\u4efb\\u610f\\u6b63\\u6574\\u6570\\n        \\u6240\\u4ee5 S == L - m \\u6210\\u7acb\\n        \\u89e3\\u5373\\u4e3a\\u53cd\\u8bc1\\u6cd5\\u7684\\u64cd\\u4f5c\\n        \\u5224\\u65ad\\u94fe\\u8868\\u662f\\u5426\\u6709\\u73af\\n        \\u601d\\u8def\\u540c-141. \\u73af\\u5f62\\u94fe\\u8868-\\u89e3\\u6cd5\\u4e09\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n\\n        /**\\n         * @param {ListNode} head\\n         * @return {ListNode}\\n         */\\n        var detectCycle = function(head) {\\n            if(!head || !head.next) return null;\\n            let slow = head;\\n            let fast = head;\\n            let start = head;\\n            while (fast != null && fast.next != null) {\\n                slow = slow.next;\\n                fast = fast.next.next;\\n                if (slow == fast) {\\n                    while (start != slow) {\\n                        slow = slow.next;\\n                        start = start.next;\\n                    }\\n                    return slow;\\n                }\\n            }\\n            return null;\\n        };\\n    \"},{id:\"0046\",name:\"Sort_List\",refLink:[\"https://leetcode-cn.com/problems/sort-list/solution/148-pai-xu-lian-biao-by-alexer-660/\",\"https://www.lintcode.com/problem/sort-list/description\",\"https://www.jiuzhang.com/solution/sort-list/#tag-highlight\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Sort a linked list in O(n log n) time using constant space complexity.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/sort-list/\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u5f52\\u5e76\\u6392\\u5e8f - \\u9012\\u5f52\\n        \\u7ecf\\u5178\\u6392\\u5e8f\\u7b97\\u6cd5\\u8bb2\\u89e3 - \\u5f52\\u5e76\\u6392\\u5e8f - \\u9012\\u5f52\\u7248\\n        \\u8ddf\\u4e0a\\u8ff0\\u8bb2\\u89e3\\u601d\\u8def\\u4e00\\u6a21\\u4e00\\u6837\\n        \\u6458\\u6284\\u8bb2\\u89e3\\u5982\\u4e0b\\n        1\\u3001\\u628a\\u957f\\u5ea6\\u4e3an\\u7684\\u8f93\\u5165\\u5e8f\\u5217\\u5206\\u6210\\u4e24\\u4e2a\\u957f\\u5ea6\\u4e3an/2\\u7684\\u5b50\\u5e8f\\u5217\\n        2\\u3001\\u5bf9\\u8fd9\\u4e24\\u4e2a\\u5b50\\u5e8f\\u5217\\u5206\\u522b\\u91c7\\u7528\\u5f52\\u5e76\\u6392\\u5e8f\\n        3\\u3001\\u5c06\\u4e24\\u4e2a\\u6392\\u5e8f\\u597d\\u7684\\u5b50\\u5e8f\\u5217\\u5408\\u5e76\\u6210\\u4e00\\u4e2a\\u6700\\u7ec8\\u7684\\u6392\\u5e8f\\u5e8f\\u5217\\n        \\u5bf9\\u5e94\\u94fe\\u8868\\n        1\\u3001\\u7528\\u53cc\\u6307\\u9488\\u6cd5(\\u5feb\\u6162\\u6307\\u9488)\\u5bfb\\u627e\\u94fe\\u8868\\u4e2d\\u95f4\\u8282\\u70b9\\n        \\u53c2\\u770b\\u94fe\\u8868\\u5404\\u79cd\\u64cd\\u4f5c\\u5927\\u5168 - \\u6c42\\u94fe\\u8868\\u7684\\u4e2d\\u95f4\\u8282\\u70b9\\n        \\u5947\\u6570\\u4e2a\\u8282\\u70b9\\u627e\\u5230\\u4e2d\\u70b9\\uff0c\\u5076\\u6570\\u4e2a\\u8282\\u70b9\\u627e\\u5230\\u4e2d\\u5fc3\\u5de6\\u8fb9\\u7684\\u8282\\u70b9\\n        \\u6ce8\\u610f\\n        \\u627e\\u5230\\u4e2d\\u70b9\\u540e\\uff0c\\u8981\\u5c06\\u94fe\\u8868\\u5207\\u65ad\\uff0c\\u5373 mid.next = null\\n        \\u56e0\\u94fe\\u8868\\u6027\\u8d28\\uff0c\\u5de6\\u8fb9\\u5b50\\u5e8f\\u5217\\u53d6\\u5de6\\u7aef\\u70b9\\u5373\\u53ef\\n        \\u540c\\u6570\\u7ec4\\u5f52\\u5e76\\u4e00\\u6837\\uff0c\\u53ea\\u5269\\u4e00\\u4e2a\\u8282\\u70b9\\u65f6\\u7ec8\\u6b62\\n        \\u7528\\u4e8e\\u5206\\u6210\\u5de6\\u53f3\\u4e24\\u8fb9\\u5b50\\u5e8f\\u5217\\n        \\u53f3\\u8fb9\\u5b50\\u5e8f\\u5217\\u4e3a\\u6162\\u6307\\u9488\\u7684next\\n        2\\u3001\\u9012\\u5f52\\u6392\\u5e8f\\u5de6\\u53f3\\u5b50\\u5e8f\\u5217\\n        3\\u3001\\u5408\\u5e76\\n        \\u540c\\u6570\\u7ec4\\u4e00\\u6837\\uff0c\\u5224\\u65ad\\u503c\\u7684\\u5927\\u5c0f\\n        \\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u7528\\u54e8\\u5175\\u8282\\u70b9\\u94fe\\u63a5\\u5408\\u5e76\\u540e\\u7684\\u94fe\\u8868\\uff0c\\u8fd4\\u56de\\u5373\\u53ef\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n        /**\\n         * @param {ListNode} head\\n         * @return {ListNode}\\n         */\\n        var sortList = function(head) {\\n            let mergeList = (left,right) => {\\n                let res = new ListNode(0);\\n                let pre = res;\\n                while(left && right){\\n                    if(left.val <= right.val){\\n                        pre.next = left;\\n                        left = left.next;\\n                    }else{\\n                        pre.next = right;\\n                        right = right.next;\\n                    }\\n                    pre = pre.next;\\n                }\\n                pre.next = left ? left : right;\\n                return res.next;\\n            }\\n            let mergeSort = (node) => {\\n                if(!node || !node.next) return node;\\n                let mid = node;\\n                let fast = node.next;\\n                while(fast && fast.next){\\n                    mid = mid.next;\\n                    fast = fast.next.next;\\n                }\\n                let rightList = mid.next;\\n                mid.next = null;\\n                let left = node;\\n                let right = rightList;\\n                return mergeList(mergeSort(left),mergeSort(right));\\n            }\\n            return mergeSort(head);\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u5f52\\u5e76\\u6392\\u5e8f - \\u975e\\u9012\\u5f52\\n        \\u7ecf\\u5178\\u6392\\u5e8f\\u7b97\\u6cd5\\u8bb2\\u89e3 - \\u5f52\\u5e76\\u6392\\u5e8f - \\u975e\\u9012\\u5f52\\u7248\\n        \\u8ddf\\u4e0a\\u8ff0\\u8bb2\\u89e3\\u601d\\u8def\\u4e00\\u6a21\\u4e00\\u6837\\n        /**\\n         * Definition for singly-linked list.\\n         * function ListNode(val) {\\n         *     this.val = val;\\n         *     this.next = null;\\n         * }\\n         */\\n        /**\\n         * @param {ListNode} head\\n         * @return {ListNode}\\n         */\\n        var sortList = function(head) {\\n            // \\u54e8\\u5175\\u8282\\u70b9\\n            let preHead = new ListNode(0);\\n            preHead.next = head;\\n            // \\u6c42\\u94fe\\u8868\\u957f\\u5ea6\\n            let n = 0;\\n            let curr = head;\\n            while(curr){\\n                curr = curr.next;\\n                n++;\\n            }\\n            // \\u5206\\u5272i\\u957f\\u5ea6\\u7684\\u94fe\\u8868\\uff0c\\u8fd4\\u56de\\u5269\\u4f59\\u7684\\u94fe\\u8868\\n            let split = (node,i) => {\\n                while(i != 1 && node){\\n                    node = node.next;\\n                    i--;\\n                }\\n                let rest = node ? node.next : null;\\n                if(node) node.next = null;\\n                return rest;\\n            }\\n            // \\u5408\\u5e76\\n            let merge = (left,right,pre) => {\\n                let curr = pre;\\n                while(left && right){\\n                    if(left.val <= right.val){\\n                        curr.next = left;\\n                        left = left.next;\\n                    }else{\\n                        curr.next = right;\\n                        right = right.next;\\n                    }\\n                    curr = curr.next;\\n                }\\n                curr.next = left || right;\\n                while(curr.next) curr = curr.next;\\n                return curr;\\n            }\\n            // \\u5408\\u5e76 2*i \\u4e2a\\n            for(let i = 1;i < n;i *= 2){\\n                let pre = preHead;\\n                let curr = preHead.next;\\n                // \\u5206\\u5272\\u5de6\\u53f3\\u4e24\\u90e8\\u5206\\u94fe\\u8868\\uff0c\\u5e76\\u5408\\u5e76\\n                while(curr){\\n                    let left = curr;\\n                    let right = split(left,i);\\n                    curr = split(right,i);\\n                    pre = merge(left,right,pre);\\n                }\\n            }\\n            return preHead.next;\\n        };\\n    \"},{id:\"0047\",name:\"Merge_Two_Sorted_Arrays\",refLink:[\"https://www.jiuzhang.com/solution/merge-two-sorted-arrays/\",\"https://www.lintcode.com/problem/merge-two-sorted-arrays/description\",\"https://leetcode-cn.com/problems/merge-sorted-array/solution/javascript-he-bing-liang-ge-you-xu-shu-zu-by-rhino/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // \\u5408\\u5e76\\u4e24\\u4e2a\\u6709\\u5e8f\\u5347\\u5e8f\\u7684\\u6574\\u6570\\u6570\\u7ec4A\\u548cB\\u53d8\\u6210\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\u3002\\u65b0\\u6570\\u7ec4\\u4e5f\\u8981\\u6709\\u5e8f\\u3002\\n        // https://www.lintcode.com/problem/merge-two-sorted-arrays/description\\n        \\n        const mergeSortedArray = function (A, B) {\\n            var ret = [];\\n            var i, j\\n            for (len = 0, i = 0, j = 0; i < A.length && j < B.length; ) {\\n                if (A[i] < B[j]) {\\n                    ret.push(A[i++]);\\n                } else {\\n                    ret.push(B[j++]);\\n                }\\n            }\\n            while (i < A.length) {\\n                ret.push(A[i++]);\\n            }\\n            while (j < B.length) {\\n                ret.push(B[j++]);\\n            }\\n            return ret;\\n        }\\n    \"},{id:\"0048\",name:\"Median_of_Two_Sorted_Arrays\",refLink:[\"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/gui-bing-pai-xu-javascript-by-a-mo-xi-lin-5/\",\"https://www.lintcode.com/problem/median-of-two-sorted-arrays/description\",\"https://www.jiuzhang.com/solution/median-of-two-sorted-arrays/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/median-of-two-sorted-arrays/\\n        \\n        1.\\u4ee3\\u7801\\u6700\\u5c11\\u7684\\u65b9\\u6cd5\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO((m + n)log(m + n))\\u3002(\\u56e0\\u4e3asort\\u5728\\u6570\\u636e\\u91cf\\u5c11\\u7684\\u65f6\\u5019\\u91c7\\u7528\\u7684\\u662f\\u5192\\u6ce1\\u6392\\u5e8f\\uff0c\\u6570\\u636e\\u91cf\\u5927\\u7684\\u65f6\\u5019\\u91c7\\u7528\\u7684\\u662f\\u63d2\\u6392)\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            const arr = [...nums1, ...nums2].sort((a, b) => a - b);\\n            const { length } = arr;\\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\\n        };\\n        2.\\u53cc\\u6307\\u9488\\u6392\\u5e8f\\u6cd5\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO(m + n)\\u3002\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            let reIndex = nums2.length - 1;\\n            for (let i = nums1.length - 1; i >= 0; i--) {\\n                while (nums1[i] <= nums2[reIndex] && reIndex > -1) {\\n                    nums1.splice(i + 1, 0, ...(nums2.splice(reIndex, 1)));\\n                    reIndex--;\\n                }\\n            }\\n            const arr = nums2.concat(nums1);\\n            const { length } = arr;\\n            return length % 2 ? arr[Math.floor(length / 2)] : (arr[length / 2] + arr[length / 2 - 1]) / 2;\\n        };\\n        3.\\u4e8c\\u5206\\u67e5\\u627e\\u6cd5\\uff08\\u5b98\\u65b9\\u63a8\\u8350\\uff09\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6O(log(min(m, n)))\\u3002\\n        /**\\n         * @param {number[]} nums1\\n         * @param {number[]} nums2\\n         * @return {number}\\n         */\\n        var findMedianSortedArrays = function(nums1, nums2) {\\n            if (nums1.length > nums2.length) [nums1, nums2] = [nums2, nums1];\\n            \\n            const length1 = nums1.length;\\n            const length2 = nums2.length;\\n            let min = 0;\\n            let max = length1;\\n            let half = Math.floor((length1 + length2 + 1) / 2);\\n            while (max >= min) {\\n                const i = Math.floor((max + min) / 2);\\n                const j = half - i;\\n                if (i > min && nums1[i - 1] > nums2[j]) {\\n                    max = i - 1;\\n                } else if (i < max && nums1[i] < nums2[j - 1]) {\\n                    min = i + 1;\\n                } else {\\n                    let left,right;\\n                    if (i === 0) left = nums2[j - 1];\\n                    else if (j === 0) left = nums1[i - 1];\\n                    else left = Math.max(nums1[i - 1], nums2[j - 1]);\\n                    \\n                    if (i === length1) right = nums2[j];\\n                    else if (j === length2) right = nums1[i];\\n                    else right = Math.min(nums1[i], nums2[j]);\\n                    \\n                    return (length1 + length2) % 2 ? left : (left + right) / 2;\\n                }\\n            }\\n            return 0;\\n        };\\n    \"},{id:\"0049\",name:\"Maximum_Subarray \",refLink:[\"https://www.jiuzhang.com/solution/maximum-subarray/#tag-highlight-lang-javascript\",\"https://www.lintcode.com/problem/maximum-subarray/description\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array of integers, find a contiguous subarray which has the largest sum.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/maximum-subarray/\\n        \\n        const maxSubArray = function (nums) {\\n            if (nums === null || nums.length === 0) {\\n                return 0;\\n            }\\n            var maxSum = nums[0], minSum = 0, sum = 0;\\n            var i;\\n            for (i = 0; i < nums.length; i++) {\\n                sum += nums[i];\\n                if (sum - minSum > maxSum) {\\n                    maxSum = sum - minSum;\\n                }\\n                if (sum < minSum) {\\n                    minSum = sum;\\n                }\\n            }\\n            return maxSum;\\n        }\\n    \"},{id:\"0050\",name:\"Subarray_Sum \",refLink:[\"https://www.jiuzhang.com/solution/subarray-sum/#tag-highlight\",\"https://www.lintcode.com/problem/subarray-sum/description\"],level:\"Hard\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/subarray-sum/\\n        \\n        /**\\n         * @param nums: A list of integers\\n         * @return: A list of integers includes the index of the first number\\n         *          and the index of the last number\\n         */\\n        public ArrayList<Integer> subarraySum(int[] nums) {\\n            // write your code here\\n           \\n            int len = nums.length;\\n           \\n            ArrayList<Integer> ans = new ArrayList<Integer>();\\n            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\\n           \\n            map.put(0, -1);\\n           \\n            int sum = 0;\\n            for (int i = 0; i < len; i++) {\\n                sum += nums[i];\\n               \\n                if (map.containsKey(sum)) {\\n                    ans.add(map.get(sum) + 1);\\n                    ans.add(i);\\n                    return ans;\\n                }\\n                \\n                map.put(sum, i);\\n            }\\n           \\n            return ans;\\n        }\\n    }\\n    \"},{id:\"0051\",name:\"subarray_sum_closest\",refLink:[\"https://www.jiuzhang.com/solution/subarray-sum-closest/\",\"https://www.lintcode.com/problem/subarray-sum-closest/description\"],level:\"Hard\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/subarray-sum-closest/\\n        \\n        class Pair {\\n            int sum;\\n            int index;\\n            public Pair(int s, int i) {\\n                sum = s;\\n                index = i;\\n            }\\n        }\\n            \\n        public class Solution {\\n            /**\\n             * @param nums: A list of integers\\n             * @return: A list of integers includes the index of the first number \\n             *          and the index of the last number\\n             */\\n            public int[] subarraySumClosest(int[] nums) {\\n                int[] res = new int[2];\\n                if (nums == null || nums.length == 0) {\\n                    return res;\\n                } \\n                \\n                int len = nums.length;\\n                if(len == 1) {\\n                    res[0] = res[1] = 0;\\n                    return res;\\n                }\\n                Pair[] sums = new Pair[len+1];\\n                int prev = 0;\\n                sums[0] = new Pair(0, 0);\\n                for (int i = 1; i <= len; i++) {\\n                    sums[i] = new Pair(prev + nums[i-1], i);\\n                    prev = sums[i].sum;\\n                }\\n                Arrays.sort(sums, new Comparator<Pair>() {\\n                   public int compare(Pair a, Pair b) {\\n                       return a.sum - b.sum;\\n                   } \\n                });\\n                int ans = Integer.MAX_VALUE;\\n                for (int i = 1; i <= len; i++) {\\n                    \\n                    if (ans > sums[i].sum - sums[i-1].sum) {\\n                        ans = sums[i].sum - sums[i-1].sum;\\n                        int[] temp = new int[]{sums[i].index - 1, sums[i - 1].index - 1};\\n                        Arrays.sort(temp);\\n                        res[0] = temp[0] + 1;\\n                        res[1] = temp[1];\\n                    }\\n                }\\n                \\n                return res;\\n            }\\n        }\\n        \\n        \\n        /*\\n        \\u95ee\\uff1a\\u4e3a\\u4ec0\\u4e48\\u9700\\u8981\\u4e00\\u4e2a (0,0) \\u7684\\u521d\\u59cb Pair?\\n        \\u7b54\\uff1a\\n        \\u6211\\u4eec\\u9996\\u5148\\u9700\\u8981\\u56de\\u987e\\u4e00\\u4e0b\\uff0c\\u5728 subarray \\u8fd9\\u8282\\u8bfe\\u91cc\\uff0c\\u6211\\u4eec\\u8bb2\\u8fc7\\u4e00\\u4e2a\\u91cd\\u8981\\u7684\\u77e5\\u8bc6\\u70b9\\uff0c\\u53eb\\u505a Prefix Sum\\n        \\u6bd4\\u5982\\u5bf9\\u4e8e\\u6570\\u7ec4 [1,2,3,4]\\uff0c\\u4ed6\\u7684 Prefix Sum \\u662f [1,3,6,10]\\n        \\u5206\\u522b\\u8868\\u793a \\u524d1\\u4e2a\\u6570\\u4e4b\\u548c\\uff0c\\u524d2\\u4e2a\\u6570\\u4e4b\\u548c\\uff0c\\u524d3\\u4e2a\\u6570\\u4e4b\\u548c\\uff0c\\u524d4\\u4e2a\\u6570\\u4e4b\\u548c\\n        \\u8fd9\\u4e2a\\u65f6\\u5019\\u5982\\u679c\\u4f60\\u60f3\\u8981\\u77e5\\u9053 \\u5b50\\u6570\\u7ec4 \\u4ece\\u4e0b\\u6807  1 \\u5230\\u4e0b\\u6807 2 \\u7684\\u8fd9\\u4e00\\u6bb5\\u7684\\u548c(2+3)\\uff0c\\u5c31\\u7528\\u524d 3\\u4e2a\\u6570\\u4e4b\\u548c \\u51cf\\u53bb \\u524d1\\u4e2a\\u6570\\u4e4b\\u548c = PrefixSum[2] - PrefixSum[0] = 6 - 1 = 5\\n        \\u4f60\\u53ef\\u4ee5\\u770b\\u5230\\u8fd9\\u91cc\\u7684 \\u524d x \\u4e2a\\u6570\\uff0c\\u548c\\u5177\\u4f53\\u5bf9\\u5e94\\u7684\\u4e0b\\u6807\\u4e4b\\u95f4\\uff0c\\u5b58\\u5728 +-1 \\u7684\\u95ee\\u9898\\n        \\u7b2c x \\u4e2a\\u6570\\u7684\\u4e0b\\u6807\\u662f x - 1\\uff0c\\u53cd\\u4e4b \\u4e0b\\u6807 x \\u662f\\u7b2c x + 1 \\u4e2a\\u6570\\n        \\u90a3\\u4e48\\u95ee\\u9898\\u6765\\u4e86\\uff0c\\u5982\\u679c\\u8981\\u8ba1\\u7b97 \\u4e0b\\u6807\\u4ece 0~2 \\u8fd9\\u4e00\\u6bb5\\u5462\\uff1f\\u4e5f\\u5c31\\u662f\\u7b2c1\\u4e2a\\u6570\\u5230\\u7b2c3\\u4e2a\\u6570\\uff0c\\u56e0\\u4e3a\\u90a3\\u6837\\u4f1a\\u8bbf\\u95ee\\u5230 PrefixSum[-1]\\n        \\u6240\\u4ee5\\u6211\\u4eec\\u628a PrefixSum \\u6574\\u4f53\\u5f80\\u540e\\u9762\\u79fb\\u52a8\\u4e00\\u4f4d\\uff0c\\u628a\\u7b2c0\\u4f4d\\u7a7a\\u51fa\\u6765\\u8868\\u793a\\u524d0\\u4e2a\\u6570\\u4e4b\\u548c\\uff0c\\u4e5f\\u5c31\\u662f0. => [0,1,3,6,10]\\n        \\u90a3\\u4e48\\u6b64\\u65f6\\u5c31\\u7528 PrefixSum[3] - PrefixSum[0] \\uff0c\\u8fd9\\u6837\\u8ba1\\u7b97\\u5c31\\u66f4\\u65b9\\u4fbf\\u4e86\\u3002\\n        \\u6b64\\u65f6\\uff0cPrefixSum[i] \\u4ee3\\u8868 \\u524di\\u4e2a\\u6570\\u4e4b\\u548c\\uff0c\\u4e5f\\u5c31\\u662f \\u4e0b\\u6807\\u533a\\u95f4\\u5728 0 ~ i-1 \\u8fd9\\u4e00\\u6bb5\\u7684\\u548c\\n        \\n        \\u90a3\\u4e48\\u56de\\u8fc7\\u5934\\u6765\\u770b\\u770b\\uff0c\\u4e3a\\u4ec0\\u4e48\\u6211\\u4eec\\u9700\\u8981\\u4e00\\u4e2a (0,0) \\u7684 pair \\u5462\\uff1f\\n        \\u56e0\\u4e3a \\u8fd9\\u4e2a 0,0 \\u4ee3\\u8868\\u7684\\u5c31\\u662f\\u524d0\\u4e2a\\u6570\\u4e4b\\u548c\\u4e3a0\\n        \\u4e00\\u4e2a n \\u4e2a\\u6570\\u7684\\u6570\\u7ec4\\uff0c \\u53d8\\u6210\\u4e86 prefix Sum \\u6570\\u7ec4\\u4e4b\\u540e\\uff0c\\u4f1a\\u591a\\u4e00\\u4e2a\\u6570\\u51fa\\u6765\\n        */\\n    \"},{id:\"0052\",name:\"Two_Sum\",refLink:[\"https://www.lintcode.com/problem/two-sum/description\",\"https://www.jiuzhang.com/solution/two-sum/#tag-highlight-lang-javascript\",\"https://leetcode-cn.com/problems/two-sum/solution/javascriptes6jie-jue-fang-shi-by-a-xing-29/\"],level:\"Easy\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array of integers, find two numbers such that they add up to a specific target number.\\n\\n        // The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are zero-based.\\n        \\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/two-sum/\\n        \\n        const twoSum = function (numbers, target) {\\n            var map = []\\n            var i;\\n            var res;\\n            for (i = 0; i < numbers.length; i++) {\\n                if (map.hasOwnProperty(numbers[i])) {\\n                    res = [];\\n                    res[0] = map[numbers[i]];\\n                    res[1] = i;\\n                    return res;\\n                }\\n                map[target - numbers[i]] = i;\\n            }\\n            res = [];\\n            return res;\\n        }\\n    \"},{id:\"0053\",name:\"Two_Sum_Unique_pairs\",refLink:[\"https://www.lintcode.com/problem/two-sum-unique-pairs/description\",\"https://www.jiuzhang.com/solution/two-sum-unique-pairs/#tag-highlight\"],level:\"Easy\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given an array of integers, find how many unique pairs in the array such that their sum is equal to a specific target number. Please return the number of pairs.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/two-sum-unique-pairs/\\n        \\n        public class Solution {\\n            /**\\n             * @param nums an array of integer\\n             * @param target an integer\\n             * @return an integer\\n             */\\n            public int twoSum6(int[] nums, int target) {\\n                // Write your code here\\n                if (nums == null || nums.length < 2)\\n                    return 0;\\n        \\n                Arrays.sort(nums);\\n                int cnt = 0;\\n                int left = 0, right = nums.length - 1;\\n                while (left < right) {\\n                    int v = nums[left] + nums[right];\\n                    if (v == target) {\\n                        cnt ++;\\n                        left ++;\\n                        right --;\\n                        while (left < right && nums[right] == nums[right + 1])\\n                            right --;\\n                        while (left < right && nums[left] == nums[left - 1])\\n                            left ++;\\n                    } else if (v > target) {\\n                        right --;\\n                    } else {\\n                        left ++;\\n                    }\\n                }\\n                return cnt;\\n            }\\n        }\\n    \"},{id:\"0054\",name:\"_3Sum\",refLink:[\"https://www.lintcode.com/problem/3sum/description\",\"https://www.jiuzhang.com/solution/3sum/#tag-highlight\",\"https://leetcode-cn.com/problems/3sum/solution/three-sum-ti-jie-by-wonderful611/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/3sum/\\n        \\n        \\u70ed\\u8eab\\n        \\u9996\\u5148\\uff0c\\u5148\\u627e\\u4e00\\u4e0b\\u5b83\\u7684\\u7b80\\u5316\\u7248 2sum \\u6765\\u70ed\\u70ed\\u8eab\\u3002\\n\\n        \\u6700\\u7b80\\u5355\\u7684\\u60f3\\u6cd5\\u5c31\\u662f\\u628a\\u6bcf\\u4e24\\u4e2a\\u90fd\\u62ff\\u51fa\\u6765\\u52a0\\u4e00\\u4e0b\\uff0c\\u770b\\u770b\\u7ed3\\u679c\\u662f\\u4e0d\\u662f\\u6211\\u4eec\\u60f3\\u8981\\u7684\\u3002\\u4f46\\u662f\\u76f4\\u89c9\\u544a\\u8bc9\\u6211\\u4eec\\uff0c\\u8fd9\\u6837\\u5b50\\u5e76\\u4e0d\\u9ad8\\u6548\\u3002\\u4e3e\\u4e00\\u4e2a\\u5f88\\u5b9e\\u9645\\u7684\\u4f8b\\u5b50\\u5c31\\u80fd\\u660e\\u767d\\u3002\\n\\n        \\u6bd4\\u5982\\u8fd9\\u4e2a\\u5468\\u672b\\u4f60\\u53bb\\u53c2\\u52a0\\u7ebf\\u4e0b\\u76f8\\u4eb2\\u4f1a\\uff0c\\u5168\\u573a\\u6709\\u4e14\\u53ea\\u6709\\u4e24\\u4e2a\\u4eba\\u624d\\u662f\\u771f\\u7231\\u3002\\u4e8e\\u662f\\u6211\\u4eec\\u6bcf\\u4e2a\\u4eba\\u90fd\\u8981\\u53bb\\u627e\\u5176\\u4ed6\\u6240\\u6709\\u4eba\\u804a\\u5929\\uff0c\\u53bb\\u5bfb\\u627e ta \\u662f\\u4e0d\\u662f\\u81ea\\u5df1\\u8981\\u627e\\u7684\\u53e6\\u4e00\\u534a\\u3002\\u6bcf\\u4e2a\\u4eba\\u90fd\\u8981\\u548c\\u6bcf\\u4e2a\\u4eba\\u8bf4\\u8bdd\\uff0c\\u8fd9\\u6837\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5f88\\u9ad8\\uff0c\\u7ffb\\u8bd1\\u6210\\u8ba1\\u7b97\\u673a\\u7684\\u8868\\u793a\\u5c31\\u662f O(n2)\\u3002\\n\\n            var twoSum = function(nums, target) {\\n            for (let i = 0; i < nums.length - 1; i++) { // \\u6bcf\\u4e2a\\u4eba\\n                for (let j = i + 1; j < nums.length; j++) { // \\u90fd\\u53bb\\u95ee\\u5176\\u4ed6\\u7684\\u4eba\\n                if (nums[i]+nums[j] === target) {\\n                    return [nums[i], nums[j]]\\n                }\\n                }\\n            }\\n            }\\n        \\u600e\\u4e48\\u6837\\u53ef\\u4ee5\\u66f4\\u9ad8\\u6548\\u4e00\\u70b9\\uff1f\\n        \\u8fd9\\u65f6\\u5019\\u8981\\u5f15\\u5165\\u54c8\\u5e0c\\u8868\\uff0c\\u5176\\u5b9e\\u5c31\\u662f\\u4e00\\u4e2a\\u767b\\u8bb0\\u518c\\uff0c\\u5199\\u4e0a\\u4f60\\u7684\\u540d\\u5b57\\u548c\\u4f60\\u7684\\u8981\\u6c42\\u3002\\u5982\\u679c\\u6bcf\\u4e2a\\u4eba\\u90fd\\u63d0\\u524d\\u5728\\u4e3b\\u6301\\u4eba\\u90a3\\u91cc\\u767b\\u8bb0\\u4e00\\u904d\\uff0c\\u7136\\u540e\\u53ea\\u8981\\u5927\\u5bb6\\u4f9d\\u6b21\\u518d\\u62a5\\u51fa\\u81ea\\u5df1\\u540d\\u5b57\\uff0c\\u4e3b\\u6301\\u4eba\\u5c31\\u80fd\\u591f\\u8bc6\\u522b\\u5230\\uff0cta \\u5c31\\u662f\\u4f60\\u8981\\u627e\\u7684\\u4eba\\u3002\\n\\n        var twoSum = function(nums, target) {\\n            let res = {}\\n            for (let i = 0; i < nums.length; i++) { // \\u6bcf\\u4e2a\\u4eba\\u767b\\u8bb0\\u81ea\\u5df1\\u60f3\\u8981\\u914d\\u5bf9\\u7684\\u4eba\\uff0c\\u8ba9\\u4e3b\\u6301\\u4eba\\u8bb0\\u4f4f\\n                res[target - nums[i]] = nums[i]\\n            }\\n            for (let j = 0; j < nums.length; j++) { // \\u6bcf\\u4e2a\\u4eba\\u518d\\u6b21\\u62a5\\u6570\\u7684\\u65f6\\u5019\\uff0c\\u4e3b\\u6301\\u4eba\\u770b\\u4e00\\u4e0b\\u540d\\u5355\\u91cc\\u6709\\u6ca1\\u6709\\u4ed6\\n                if (res[nums[j]] !== undefined) {\\n                return [nums[j], res[nums[j]]]\\n                }\\n            }\\n            }\\n        \\u5f88\\u5bb9\\u6613\\u770b\\u51fa\\u6765\\uff0c\\u4e0a\\u9762\\u7684\\u65b9\\u6848\\u4ecd\\u7136\\u53ef\\u4ee5\\u4f18\\u5316\\u3002\\u5c31\\u662f\\u6bcf\\u4e2a\\u4eba\\u90fd\\u6765\\u95ee\\u4e00\\u4e0b\\u4e3b\\u6301\\u4eba\\uff0c\\u81ea\\u5df1\\u8981\\u627e\\u7684\\u4eba\\u6709\\u6ca1\\u6709\\u6765\\u767b\\u8bb0\\u8fc7\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u7684\\u8bdd\\uff0c\\u5c31\\u628a\\u81ea\\u5df1\\u7684\\u8981\\u6c42\\u5199\\u4e0b\\u6765\\uff0c\\u7b49\\u7740\\u522b\\u4eba\\u6765\\u627e\\u81ea\\u5df1\\u3002\\n\\n        var twoSum = function(nums, target) {\\n            let res = {}\\n            for (let i = 0; i < nums.length; i++) { // \\u6bcf\\u4e2a\\u4eba\\u62a5\\u51fa\\u81ea\\u5df1\\u60f3\\u8981\\u914d\\u5bf9\\u7684\\u4eba\\n                if (res[nums[i]] !== undefined) { // \\u5982\\u679c\\u6709\\u4eba\\u88ab\\u767b\\u8bb0\\u8fc7\\n                return [nums[i], res[nums[i]]] // \\u5c31\\u662f\\u4ed6\\n                } else {  // \\u5426\\u5219\\n                res[target - nums[i]] = nums[i] // \\u4e3b\\u6301\\u4eba\\u8bb0\\u4f4f\\u4ed6\\u7684\\u9700\\u6c42\\n                }\\n            }\\n            }\\n        2sum \\u95ee\\u9898\\u6700\\u574f\\u7684\\u60c5\\u51b5\\u662f\\uff0c\\u7b2c\\u4e00\\u4e2a\\u4eba\\u548c\\u6700\\u540e\\u4e00\\u4e2a\\u4eba\\u914d\\u5bf9\\uff0c\\u6bcf\\u4e2a\\u4eba\\u90fd\\u53d1\\u4e86\\u4e00\\u6b21\\u8a00\\u3002\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u662f O(n)\\uff0c\\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\u4e5f\\u662f O(n)\\uff0c\\u56e0\\u4e3a\\u4e3b\\u6301\\u4eba\\u8981\\u7528\\u5c0f\\u672c\\u672c\\u8bb0\\u5f55\\u4e0b\\u6bcf\\u4e2a\\u4eba\\u7684\\u53d1\\u8a00\\uff0c\\u6700\\u574f\\u7684\\u65f6\\u5019\\uff0c\\u8981\\u628a\\u6240\\u6709\\u4eba\\u7684\\u8bc9\\u6c42\\u90fd\\u8bb0\\u4e00\\u904d\\u3002\\n\\n        \\u4ece\\u751f\\u6d3b\\u7ecf\\u9a8c\\u4e2d\\u6211\\u4eec\\u80fd\\u611f\\u89c9\\u5230\\u4ec0\\u4e48\\u65b9\\u6848\\u662f\\u6700\\u597d\\u7684\\uff0c\\u800c\\u4e14\\u4e5f\\u80fd\\u591f\\u77e5\\u9053\\uff0c\\u4ec0\\u4e48\\u7b97\\u6cd5\\u5df2\\u7ecf\\u5230\\u8fbe\\u4e86\\u4f18\\u5316\\u7684\\u6781\\u9650\\u3002\\u8fd9\\u5c31\\u662f\\u6240\\u8c13\\u7684\\u201d\\u53ea\\u4f7f\\u7528\\u4eba\\u7c7b\\u7684\\u806a\\u660e\\u624d\\u667a\\u201c\\u5c31\\u53ef\\u4ee5\\u505a\\u51fa\\u6765\\u3002\\n\\n        \\u5f53\\u7136\\uff0c \\u5982\\u679c\\u6ca1\\u6709\\u7f16\\u7a0b\\u7684\\u57fa\\u7840\\uff0c\\u53ef\\u80fd\\u4e0d\\u4f1a\\u60f3\\u5230\\u54c8\\u5e0c\\u8868-\\u767b\\u8bb0\\u518c\\u8fd9\\u6837\\u7684\\u7c7b\\u6bd4\\uff0c\\u4f46\\u8fd9\\u5e94\\u8be5\\u53ea\\u5f71\\u54cd\\u628a\\u89e3\\u51b3\\u65b9\\u6848\\u8f6c\\u5316\\u4e3a\\u4ee3\\u7801\\u8868\\u8fbe\\u3002\\u60f3\\u5230\\u89e3\\u51b3\\u65b9\\u6848\\u8fd9\\u4ef6\\u4e8b\\uff0c\\u5176\\u5b9e\\u662f\\u5b8c\\u5168\\u4e0d\\u4f9d\\u8d56\\u7f16\\u7801\\u80fd\\u529b\\u7684\\u3002\\n\\n        \\u9762\\u8bd5\\u5f88\\u591a\\u5e74\\u8f7b\\u524d\\u7aef\\u540c\\u5b66\\u7684\\u65f6\\u5019\\uff0c\\u4ed6\\u4eec\\u4f1a\\u4e00\\u4e0a\\u6765\\u5c31\\u76f4\\u63a5\\u5f00\\u59cb\\u5199\\u4ee3\\u7801\\uff0c\\u7136\\u540e\\u628a\\u8349\\u7eb8\\u5199\\u5f97\\u4e00\\u56e2\\u7cdf\\u3002\\u6211\\u90fd\\u4f1a\\u7ed9\\u4ed6\\u4eec\\u8bb2\\uff0c\\u8981\\u628a\\u7b97\\u6cd5\\u548c\\u7f16\\u7801\\u5206\\u5f00\\u6765\\u770b\\uff0c\\u4f60\\u53ef\\u4ee5\\u7528\\u4f2a\\u4ee3\\u7801\\uff0c\\u753b\\u56fe\\uff0c\\u751a\\u81f3\\u6446\\u5f04\\u5c0f\\u9053\\u5177\\u7684\\u65b9\\u6cd5\\u53bb\\u5bfb\\u6c42\\u89e3\\u6cd5\\u3002\\u6709\\u4e86\\u660e\\u786e\\u7684\\u89e3\\u6cd5\\uff0c\\u518d\\u8f6c\\u5316\\u6210\\u53ef\\u6267\\u884c\\u7684\\u4ee3\\u7801\\uff0c\\u5c31\\u662f\\u6c34\\u5230\\u6e20\\u6210\\u7684\\u4e8b\\u60c5\\u4e86\\u3002\\n\\n        three sum\\n        \\u597d\\u7684\\uff0c\\u70ed\\u8eab\\u7ed3\\u675f\\uff0c\\u73b0\\u5728\\u6765\\u770b 3sum \\u95ee\\u9898\\u3002\\u8fd9\\u4e2a\\u95ee\\u9898\\u590d\\u6742\\u4e86\\u4e00\\u4e9b\\uff0c\\u53d8\\u6210\\u4e86\\u4e00\\u4e2a\\u4eba\\u627e\\u4e24\\u4e2a\\u4eba\\u3002\\n\\n        \\u4e00\\u4e2a\\u65b0\\u7684\\u5468\\u672b\\uff0c\\u4f60\\u518d\\u6b21\\u53bb\\u73b0\\u5728\\u53c2\\u52a0\\u4e86\\u4e00\\u4e2a\\uff0c\\u989d\\uff0c\\u8fd9\\u6b21\\u4e0d\\u662f\\u76f8\\u4eb2\\u4f1a\\uff0c\\u662f\\u53c2\\u52a0\\u4e00\\u4e2a\\u8857\\u7bee\\u6bd4\\u8d5b\\uff0c\\u8d5b\\u524d\\u5f53\\u7136\\u8981\\u7ec4\\u961f\\u5566\\uff0c\\u73b0\\u5728\\u8981\\u60f3\\u4e00\\u4e2a\\u65b9\\u6cd5\\u627e\\u5230\\u961f\\u53cb\\u3002\\u7ec4\\u961f\\u8fd8\\u6709\\u4e00\\u4e2a\\u8981\\u6c42\\uff0c\\u5c31\\u662f\\u961f\\u4f0d\\u7684\\u5e73\\u5747\\u5b9e\\u529b\\u8981\\u7b26\\u5408\\u8981\\u6c42\\uff0c\\u6bd4\\u5982\\u83dc\\u9e1f\\u62b1\\u4e24\\u4e2a\\u5927\\u817f\\uff0c\\u6216\\u8005\\u6709\\u738b\\u8005\\u5e26\\u4e24\\u4e2a\\u5f31\\u9e21\\u3002\\n\\n        \\u6211\\u4eec\\u5148\\u60f3\\u4e00\\u4e2a\\u4fdd\\u5e95\\u7684\\u529e\\u6cd5\\uff0c\\u518d\\u53bb\\u6162\\u6162\\u4f18\\u5316\\u3002\\u6700\\u7b80\\u5355\\u7684\\u529e\\u6cd5\\u662f\\uff0c\\u6bcf\\u4e2a\\u4eba\\u90fd\\u53bb\\u4f9d\\u6b21\\u62c9\\u4e0a\\u53e6\\u4e00\\u4e2a\\u4eba\\u4e00\\u8d77\\u53bb\\u627e\\u7b2c\\u4e09\\u4e2a\\u4eba\\uff0c\\u8fd9\\u4e2a\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u662f O(n3)O(n3)\\u3002\\n\\n            var threeSum = function(nums) {\\n            let res = []\\n            for (let i = 0; i < nums.length - 2; i++) { // \\u6bcf\\u4e2a\\u4eba\\n                for (let j = i + 1; j < nums.length - 1; j++) { // \\u4f9d\\u6b21\\u62c9\\u4e0a\\u5176\\u4ed6\\u6bcf\\u4e2a\\u4eba\\n                for (let k = j + 1; k < nums.length; k++) { // \\u53bb\\u95ee\\u5269\\u4e0b\\u7684\\u6bcf\\u4e2a\\u4eba\\n                    if (nums[i] + nums[j] + nums[k] === 0) { // \\u6211\\u4eec\\u662f\\u4e0d\\u662f\\u53ef\\u4ee5\\u4e00\\u8d77\\u7ec4\\u961f\\n                    res.push([nums[i], nums[j], nums[k]])\\n                    }\\n                }\\n                }\\n            }\\n            return res\\n            }\\n        \\u53d7\\u5230\\u4e0a\\u9898\\u7684\\u542f\\u53d1\\uff0c\\u5728\\u51d1\\u9f50\\u4e24\\u4eba\\u4ee5\\u540e\\uff0c\\u4ed6\\u4eec\\u53ef\\u4ee5\\u627e\\u4e3b\\u6301\\u4eba\\u767b\\u8bb0\\u9700\\u6c42\\u7684\\u7b2c\\u4e09\\u4eba\\uff0c\\u800c\\u4e0d\\u9700\\u8981\\u5728\\u832b\\u832b\\u4eba\\u6d77\\u4e2d\\u53bb\\u627e\\u961f\\u53cb\\u3002\\u8fd9\\u6837\\uff0c\\u6211\\u4eec\\u5c31\\u628a\\u95ee\\u9898\\u4f18\\u5316\\u6210\\u4e86\\u6bcf\\u4e2a\\u4eba\\u90fd\\u8981\\u627e\\u5176\\u4ed6\\u6bcf\\u4e2a\\u4eba\\uff0c\\u5373\\u65f6\\u95f4\\u590d\\u6742\\u5ea6 O(n2)O(n2)\\uff0c\\u56e0\\u4e3a\\u9700\\u8981\\u4e3b\\u6301\\u4eba\\u8bb0\\u5f55\\u6570\\u636e\\uff0c\\u8fd9\\u91cc\\u8fd8\\u6709 O(n)O(n) \\u7684\\u7a7a\\u95f4\\u590d\\u6742\\u5ea6\\u3002\\n\\n            var threeSum = function(nums) {\\n                let res = []\\n                let hash = {}\\n                for (let i = 0; i < nums.length - 2; i++) { // \\u6bcf\\u4e2a\\u4eba\\n                for (let j = i + 1; j < nums.length - 1; j++) { // \\u4f9d\\u6b21\\u62c9\\u4e0a\\u5176\\u4ed6\\u6bcf\\u4e2a\\u4eba\\n                    if (hash[nums[j]] !== undefined) { // \\u5df2\\u7ecf\\u6709\\u5408\\u9002\\u81ea\\u5df1\\u7684\\u4e24\\u4eba\\u7ec4\\n                    res.push([nums[j]].concat(hash[nums[j]]))\\n                    hash[nums[j]] = undefined\\n                    } else { // \\u6ca1\\u6709\\u5408\\u9002\\u81ea\\u5df1\\u7684\\u4e24\\u4eba\\u7ec4\\n                    let mark = 0 - nums[i] - nums[j]\\n                    hash[mark] = [nums[i], nums[j]]\\n                    }\\n                }\\n                }\\n                return res\\n            } // \\u793a\\u610f\\u4ee3\\u7801 \\u672aAC\\n        \\u518d\\u4f18\\u5316\\n        \\u73b0\\u5728\\u5df2\\u7ecf\\u60f3\\u5230\\u4e86\\u53ef\\u7528\\u7684\\u901a\\u7528\\u65b9\\u6848\\uff0c\\u6839\\u636e\\u9898\\u76ee\\u7684\\u7279\\u70b9\\uff0c\\u770b\\u770b\\u8fd8\\u6709\\u54ea\\u91cc\\u53ef\\u4ee5\\u505a\\u4e00\\u4e9b\\u4f18\\u5316\\u3002\\u6bd4\\u5982\\u63d0\\u524d\\u7ed3\\u675f\\u4e00\\u4e9b\\u4e0d\\u53ef\\u80fd\\u7684\\u7ec4\\u5408\\u3002\\n\\n        \\u9996\\u5148\\u5b89\\u6392\\u6240\\u6709\\u4eba\\u6309\\u7167\\u987a\\u5e8f\\u6392\\u961f\\u7ad9\\u597d\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u9700\\u8981\\u82b1\\u65f6\\u95f4\\u7684\\u64cd\\u4f5c\\uff0c\\u4e0d\\u8fc7\\u78e8\\u5200\\u4e0d\\u8bef\\u780d\\u67f4\\u5de5\\uff0c\\u4ed8\\u51fa\\u8fd9\\u4e2a\\u65f6\\u95f4\\u8fd8\\u662f\\u503c\\u5f97\\u7684\\u3002\\u6392\\u5e8f\\u53ef\\u4ee5\\u505a\\u5230 O(nlogn)O(nlogn)\\uff0c\\u8fd9\\u662f\\u4f18\\u4e8e O(n^2)O(n \\n        2\\n        ) \\u7684\\u3002\\n\\n        \\u7136\\u540e\\u6211\\u4eec\\u9009\\u62e9\\u4e00\\u4e2a\\u4eba\\u505aC\\u4f4d\\uff0c\\u65e2\\u7136\\u662fC\\u4f4d\\uff0c\\u90a3\\u4e48\\u5c31\\u9700\\u8981\\u5de6\\u53f3\\u5404\\u6709\\u4e00\\u4e2a\\u4eba\\u3002\\u5148\\u9009\\u62e9\\u961f\\u4f0d\\u6700\\u5de6\\u8fb9\\uff08\\u6700\\u5c0f\\u503c\\uff09\\u548c\\u961f\\u4f0d\\u6700\\u53f3\\u8fb9\\uff08\\u6700\\u5927\\u503c\\uff09\\u4e24\\u4e2a\\u4eba\\uff0c\\u52a0\\u4e0a\\u4f60\\uff0c\\u7b97\\u4e00\\u4e0b\\u603b\\u548c\\u3002\\u5982\\u679c\\u5927\\u4e8e 0\\uff0c\\u8bf4\\u660e\\u5b9e\\u529b\\u592a\\u5f3a\\u4e86\\uff0c\\u5c31\\u628a\\u5c31\\u628a\\u53f3\\u4fa7\\u7684\\u4eba\\u9009\\u8c03\\u5de6\\u4e00\\u4f4d\\uff0c\\u53cd\\u4e4b\\uff0c\\u5219\\u8c03\\u6574\\u5de6\\u8fb9\\u7684\\u4eba\\u9009\\uff0c\\u589e\\u5f3a\\u4e00\\u4e0b\\u5b9e\\u529b\\u3002\\u5f53\\u67d0\\u8fb9\\u9009\\u5230\\u7d27\\u6328\\u7740\\u4f60\\u7684\\u4eba\\u7684\\u65f6\\u5019\\uff0c\\u5c31\\u610f\\u5473\\u7740\\u7ec4\\u961f\\u7ed3\\u675f\\uff0c\\u4ee5\\u4f60\\u4e3a C\\u4f4d\\u7684\\u6240\\u6709\\u53ef\\u80fd\\u90fd\\u5df2\\u7ecf\\u5c1d\\u8bd5\\u5b8c\\u6bd5\\u4e86\\u3002\\n\\n            var threeSum = function (nums) {\\n            let res = []\\n            nums.sort((a, b) => a - b) // \\u5148\\u6392\\u4e2a\\u961f\\uff0c\\u6700\\u5de6\\u8fb9\\u662f\\u6700\\u5f31\\uff08\\u5c0f\\uff09\\u7684\\uff0c\\u6700\\u53f3\\u8fb9\\u662f\\u6700\\u5f3a(\\u5927)\\u7684\\n            for (let i = 1; i < nums.length - 1; i++) { // C\\u4f4d\\u4eba\\u9009\\n                let first = 0\\n                let last = nums.length - 1\\n                do {\\n                let result = nums[i] + nums[first] + nums[last]\\n                if (result === 0) { // \\u5982\\u679c\\u53ef\\u4ee5\\u7ec4\\u961f\\n                    res.push([nums[i], nums[first], nums[last]])\\n                }\\n                if (result <= 0 && first < i) { // \\u5b9e\\u529b\\u592a\\u5f31\\uff0c\\u628a\\u83dc\\u9e1f\\u90a3\\u8fb9\\u53f3\\u79fb\\u4e00\\u4f4d\\n                    while (nums[first] === nums[++first]); // \\u5982\\u679c\\u76f8\\u7b49\\u5c31\\u8df3\\u8fc7\\n                } else if (result > 0 && last > i) { // \\u5b9e\\u529b\\u592a\\u5f3a\\uff0c\\u628a\\u5927\\u795e\\u90a3\\u8fb9\\u53f3\\u79fb\\u4e00\\u4f4d\\n                    while (nums[last] === nums[--last]);\\n                } else {\\n                    break // \\u67d0\\u4e00\\u8fb9\\u5df2\\u7ecf\\u6ca1\\u6709\\u4eba\\u9009\\u4e86\\n                }\\n                } while (1) { }\\n            }\\n            return res\\n            } // \\u793a\\u610f\\u4ee3\\u7801 \\u672aAC\\n        \\u4e8e\\u662f\\u6211\\u4eec\\u5f00\\u5f00\\u5fc3\\u5fc3\\u7684\\u628a\\u89e3\\u7b54\\u53d1\\u5230\\u4e86\\u529b\\u6263\\uff0c\\u7136\\u540e\\u5c31\\u5f97\\u5230\\u4e86\\u4e00\\u4e2a WA\\uff08wrong answer\\uff09\\u3002\\u56e0\\u4e3a\\u529b\\u6263\\u7684\\u6d4b\\u8bd5\\u7528\\u4f8b\\u5f80\\u5f80\\u4f1a\\u6709\\u5f88\\u591a\\u8fb9\\u754c\\u6570\\u636e\\uff0c\\u4e0d\\u9488\\u5bf9\\u8fd9\\u4e9b\\u7279\\u6b8a\\u60c5\\u51b5\\u505a\\u8003\\u8651\\u7684\\u8bdd\\uff0c\\u51e0\\u4e4e\\u4e00\\u5b9a\\u4f1a\\u7ffb\\u8f66\\u7684\\u3002\\n\\n        \\u9488\\u5bf9\\u7279\\u6b8a\\u7528\\u4f8b\\u4f18\\u5316\\n        \\u6211\\u4eec\\u521a\\u521a\\u7684\\u89e3\\u6cd5\\uff0c\\u4f1a\\u5728 [0,0,0,0] \\u8fd9\\u4e2a\\u60c5\\u51b5\\u4e0b\\u8d25\\u4e0b\\u9635\\u6765\\uff0c\\u6b64\\u65f6\\u6709\\u4e24\\u4e2a\\u89e3\\u51b3\\u65b9\\u6848\\uff0c\\u7b2c\\u4e00\\u79cd\\u5c31\\u662f\\u76f4\\u63a5\\u5835\\u4e0a\\u6f0f\\u6d1e\\uff0c\\u9488\\u5bf9\\u6709\\u95ee\\u9898\\u7684\\u6d4b\\u8bd5\\u6570\\u636e\\u5728\\u4ee3\\u7801\\u4e2d\\u52a0\\u8865\\u4e01\\u3002\\u5982\\u679c\\u8fd0\\u6c14\\u597d\\u7684\\u8bdd\\uff0c\\u53ef\\u80fd\\u4e0b\\u4e00\\u6b21\\u63d0\\u4ea4\\u5c31\\u4f1a AC \\u4e86\\u3002\\u4f46\\u662f\\u8fd9\\u79cd\\u65b9\\u6cd5\\u5728\\u7ade\\u8d5b\\u4e2d\\u662f\\u4e0d\\u53ef\\u53d6\\u7684\\uff0c\\u56e0\\u4e3a\\u4e00\\u6b21 WA \\u4f1a\\u6709\\u7f5a\\u65f6\\u3002\\u5728\\u5de5\\u4f5c\\u4e2d\\u6211\\u4eec\\u53ef\\u80fd\\u987a\\u624b\\u5c31\\u6253\\u8865\\u4e01\\u4fee\\u4e86\\u95ee\\u9898\\uff0c\\u7136\\u540e\\u7b49\\u5230\\u6d4b\\u8bd5\\u62a5\\u51fa\\u5176\\u4ed6\\u95ee\\u9898\\u518d\\u53bb\\u4fee\\u3002\\u5982\\u679c\\u6d4b\\u8bd5\\u6070\\u597d\\u6ca1\\u6709\\u53d1\\u73b0\\u4efb\\u4f55\\u95ee\\u9898\\uff0c\\u8fd9\\u6bb5\\u4ee3\\u7801\\u5c31\\u53ef\\u4ee5\\u4e0a\\u7ebf\\u4e86\\u3002\\u4f46\\u662f\\u8fd9\\u6837\\u5e26\\u6765\\u7684\\u95ee\\u9898\\uff0c\\u4e00\\u662f\\u5e76\\u6ca1\\u6709\\u5728\\u903b\\u8f91\\u5c42\\u9762\\u6d88\\u9664\\u67d0\\u4e00\\u7c7b\\u7279\\u6b8a\\u6570\\u636e\\u53ef\\u80fd\\u5e26\\u6765\\u7684\\u95ee\\u9898\\uff0c\\u4e8c\\u662f\\u4ee3\\u7801\\u4f1a\\u5f88\\u4e11\\u964b\\uff0c\\u53d8\\u5f97\\u96be\\u4ee5\\u7ef4\\u62a4\\u3002\\n\\n        \\u6240\\u4ee5\\u66f4\\u597d\\u7684\\u505a\\u6cd5\\u662f\\uff1a\\u4ece\\u8fd9\\u4e2a\\u4e0d\\u901a\\u8fc7\\u7684\\u6570\\u636e\\u63d0\\u53d6\\u7279\\u5f81\\uff0c\\u6dfb\\u52a0\\u5bf9\\u5e94\\u7279\\u5f81\\u6570\\u636e\\u7684\\u5904\\u7406\\u903b\\u8f91\\uff0c\\u4e00\\u6b21\\u4fee\\u590d\\u4e00\\u7c7b\\u7684\\u9519\\u8bef\\uff0c\\u5e76\\u4e14\\u5c3d\\u91cf\\u4fdd\\u6301\\u4ee3\\u7801\\u7684\\u6d41\\u7545\\u3002\\n\\n        \\u6b64\\u5904\\u7684\\u62a5\\u9519\\u662f\\u7531\\u91cd\\u590d\\u6570\\u636e\\u5f15\\u8d77\\u7684\\uff0c\\u770b\\u6837\\u5b50\\u5b8c\\u5168\\u4e00\\u6837\\u7684\\u4e24\\u4e2a\\u4eba\\u6ca1\\u5fc5\\u8981 C \\u4f4d\\u51fa\\u9053\\u4e24\\u6b21\\uff0c\\u4f46\\u662f\\u5728\\u4e00\\u4e2a\\u961f\\u4f0d\\u4e2d\\u5176\\u5b9e\\u5b58\\u5728\\u7740\\u6709\\u4e24\\u4e2a\\u76f8\\u540c\\u503c\\u7684\\u53ef\\u80fd\\uff0c\\u6bd4\\u5982 [-1, -1, 2] \\u8fd9\\u79cd\\u7ec4\\u5408\\u3002\\n\\n        \\u4e8e\\u662f\\u6211\\u4eec\\u65b0\\u7684\\u95ee\\u9898\\u5c31\\u662f\\uff1a\\u5f53\\u6709\\u591a\\u4e2a\\u76f8\\u540c\\u503c\\u7684\\u65f6\\u5019\\uff0c\\u9009\\u8c01\\u505a C \\u4f4d\\uff1f\\n\\n        \\u50cf\\u5728[-1, -1, 2]\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u7531\\u7b2c\\u4e8c\\u4e2a-1\\u505a\\u4e86 C \\u4f4d\\uff0c\\u6211\\u4eec\\u7528\\u4eba\\u7c7b\\u7684\\u806a\\u660e\\u624d\\u667a\\u60f3\\u4e00\\u4e0b\\u5c31\\u5f88\\u5bb9\\u6613\\u60f3\\u660e\\u767d\\u3002\\u5982\\u679c\\u4e00\\u4e2a\\u8d1f\\u6570\\u8981\\u505a C \\u4f4d\\uff0c\\u5b83\\u5fc5\\u987b\\u8981\\u4fdd\\u8bc1\\u961f\\u91cc\\u6709\\u4e00\\u4e2a\\u6b63\\u6570\\uff0c\\u6240\\u4ee5\\u9009\\u62e9\\u6700\\u53f3\\u8fb9\\u7684\\u90a3\\u4e2a\\u5c31\\u53ef\\u4ee5\\u3002\\u53cd\\u8fc7\\u6765\\u770b [-2, 1, 1] \\u8fd9\\u4e2a\\u6848\\u4f8b\\uff0c\\u4e3a\\u4e86\\u4fdd\\u8bc1\\u81f3\\u5c11\\u6709\\u4e00\\u4e2a\\u8d1f\\u6570\\uff0c\\u6211\\u4eec\\u9009\\u62e9\\u6700\\u5de6\\u8fb9\\u7684\\u91cd\\u590d\\u503c\\u3002\\n\\n        \\u5bf9\\u4e8e 0 \\u8fd9\\u4e2a\\u7279\\u6b8a\\u503c\\u6765\\u8bf4\\uff0c\\u5de6\\u53f3\\u4e00\\u5b9a\\u662f\\u5bf9\\u79f0\\u7684\\uff0c\\u6709\\u4e00\\u4e2a\\u6781\\u7279\\u6b8a\\u7684\\u60c5\\u51b5\\u5c31\\u662f\\u961f\\u5217\\u91cc\\u9762\\u6709\\u8d85\\u8fc7\\u4e09\\u4e2a 0\\uff0c\\u6b64\\u65f6\\u53ea\\u6709\\u9009\\u62e9\\u4e2d\\u95f4\\u7684 0 \\u624d\\u80fd\\u4fdd\\u8bc1\\u4e0d\\u9057\\u6f0f\\u8fd9\\u79cd\\u60c5\\u51b5\\u3002\\u9664\\u6b64\\u4e4b\\u5916\\uff0c\\u9009\\u62e9\\u54ea\\u4e2a0\\u5c45\\u4e2d\\u90fd\\u662f\\u65e0\\u6240\\u8c13\\u7684\\u3002\\n\\n        \\u91cd\\u6784\\u7b56\\u7565\\n        \\u7b49\\u7b49\\uff0c\\u5206\\u6790\\u5230\\u8fd9\\u91cc\\uff0c\\u597d\\u50cf\\u628a\\u4e8b\\u60c5\\u641e\\u5f97\\u8fc7\\u4e8e\\u590d\\u6742\\u4e86\\u3002\\u6211\\u4eec\\u5728\\u9009\\u62e9\\u7b2c\\u4e00\\u4e2a\\u4eba\\u7684\\u65f6\\u5019\\u5c31\\u5206\\u4e86\\u4e09\\u79cd\\u60c5\\u51b5\\u3002\\n        \\u91cd\\u65b0\\u601d\\u8003\\u4e00\\u4e0b\\uff0c\\u4e00\\u5f00\\u59cb\\u9009\\u62e9 C \\u4f4d\\uff0c\\u5b9e\\u5219\\u662f\\u4e3a\\u4e86\\u5229\\u7528\\u6709\\u5e8f\\u6570\\u7ec4\\u5feb\\u901f\\u7b5b\\u9009\\u65b9\\u6848\\u3002\\u56e0\\u4e3a\\u8fd9\\u4e2a\\u4eba\\u4f4d\\u4e8e\\u4e2d\\u95f4\\uff0c\\u6240\\u4ee5\\u624d\\u4f1a\\u6709\\u590d\\u6742\\u7684\\u9009\\u53d6\\u7b56\\u7565\\u3002\\u5982\\u679c\\u7b2c\\u4e00\\u6b21\\u76f4\\u63a5\\u9009\\u62e9\\u6700\\u5de6\\u8fb9\\u7684\\u90a3\\u4e2a\\u4eba\\uff0c\\u540e\\u9762\\u7684\\u7b56\\u7565\\u4f9d\\u7136\\u7c7b\\u4f3c\\uff0c\\u4ee5\\u53cc\\u6307\\u9488\\u4ece\\u6700\\u5927\\u6700\\u5c0f\\u4e24\\u7aef\\u76f8\\u5411\\u800c\\u884c\\uff0c\\u76f4\\u5230\\u76f8\\u9047\\uff0c\\u6216\\u8005\\u5373\\u5c06\\u7b5b\\u9009\\u51fa\\u6765\\u4e09\\u4e2a\\u7b26\\u53f7\\u76f8\\u540c\\u7684\\u7ed3\\u679c\\uff0c\\u5373\\u505c\\u6b62\\u3002\\u597d\\u50cf\\u4ecd\\u7136\\u53ef\\u4ee5\\u627e\\u5230\\u6b63\\u786e\\u7b54\\u6848\\uff0c\\u540c\\u65f6\\u4e5f\\u6070\\u597d\\u907f\\u5f00\\u4e86\\u590d\\u6742\\u7684\\u9009 C \\u4f4d\\u60c5\\u51b5\\u3002\\n\\n        \\u6211\\u4eec\\u53ef\\u4ee5\\u8fdb\\u4e00\\u6b65\\u628a\\u4e00\\u4e9b\\u660e\\u663e\\u51fa\\u754c\\u7684\\u6761\\u4ef6\\u52a0\\u4e0a\\u5224\\u65ad\\uff0c\\u518d\\u4e00\\u6b21\\u526a\\u9664\\u90e8\\u5206\\u65e0\\u7528\\u5c1d\\u8bd5\\u3002\\n\\n            var threeSum = function (nums) {\\n            let res = []\\n            let length = nums.length;\\n            nums.sort((a, b) => a - b) // \\u5148\\u6392\\u4e2a\\u961f\\uff0c\\u6700\\u5de6\\u8fb9\\u662f\\u6700\\u5f31\\uff08\\u5c0f\\uff09\\u7684\\uff0c\\u6700\\u53f3\\u8fb9\\u662f\\u6700\\u5f3a(\\u5927)\\u7684\\n            if (nums[0] <= 0 && nums[length - 1] >= 0) { // \\u4f18\\u53161: \\u6574\\u4e2a\\u6570\\u7ec4\\u540c\\u7b26\\u53f7\\uff0c\\u5219\\u65e0\\u89e3\\n                for (let i = 0; i < length - 2;) {\\n                if (nums[i] > 0) break; // \\u4f18\\u53162: \\u6700\\u5de6\\u503c\\u4e3a\\u6b63\\u6570\\u5219\\u4e00\\u5b9a\\u65e0\\u89e3\\n                let first = i + 1\\n                let last = length - 1\\n                do {\\n                    if (first >= last || nums[i] * nums[last] > 0) break // \\u4e24\\u4eba\\u9009\\u76f8\\u9047\\uff0c\\u6216\\u8005\\u4e09\\u4eba\\u540c\\u7b26\\u53f7\\uff0c\\u5219\\u9000\\u51fa\\n                    let result = nums[i] + nums[first] + nums[last]\\n                    if (result === 0) { // \\u5982\\u679c\\u53ef\\u4ee5\\u7ec4\\u961f\\n                    res.push([nums[i], nums[first], nums[last]])\\n                    }\\n                    if (result <= 0 ) { // \\u5b9e\\u529b\\u592a\\u5f31\\uff0c\\u628a\\u83dc\\u9e1f\\u90a3\\u8fb9\\u53f3\\u79fb\\u4e00\\u4f4d\\n                    while (first < last && nums[first] === nums[++first]){} // \\u5982\\u679c\\u76f8\\u7b49\\u5c31\\u8df3\\u8fc7\\n                    } else { // \\u5b9e\\u529b\\u592a\\u5f3a\\uff0c\\u628a\\u5927\\u795e\\u90a3\\u8fb9\\u53f3\\u79fb\\u4e00\\u4f4d\\n                    while (first < last && nums[last] === nums[--last]) {}\\n                    }\\n                } while (first < last)\\n                while (nums[i] === nums[++i]) {}\\n                }\\n            }\\n            return res\\n            }\\n        \\u9762\\u8bd5\\u4e2d\\u8003\\u5bdf\\u7b97\\u6cd5\\u5f53\\u7136\\u6709\\u53ef\\u80fd\\u5c31\\u662f\\u6bd4\\u8f83\\u7eaf\\u7cb9\\u7684\\u667a\\u5546\\u6d4b\\u8bd5\\u3002\\u65e2\\u7136\\u4f60\\u80fd\\u591f\\u8bb2\\u6e05\\u695a\\u8fd9\\u9053\\u9898\\uff0c\\u81f3\\u5c11\\u8bf4\\u660e\\u4f60\\u53ef\\u4ee5\\u7406\\u89e3\\u4e00\\u4e2a\\u8f83\\u590d\\u6742\\u95ee\\u9898\\u662f\\u5982\\u4f55\\u89e3\\u51b3\\u7684\\uff0c\\u601d\\u7ef4\\u548c\\u8868\\u8fbe\\u80fd\\u529b\\u53ef\\u4ee5\\u8fbe\\u5230\\u4e00\\u5b9a\\u7684\\u6c34\\u5e73\\u3002\\n\\n        \\u53e6\\u4e00\\u79cd\\u8003\\u5bdf\\u7684\\u53ef\\u80fd\\uff0c\\u5e76\\u4e0d\\u662f\\u8981\\u80cc\\u7b97\\u6cd5\\uff0c\\u800c\\u662f\\u8ba9\\u9762\\u8bd5\\u8005\\u73b0\\u573a\\u5bf9\\u95ee\\u9898\\u8fdb\\u884c\\u5206\\u6790\\uff0c\\u63d0\\u51fa\\u89e3\\u51b3\\u65b9\\u6848\\uff0c\\u7136\\u540e\\u8fdb\\u4e00\\u6b65\\u7684\\u8f6c\\u5316\\u4e3a\\u4ee3\\u7801\\uff0c\\u518d\\u53bb\\u9a8c\\u8bc1\\u3002\\u5728\\u8fd9\\u4e2a\\u8fc7\\u7a0b\\u4e2d\\u8fd8\\u53ef\\u4ee5\\u6301\\u7eed\\u7684\\u4f18\\u5316\\uff0c\\u5305\\u62ec\\u5bf9\\u8fb9\\u754c\\u7684\\u4f18\\u5316\\u8865\\u5145\\uff0c\\u5c40\\u90e8\\u5206\\u652f\\u4f18\\u5316\\uff0c\\u751a\\u81f3\\u4e5f\\u5305\\u62ec\\u5bf9\\u89e3\\u6cd5\\u6a21\\u578b\\u7684\\u4f18\\u5316\\u3002\\n        \\u8fd9\\u548c\\u6211\\u4eec\\u65e5\\u5e38\\u7684\\u5f00\\u53d1\\u8fc7\\u7a0b\\u4e5f\\u5f88\\u50cf\\u3002\\u4ece\\u9700\\u6c42\\u62bd\\u8c61\\u51fa\\u6280\\u672f\\u65b9\\u6848\\uff0c\\u518d\\u8f6c\\u5316\\u4e3a\\u4ee3\\u7801\\uff0c\\u7ecf\\u8fc7\\u8054\\u8c03\\u6d4b\\u8bd5\\uff0c\\u4feebug\\uff0c\\u53ef\\u80fd\\u8fd8\\u6709\\u6574\\u5408\\u548c\\u91cd\\u6784\\u3002\\n\\n        \\u4e00\\u9053\\u529b\\u6263\\u9898\\u76ee\\u7684\\u89e3\\u7b54\\uff0c\\u5c31\\u662f\\u4e00\\u4e2a\\u9879\\u76ee\\u5f00\\u53d1\\u7684\\u7f29\\u5f71\\uff0c\\u8fd9\\u662f\\u6211\\u5728\\u9762\\u8bd5\\u4e2d\\u7684\\u4f53\\u4f1a\\u3002\\u800c\\u6700\\u7ec8\\u6253\\u52a8\\u6211\\u7684\\u540c\\u5b66\\uff0c\\u672a\\u5fc5\\u662f\\u56e0\\u4e3a\\u5b8c\\u7f8e\\u7684\\u505a\\u5bf9\\u4e86\\u95ee\\u9898\\uff0c\\u91cd\\u8981\\u7684\\u662f\\uff0c\\u5c55\\u793a\\u4e86\\u4ed6\\u4eec\\u4f5c\\u4e3a\\u4e00\\u4e2a\\u7a0b\\u5e8f\\u5458\\uff0c\\u5e94\\u6709\\u7684\\u806a\\u660e\\u624d\\u667a\\u3002\\n    \"},{id:\"0055\",name:\"triangle_count\",refLink:[\"https://www.jiuzhang.com/solution/triangle-count/#tag-highlight\",\"https://www.lintcode.com/problem/triangle-count/description\"],level:\"Easy\",tag:[],notes:\"JAVA only\",jsSolution:\"\\n        // Given an array of integers, how many three numbers can be found in the array, so that we can build an triangle whose three edges length is the three numbers that we find?\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/triangle-count/\\n            \\n        public class Solution {\\n            /**\\n             * @param S: A list of integers\\n             * @return: An integer\\n             */\\n            public int triangleCount(int S[]) {\\n                int left = 0, right = S.length - 1;\\n                int ans = 0;\\n                Arrays.sort(S);\\n                for (int i = 0; i < S.length; i++) {\\n                    left = 0;\\n                    right = i - 1;\\n                    while (left < right) {\\n                        if (S[left] + S[right] > S[i]) {\\n                            ans = ans + (right - left);\\n                            right --;\\n                        } else {\\n                            left ++;\\n                        }\\n                    }\\n                }\\n                return ans;\\n            }\\n        }\\n    \"},{id:\"0056\",name:\"Two_Sum_Closest_to_target\",refLink:[\"https://www.lintcode.com/problem/two-sum-closest-to-target/description\",\"https://www.jiuzhang.com/solution/two-sum-closest-to-target/#tag-highlight\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:\"\\n        // http://www.lintcode.com/problem/two-sum-closest-to-target/\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: http://www.lintcode.com/problem/two-sum-closest-to-target/\\n        \\n        public class Solution {\\n            /**\\n             * @param nums an integer array\\n             * @param target an integer\\n             * @return the difference between the sum and the target\\n             */\\n            public int twoSumClosest(int[] nums, int target) {\\n                if (nums == null || nums.length < 2) {\\n                    return -1;\\n                }\\n                \\n                Arrays.sort(nums);\\n                \\n                int left = 0, right = nums.length - 1;\\n                int diff = Integer.MAX_VALUE;\\n                \\n                while (left < right) {\\n                    if (nums[left] + nums[right] < target) {\\n                        diff = Math.min(diff, target - nums[left] - nums[right]);\\n                        left++;\\n                    } else {\\n                        diff = Math.min(diff, nums[left] + nums[right] - target);\\n                        right--;\\n                    }\\n                }\\n                \\n                return diff;\\n            }\\n        }\\n        \\n        // \\u4e5d\\u7ae0\\u7845\\u8c37\\u6c42\\u804c\\u7b97\\u6cd5\\u96c6\\u8bad\\u8425\\u7248\\u672c\\n        public class Solution {\\n            /**\\n             * @param nums an integer array\\n             * @param target an integer\\n             * @return the difference between the sum and the target\\n             */\\n            int diff = Integer.MAX_VALUE;\\n            int T = 0;\\n            \\n            public void update(int[] A, int x, int y) {\\n                if (x != y && x >= 0 && x < A.length && y >= 0 && y < A.length) {\\n                    diff = Math.min(diff, Math.abs(A[x] + A[y] - T));\\n                }\\n            }\\n            \\n            public int twoSumClosest(int[] A, int target) {\\n                // Write your code here\\n                T = target;\\n                 if (A == null || A.length < 2) {\\n                    return -1;\\n                }\\n                \\n                Arrays.sort(A);\\n                \\n                int j = A.length - 1;\\n                for (int i = 0; i < A.length; ++i) {\\n                    while (j >= 0 && A[i] + A[j] > target) --j;\\n                    update(A, i, j + 1);\\n                    update(A, i, j);\\n                    update(A, i, j - 1);\\n                }\\n                \\n                return diff;\\n            }\\n        }\\n    \"},{id:\"0057\",name:\"_3Sum_Closest\",refLink:[\"https://www.jiuzhang.com/solution/3sum-closest/\",\"https://www.lintcode.com/problem/3sum-closest/description\",\"https://leetcode-cn.com/problems/3sum-closest/solution/16-zui-jie-jin-de-san-shu-zhi-he-by-alexer-660/\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/3sum-closest/\\n        \\n        /**\\n         * @param numbers: Give an array numbers of n integer\\n         * @param target: An integer\\n         * @return: return the sum of the three integers, the sum closest target.\\n         */\\n\\n        const threeSumClosest = function(numbers, target) {\\n            numbers.sort((a,b) => a - b);\\n            let res = numbers[0] + numbers[1] + numbers[2];\\n            let n = numbers.length;\\n            for(let i = 0;i < n;i++){\\n                let left = i + 1;\\n                let right = n - 1;\\n                while(left < right){\\n                    let sum = numbers[i] + numbers[left] + numbers[right];\\n                    if(Math.abs(res - target) > Math.abs(sum - target)){\\n                        res = sum;\\n                    }else if(sum > target){\\n                        right--;\\n                    }else if(sum < target){\\n                        left++;\\n                    }else if(sum === target){\\n                        return res;\\n                    }\\n                }\\n            }\\n            return res;\\n        };\\n    \"},{id:\"0059\",name:\"Sort_Colors\",refLink:[\"https://www.lintcode.com/problem/sort-colors/description\",\"https://www.jiuzhang.com/solution/sort-colors/#tag-highlight-lang-javascript\",\"https://leetcode-cn.com/problems/sort-colors/solution/75-yan-se-fen-lei-by-alexer-660/\"],level:\"Hard\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, \\n        // with the colors in the order red, white and blue.\\n\\n        // Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/sort-colors/\\n        \\n        const sortColors = function (nums) {\\n            if (nums === null || nums.length <= 1) {\\n                return;\\n            }\\n            var pl = 0;\\n            var pr = nums.length - 1;\\n            var i = 0;\\n            var tmp;\\n            while (i <= pr) {\\n                if (nums[i] === 0) {\\n                    tmp = nums[i];\\n                    nums[i] = nums[pl];\\n                    nums[pl] = tmp;\\n                    pl++;\\n                    i++;\\n                } else if(nums[i] === 1) {\\n                    i++;\\n                } else {\\n                    tmp = nums[i];\\n                    nums[i] = nums[pr];\\n                    nums[pr] = tmp;\\n                    pr--;\\n                }\\n            }\\n        }\\n\\n        \\u89e3\\u6cd5\\u4e00\\uff1a\\u8ba1\\u6570\\u6392\\u5e8f\\n        \\u601d\\u8def\\u5b8c\\u5168\\u540c - \\u7ecf\\u5178\\u6392\\u5e8f\\u7b97\\u6cd5\\u8bb2\\u89e3 - \\u8ba1\\u6570\\u6392\\u5e8f\\n        /**\\n         * @param {number[]} nums\\n         * @return {void} Do not return anything, modify nums in-place instead.\\n         */\\n        var sortColors = function(nums) {\\n            let countSort = (arr,maxVal) => {\\n                let bucketLen = maxVal + 1;\\n                let bucket = new Array(bucketLen).fill(0);\\n                let sortedI = 0;\\n                let arrLen = arr.length;\\n                for(let i = 0;i < arrLen;i++){\\n                    bucket[arr[i]]++;\\n                }\\n                for(let j = 0;j < bucketLen;j++){\\n                    while(bucket[j] > 0){\\n                        arr[sortedI++] = j;\\n                        bucket[j]--;\\n                    }\\n                }\\n                return arr;\\n            }\\n            return countSort(nums,2);\\n        };\\n        \\u89e3\\u6cd5\\u4e8c\\uff1a\\u4e24\\u8def\\u66ff\\u6362\\n        /**\\n         * @param {number[]} nums\\n         * @return {void} Do not return anything, modify nums in-place instead.\\n         */\\n        var sortColors = function(nums) {\\n            let left = 0;\\n            let n = nums.length;\\n            for(let i = 0;i < n;i++){\\n                if(nums[i] === 0){\\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\\n                    left++;\\n                }\\n            }\\n            let right = n - 1;\\n            for(let i = right;i >= left;i--){\\n                if(nums[i] === 2){\\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\\n                    right--;\\n                }\\n            }\\n        };\\n        \\u89e3\\u6cd5\\u4e09\\uff1a\\u4e00\\u6b21\\u904d\\u5386\\n        \\u89e3\\u6cd5\\u4e8c\\u7684 while \\u7248\\n        /**\\n         * @param {number[]} nums\\n         * @return {void} Do not return anything, modify nums in-place instead.\\n         */\\n        var sortColors = function(nums) {\\n            let left = 0;\\n            let right = nums.length - 1;\\n            let i = 0;\\n            while(i <= right){\\n                if(nums[i] === 0){\\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\\n                    left++;\\n                    i++;\\n                }\\n                else if(nums[i] === 2){\\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\\n                    right--;\\n                }\\n                else {\\n                    i++;\\n                }\\n            }\\n        };\\n        \\u6216\\u8005\\u8fd9\\u6837\\u5199\\u4e5f\\u53ef\\n        /**\\n         * @param {number[]} nums\\n         * @return {void} Do not return anything, modify nums in-place instead.\\n         */\\n        var sortColors = function(nums) {\\n            let left = 0;\\n            let right = nums.length - 1;\\n            let i = 0;\\n            while(i <= right){\\n                while(nums[i] == 2 && i < right){\\n                    [nums[right],nums[i]] = [nums[i],nums[right]];\\n                    right--;\\n                }\\n                while(nums[i] == 0 && i > left){\\n                    [nums[left],nums[i]] = [nums[i],nums[left]];\\n                    left++;\\n                }\\n                i++;\\n            }\\n        };\\n    \"},{id:\"0060\",name:\"sort_colors_II\",refLink:[\"https://www.jiuzhang.com/solution/sort-colors-ii/#tag-highlight-lang-javascript\",\"https://www.lintcode.com/problem/sort-colors-ii/description\"],level:\"Medium\",tag:[],notes:\"\",jsSolution:\"\\n        // Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.\\n\\n        // \\u5728\\u7ebf\\u8bc4\\u6d4b\\u5730\\u5740: https://www.lintcode.com/problem/sort-colors-ii/\\n        \\n        /**\\n         * @param colors: A list of integer\\n         * @param k: An integer\\n         * @return: \\n         */\\n        const sortColors2 = function (colors, k) {\\n            if (colors === null || colors.length === 0) {\\n                    return;\\n            }\\n            rainbowSort = function(colors, left, right, colorFrom, colorTo) {\\n                if (colorFrom === colorTo) {\\n                    return;\\n                }\\n                if (left >= right) {\\n                    return;\\n                }\\n                var colorMid = Math.floor((colorFrom + colorTo) / 2);\\n                var l = left, r = right;\\n                var temp;\\n                while (l <= r) {\\n                    while (l <= r && colors[l] <= colorMid) {\\n                        l++;\\n                    }\\n                    while (l <= r && colors[r] > colorMid) {\\n                        r--;\\n                    }\\n                    if (l <= r) {\\n                        temp = colors[l];\\n                        colors[l] = colors[r];\\n                        colors[r] = temp;\\n                        \\n                        l++;\\n                        r--;\\n                    }\\n                }\\n                \\n                rainbowSort(colors, left, r, colorFrom, colorMid);\\n                rainbowSort(colors, l, right, colorMid + 1, colorTo);\\n            }\\n            rainbowSort(colors, 0, colors.length - 1, 1, k);\\n        }\\n    \"}],se=Object(Kn.a)({rootWrap:{minWidth:\"100%\",minHeight:\"100%\"},tableWrap:{},JScodeWrap:{minHeight:\"420\"}}),le=function(n){return i.a.createElement(ae.a,Object.assign({elevation:6,variant:\"filled\"},n))};function ue(){var n=se(),e=i.a.useState(\"Welcome\"),t=Object(S.a)(e,2),r=t[0],a=t[1],o=i.a.useState(\"console.log('Hello JS')\"),s=Object(S.a)(o,2),l=s[0],u=s[1],d=i.a.useState([]),c=Object(S.a)(d,2),m=c[0],h=c[1],p=i.a.useState(\"\"),f=Object(S.a)(p,2),g=f[0],w=f[1],b=i.a.useState({columns:[{title:\"ID\",field:\"id\"},{title:\"Name\",field:\"name\"}],data:oe}),v=Object(S.a)(b,2),y=v[0];v[1];return i.a.createElement(\"div\",{className:n.rootWrap},i.a.createElement(ee.a,{container:!0,spacing:1},i.a.createElement(ee.a,{item:!0,xs:12,sm:12,md:4},i.a.createElement(Xn.a,{title:\"\",columns:y.columns,data:y.data,onRowClick:function(n,e){a(e.name),u(e.jsSolution),h(e.refLink),w(e.notes)}})),i.a.createElement(ee.a,{item:!0,xs:12,sm:12,md:8,className:n.JScodeWrap},i.a.createElement(te.a,null,i.a.createElement(re.a,null,i.a.createElement(Zn.a,{variant:\"h5\",component:\"h5\"},r),m.map((function(e,t){return i.a.createElement(Zn.a,{className:n.root,key:t},i.a.createElement(ie.a,{href:e,target:\"_blank\",rel:\"noopener\"},e))})),g&&i.a.createElement(le,{severity:\"info\"},g),i.a.createElement($n.a,{language:\"javascript\",style:ne.a},l))))))}var de=Object(Kn.a)((function(n){return{root:{display:\"flex\"},appBar:{transition:n.transitions.create([\"margin\",\"width\"],{easing:n.transitions.easing.sharp,duration:n.transitions.duration.leavingScreen})},appBarShift:{width:\"calc(100% - \".concat(240,\"px)\"),transition:n.transitions.create([\"margin\",\"width\"],{easing:n.transitions.easing.easeOut,duration:n.transitions.duration.enteringScreen}),marginRight:240},title:{flexGrow:1},hide:{display:\"none\"},drawer:{width:240,flexShrink:0},drawerPaper:{width:240},drawerHeader:Object(c.a)(Object(c.a)({display:\"flex\",alignItems:\"center\",padding:n.spacing(0,1)},n.mixins.toolbar),{},{justifyContent:\"flex-start\"}),content:{overflow:\"scroll\",flexGrow:1,padding:n.spacing(3),transition:n.transitions.create(\"margin\",{easing:n.transitions.easing.sharp,duration:n.transitions.duration.leavingScreen}),marginRight:-240},contentShift:{transition:n.transitions.create(\"margin\",{easing:n.transitions.easing.easeOut,duration:n.transitions.duration.enteringScreen}),marginRight:0}}}));function ce(){var n=de();return i.a.createElement(\"div\",{className:n.root},i.a.createElement(ue,null))}var me=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(ce,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))};var he=function(){return document.documentElement.classList.remove(\"nav-open\"),i.a.useEffect((function(){return document.body.classList.add(\"index\"),function(){document.body.classList.remove(\"index\")}})),i.a.createElement(i.a.Fragment,null,i.a.createElement(P,null),i.a.createElement(M,null),i.a.createElement(\"div\",{className:\"main\"},i.a.createElement(G,null)))};o.a.render(i.a.createElement(u.a,{store:y},i.a.createElement(s.a,null,i.a.createElement(l.d,null,i.a.createElement(l.b,{path:\"/index\",render:function(n){return i.a.createElement(R,n)}}),i.a.createElement(l.b,{path:\"/react-ticket\",render:function(n){return i.a.createElement(U,n)}}),i.a.createElement(l.b,{path:\"/react-todolist\",render:function(n){return i.a.createElement(on,n)}}),i.a.createElement(l.b,{path:\"/react-weatherApp\",render:function(n){return i.a.createElement(jn,n)}}),i.a.createElement(l.b,{path:\"/react-redditBrowserApp\",render:function(n){return i.a.createElement(Jn,n)}}),i.a.createElement(l.b,{path:\"/ai-tensorflow\",render:function(n){return i.a.createElement(he,n)}}),i.a.createElement(l.b,{path:\"/js\",render:function(n){return i.a.createElement(me,n)}}),i.a.createElement(l.a,{to:\"/index\"})))),document.getElementById(\"root\"))},579:function(n,e,t){t(235),n.exports=t(1072)},612:function(n,e,t){},613:function(n,e,t){},614:function(n,e,t){},634:function(n,e,t){n.exports=t.p+\"static/media/antoine-barres.dfbf459c.jpg\"},635:function(n,e,t){n.exports=t.p+\"static/media/fog-low.7812184c.png\"},636:function(n,e,t){n.exports=t.p+\"static/media/clouds.61c4e000.png\"},637:function(n,e,t){},638:function(n,e,t){},639:function(n,e,t){},658:function(n,e,t){},659:function(n,e,t){},805:function(n,e,t){},817:function(n,e,t){}},[[579,5,0,9]]]);","extractedComments":[]}